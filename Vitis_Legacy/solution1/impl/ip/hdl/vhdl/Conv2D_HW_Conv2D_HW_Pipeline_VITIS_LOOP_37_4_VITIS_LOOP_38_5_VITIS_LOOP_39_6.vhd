-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_37_4_VITIS_LOOP_38_5_VITIS_LOOP_39_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputHeight_cast9 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln34 : IN STD_LOGIC_VECTOR (31 downto 0);
    convWidth_cast : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln15_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    mul_ln15 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul_ln1027_1 : IN STD_LOGIC_VECTOR (61 downto 0);
    tmp1 : IN STD_LOGIC_VECTOR (61 downto 0);
    coeffs : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp3_cast_mid144 : IN STD_LOGIC_VECTOR (31 downto 0);
    convWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln1027 : IN STD_LOGIC_VECTOR (0 downto 0);
    inputWidth_cast10 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_V_cast13 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    acc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_out_ap_vld : OUT STD_LOGIC;
    grp_fu_291_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_291_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_291_p_dout0 : IN STD_LOGIC_VECTOR (61 downto 0);
    grp_fu_291_p_ce : OUT STD_LOGIC;
    grp_fu_443_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_443_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_443_p_dout0 : IN STD_LOGIC_VECTOR (61 downto 0);
    grp_fu_443_p_ce : OUT STD_LOGIC );
end;


architecture behav of Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_37_4_VITIS_LOOP_38_5_VITIS_LOOP_39_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1027_1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_cast13_cast_fu_247_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal x_V_cast13_cast_reg_770 : STD_LOGIC_VECTOR (61 downto 0);
    signal inputWidth_cast10_cast_fu_251_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal inputWidth_cast10_cast_reg_775 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp3_cast_mid144_cast_fu_255_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp3_cast_mid144_cast_reg_780 : STD_LOGIC_VECTOR (61 downto 0);
    signal convWidth_cast_cast_fu_259_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal convWidth_cast_cast_reg_785 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln34_cast_fu_263_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln34_cast_reg_791 : STD_LOGIC_VECTOR (32 downto 0);
    signal inputHeight_cast9_cast_fu_267_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal inputHeight_cast9_cast_reg_797 : STD_LOGIC_VECTOR (61 downto 0);
    signal cy_V_1_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal indvar_flatten68_load_reg_808 : STD_LOGIC_VECTOR (95 downto 0);
    signal zext_ln1027_fu_310_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln1027_1_fu_319_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln1027_1_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_823_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_823_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_823_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_823_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_823_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_823_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_823_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_823_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_823_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_load_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_load_reg_832 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1027_2_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_2_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_2_reg_837_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1027_fu_344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln840_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln840_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1027_1_fu_370_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln1027_1_reg_856 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1027_5_fu_380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1027_5_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1027_5_reg_861_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln840_1_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln840_1_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_876 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_36_reg_882 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1027_6_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_6_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_6_reg_892_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_6_reg_892_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_6_reg_892_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_6_reg_892_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_480_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp3_reg_903 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_mid136_reg_908 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp3_mid1_fu_488_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp3_mid1_reg_914 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_mid115_reg_919 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1027_8_fu_538_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1027_8_reg_924 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp10_fu_548_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp10_reg_929 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp10_reg_929_pp0_iter3_reg : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln1027_reg_934 : STD_LOGIC_VECTOR (61 downto 0);
    signal gmem_addr_reg_939 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln1027_2_reg_945 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln39_mid2_v_reg_950 : STD_LOGIC_VECTOR (61 downto 0);
    signal gmem_addr_1_reg_955 : STD_LOGIC_VECTOR (63 downto 0);
    signal filterValue_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_reg_961_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_reg_961_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelValue_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal add_ln42_fu_587_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal op2_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln840_2_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cy_V_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_9_fu_434_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_120 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1027_10_fu_450_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal iChannel_V_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_1_fu_358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten68_fu_128 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln1027_fu_398_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal zext_ln1027_3_fu_366_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln1027_3_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_410_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1027_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_429_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1027_5_fu_445_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal cy_V_cast_fu_477_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal cy_V_cast_mid1_fu_485_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp3_cast_fu_493_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_mid146_fu_506_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_35_fu_496_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp3_cast_mid1_fu_523_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1027_2_fu_501_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1027_3_fu_510_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_mid1_fu_526_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1027_4_fu_516_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal cx_V_cast_fu_545_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1027_7_fu_532_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln38_mid2_v_v_v_v_fu_558_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1027_2_fu_565_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln38_mid2_v_fu_570_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln42_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1027_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1027_3_fu_599_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln39_mid2_v_v_v_v_fu_603_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1027_4_fu_611_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal cx_V_cast8_fu_629_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln1027_1_fu_626_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln43_fu_632_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_654_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_314_ce : STD_LOGIC;
    signal grp_fu_323_ce : STD_LOGIC;
    signal grp_fu_406_ce : STD_LOGIC;
    signal grp_fu_410_ce : STD_LOGIC;
    signal grp_fu_429_ce : STD_LOGIC;
    signal grp_fu_554_ce : STD_LOGIC;
    signal grp_fu_654_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to11 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_410_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_429_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Conv2D_HW_mul_32ns_32ns_62_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component Conv2D_HW_mul_62s_62s_62_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (61 downto 0);
        din1 : IN STD_LOGIC_VECTOR (61 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component Conv2D_HW_mul_62s_32ns_62_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (61 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component Conv2D_HW_mul_32s_32s_52_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component Conv2D_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_62s_62s_62_5_1_U3 : component Conv2D_HW_mul_62s_62s_62_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 62,
        din1_WIDTH => 62,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp1,
        din1 => add_ln1027_1_reg_856,
        ce => grp_fu_406_ce,
        dout => grp_fu_406_p2);

    mul_32ns_32ns_62_2_1_U4 : component Conv2D_HW_mul_32ns_32ns_62_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_410_p0,
        din1 => grp_fu_410_p1,
        ce => grp_fu_410_ce,
        dout => grp_fu_410_p2);

    mul_32ns_32ns_62_2_1_U5 : component Conv2D_HW_mul_32ns_32ns_62_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_429_p0,
        din1 => grp_fu_429_p1,
        ce => grp_fu_429_ce,
        dout => grp_fu_429_p2);

    mul_62s_32ns_62_5_1_U6 : component Conv2D_HW_mul_62s_32ns_62_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 62,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln1027_8_reg_924,
        din1 => grp_fu_554_p1,
        ce => grp_fu_554_ce,
        dout => grp_fu_554_p2);

    mul_32s_32s_52_2_1_U7 : component Conv2D_HW_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pixelValue_reg_966,
        din1 => filterValue_reg_961_pp0_iter9_reg,
        ce => grp_fu_654_ce,
        dout => grp_fu_654_p2);

    flow_control_loop_pipe_sequential_init_U : component Conv2D_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    acc_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_fu_108 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                acc_fu_108 <= acc_1_fu_673_p2;
            end if; 
        end if;
    end process;

    cy_V_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    cy_V_fu_116 <= ap_const_lv32_0;
                elsif (((icmp_ln1027_1_reg_823 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    cy_V_fu_116 <= select_ln1027_9_fu_434_p3;
                end if;
            end if; 
        end if;
    end process;

    iChannel_V_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                iChannel_V_fu_124 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1027_1_fu_328_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                iChannel_V_fu_124 <= select_ln1027_1_fu_358_p3;
            end if; 
        end if;
    end process;

    indvar_flatten68_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten68_fu_128 <= ap_const_lv96_0;
                elsif (((icmp_ln1027_1_reg_823 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten68_fu_128 <= add_ln1027_fu_398_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_120 <= ap_const_lv64_0;
                elsif (((icmp_ln1027_1_reg_823 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_120 <= select_ln1027_10_fu_450_p3;
                end if;
            end if; 
        end if;
    end process;

    op2_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    op2_fu_112 <= ap_const_lv32_0;
                elsif (((icmp_ln1027_1_reg_823 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    op2_fu_112 <= add_ln840_2_fu_439_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1027_1_fu_328_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln1027_1_reg_856 <= add_ln1027_1_fu_370_p2;
                add_ln840_1_reg_869 <= add_ln840_1_fu_387_p2;
                add_ln840_reg_851 <= add_ln840_fu_352_p2;
                icmp_ln1027_2_reg_837 <= icmp_ln1027_2_fu_339_p2;
                indvar_flatten_load_reg_832 <= indvar_flatten_fu_120;
                op2_load_reg_827 <= op2_fu_112;
                select_ln1027_5_reg_861 <= select_ln1027_5_fu_380_p3;
                select_ln1027_reg_846 <= select_ln1027_fu_344_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                cy_V_1_reg_803 <= cy_V_fu_116;
                filterValue_reg_961 <= m_axi_gmem_RDATA;
                filterValue_reg_961_pp0_iter8_reg <= filterValue_reg_961;
                filterValue_reg_961_pp0_iter9_reg <= filterValue_reg_961_pp0_iter8_reg;
                gmem_addr_1_reg_955 <= sext_ln43_fu_638_p1;
                gmem_addr_reg_939 <= add_ln42_fu_587_p2;
                icmp_ln1027_1_reg_823 <= icmp_ln1027_1_fu_328_p2;
                icmp_ln1027_1_reg_823_pp0_iter1_reg <= icmp_ln1027_1_reg_823;
                icmp_ln1027_1_reg_823_pp0_iter2_reg <= icmp_ln1027_1_reg_823_pp0_iter1_reg;
                icmp_ln1027_1_reg_823_pp0_iter3_reg <= icmp_ln1027_1_reg_823_pp0_iter2_reg;
                icmp_ln1027_1_reg_823_pp0_iter4_reg <= icmp_ln1027_1_reg_823_pp0_iter3_reg;
                icmp_ln1027_1_reg_823_pp0_iter5_reg <= icmp_ln1027_1_reg_823_pp0_iter4_reg;
                icmp_ln1027_1_reg_823_pp0_iter6_reg <= icmp_ln1027_1_reg_823_pp0_iter5_reg;
                icmp_ln1027_1_reg_823_pp0_iter7_reg <= icmp_ln1027_1_reg_823_pp0_iter6_reg;
                icmp_ln1027_1_reg_823_pp0_iter8_reg <= icmp_ln1027_1_reg_823_pp0_iter7_reg;
                icmp_ln1027_1_reg_823_pp0_iter9_reg <= icmp_ln1027_1_reg_823_pp0_iter8_reg;
                icmp_ln1027_2_reg_837_pp0_iter1_reg <= icmp_ln1027_2_reg_837;
                indvar_flatten68_load_reg_808 <= indvar_flatten68_fu_128;
                mul_ln1027_2_reg_945 <= grp_fu_554_p2;
                select_ln1027_5_reg_861_pp0_iter1_reg <= select_ln1027_5_reg_861;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    convWidth_cast_cast_reg_785(31 downto 0) <= convWidth_cast_cast_fu_259_p1(31 downto 0);
                empty_36_reg_882 <= grp_fu_443_p_dout0;
                empty_reg_876 <= grp_fu_291_p_dout0;
                    inputHeight_cast9_cast_reg_797(31 downto 0) <= inputHeight_cast9_cast_fu_267_p1(31 downto 0);
                    inputWidth_cast10_cast_reg_775(31 downto 0) <= inputWidth_cast10_cast_fu_251_p1(31 downto 0);
                mul_ln1027_reg_934 <= grp_fu_406_p2;
                pixelValue_reg_966 <= m_axi_gmem_RDATA;
                select_ln1027_6_reg_892_pp0_iter2_reg <= select_ln1027_6_reg_892;
                select_ln1027_6_reg_892_pp0_iter3_reg <= select_ln1027_6_reg_892_pp0_iter2_reg;
                select_ln1027_6_reg_892_pp0_iter4_reg <= select_ln1027_6_reg_892_pp0_iter3_reg;
                select_ln1027_6_reg_892_pp0_iter5_reg <= select_ln1027_6_reg_892_pp0_iter4_reg;
                sext_ln39_mid2_v_reg_950 <= add_ln1027_4_fu_611_p2(63 downto 2);
                tmp10_reg_929_pp0_iter3_reg <= tmp10_reg_929;
                    tmp3_cast_mid144_cast_reg_780(31 downto 0) <= tmp3_cast_mid144_cast_fu_255_p1(31 downto 0);
                trunc_ln1_reg_981 <= grp_fu_654_p2(51 downto 20);
                    x_V_cast13_cast_reg_770(31 downto 0) <= x_V_cast13_cast_fu_247_p1(31 downto 0);
                    zext_ln34_cast_reg_791(31 downto 0) <= zext_ln34_cast_fu_263_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1027_5_reg_861 = ap_const_lv1_1) and (icmp_ln1027_1_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                p_mid115_reg_919 <= grp_fu_429_p2;
                tmp3_mid1_reg_914 <= tmp3_mid1_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_1_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                p_mid136_reg_908 <= grp_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_1_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln1027_6_reg_892 <= select_ln1027_6_fu_419_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_1_reg_823_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln1027_8_reg_924 <= select_ln1027_8_fu_538_p3;
                tmp10_reg_929 <= tmp10_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1027_5_reg_861 = ap_const_lv1_0) and (icmp_ln1027_2_reg_837 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp3_reg_903 <= tmp3_fu_480_p2;
            end if;
        end if;
    end process;
    x_V_cast13_cast_reg_770(61 downto 32) <= "000000000000000000000000000000";
    inputWidth_cast10_cast_reg_775(61 downto 32) <= "000000000000000000000000000000";
    tmp3_cast_mid144_cast_reg_780(61 downto 32) <= "000000000000000000000000000000";
    convWidth_cast_cast_reg_785(61 downto 32) <= "000000000000000000000000000000";
    zext_ln34_cast_reg_791(32) <= '0';
    inputHeight_cast9_cast_reg_797(61 downto 32) <= "000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to11, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to11 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    acc_1_fu_673_p2 <= std_logic_vector(unsigned(trunc_ln1_reg_981) + unsigned(acc_fu_108));
    acc_out <= acc_fu_108;

    acc_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln1027_1_reg_823_pp0_iter9_reg)
    begin
        if (((icmp_ln1027_1_reg_823_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            acc_out_ap_vld <= ap_const_logic_1;
        else 
            acc_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1027_1_fu_370_p2 <= std_logic_vector(unsigned(zext_ln1027_3_fu_366_p1) + unsigned(mul_ln1027_1));
    add_ln1027_2_fu_565_p2 <= std_logic_vector(unsigned(sext_ln38_mid2_v_v_v_v_fu_558_p3) + unsigned(coeffs));
    add_ln1027_3_fu_599_p2 <= std_logic_vector(unsigned(mul_ln1027_2_reg_945) + unsigned(x_V_cast13_cast_reg_770));
    add_ln1027_4_fu_611_p2 <= std_logic_vector(unsigned(sext_ln39_mid2_v_v_v_v_fu_603_p3) + unsigned(input_r));
    add_ln1027_5_fu_445_p2 <= std_logic_vector(unsigned(indvar_flatten_load_reg_832) + unsigned(ap_const_lv64_1));
    add_ln1027_fu_398_p2 <= std_logic_vector(unsigned(indvar_flatten68_load_reg_808) + unsigned(ap_const_lv96_1));
    add_ln42_fu_587_p2 <= std_logic_vector(unsigned(zext_ln42_fu_584_p1) + unsigned(sext_ln1027_fu_580_p1));
    add_ln43_fu_632_p2 <= std_logic_vector(unsigned(cx_V_cast8_fu_629_p1) + unsigned(sext_ln1027_1_fu_626_p1));
    add_ln840_1_fu_387_p2 <= std_logic_vector(unsigned(select_ln1027_fu_344_p3) + unsigned(ap_const_lv32_1));
    add_ln840_2_fu_439_p2 <= std_logic_vector(unsigned(select_ln1027_6_fu_419_p3) + unsigned(ap_const_lv32_1));
    add_ln840_fu_352_p2 <= std_logic_vector(unsigned(iChannel_V_fu_124) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter10, m_axi_gmem_ARREADY, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter10, m_axi_gmem_ARREADY, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, m_axi_gmem_ARREADY, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, m_axi_gmem_ARREADY, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage1_iter7_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state16_pp0_stage1_iter7 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp0_stage0_iter10_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state21_pp0_stage0_iter10 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1027_1_fu_328_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1027_1_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1027_1_reg_823_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln1027_1_reg_823_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to11_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to11 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    convWidth_cast_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(convWidth_cast),62));
    cx_V_cast8_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_6_reg_892_pp0_iter5_reg),63));
    cx_V_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_6_reg_892),62));
    cy_V_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cy_V_1_reg_803),33));
    cy_V_cast_mid1_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln840_1_reg_869),33));
    empty_35_fu_496_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_493_p1) + unsigned(empty_reg_876));

    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, m_axi_gmem_ARREADY, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, m_axi_gmem_RVALID, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_291_p_ce <= grp_fu_314_ce;
    grp_fu_291_p_din0 <= zext_ln1027_fu_310_p1(32 - 1 downto 0);
    grp_fu_291_p_din1 <= inputHeight_cast9_cast_reg_797(32 - 1 downto 0);

    grp_fu_314_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_314_ce <= ap_const_logic_1;
        else 
            grp_fu_314_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_323_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_323_ce <= ap_const_logic_1;
        else 
            grp_fu_323_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_406_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_406_ce <= ap_const_logic_1;
        else 
            grp_fu_406_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_410_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_410_ce <= ap_const_logic_1;
        else 
            grp_fu_410_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_410_p0 <= grp_fu_410_p00(32 - 1 downto 0);
    grp_fu_410_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln840_reg_851),62));
    grp_fu_410_p1 <= inputHeight_cast9_cast_reg_797(32 - 1 downto 0);

    grp_fu_429_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_429_ce <= ap_const_logic_1;
        else 
            grp_fu_429_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_429_p0 <= grp_fu_429_p00(32 - 1 downto 0);
    grp_fu_429_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln840_1_reg_869),62));
    grp_fu_429_p1 <= convWidth_cast_cast_reg_785(32 - 1 downto 0);
    grp_fu_443_p_ce <= grp_fu_323_ce;
    grp_fu_443_p_din0 <= zext_ln1027_1_fu_319_p1(32 - 1 downto 0);
    grp_fu_443_p_din1 <= convWidth_cast_cast_reg_785(32 - 1 downto 0);

    grp_fu_554_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_554_ce <= ap_const_logic_1;
        else 
            grp_fu_554_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_554_p1 <= inputWidth_cast10_cast_reg_775(32 - 1 downto 0);

    grp_fu_654_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_654_ce <= ap_const_logic_1;
        else 
            grp_fu_654_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1027_1_fu_328_p2 <= "1" when (indvar_flatten68_fu_128 = mul_ln15_1) else "0";
    icmp_ln1027_2_fu_339_p2 <= "1" when (indvar_flatten_fu_120 = mul_ln15) else "0";
    icmp_ln1027_3_fu_375_p2 <= "1" when (op2_fu_112 = convWidth) else "0";
    inputHeight_cast9_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputHeight_cast9),62));
    inputWidth_cast10_cast_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputWidth_cast10),62));

    m_axi_gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, gmem_addr_reg_939, gmem_addr_1_reg_955)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_ARADDR <= gmem_addr_1_reg_955;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_939;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    or_ln1027_fu_415_p2 <= (select_ln1027_5_reg_861 or icmp_ln1027_2_reg_837);
    p_mid146_fu_506_p2 <= std_logic_vector(unsigned(tmp3_cast_mid144_cast_reg_780) + unsigned(p_mid136_reg_908));
    p_mid1_fu_526_p2 <= std_logic_vector(unsigned(tmp3_cast_mid1_fu_523_p1) + unsigned(select_ln1027_2_fu_501_p3));
    select_ln1027_10_fu_450_p3 <= 
        ap_const_lv64_1 when (icmp_ln1027_2_reg_837(0) = '1') else 
        add_ln1027_5_fu_445_p2;
    select_ln1027_1_fu_358_p3 <= 
        add_ln840_fu_352_p2 when (icmp_ln1027_2_fu_339_p2(0) = '1') else 
        iChannel_V_fu_124;
    select_ln1027_2_fu_501_p3 <= 
        p_mid136_reg_908 when (icmp_ln1027_2_reg_837_pp0_iter1_reg(0) = '1') else 
        empty_reg_876;
    select_ln1027_3_fu_510_p3 <= 
        ap_const_lv62_0 when (icmp_ln1027_2_reg_837_pp0_iter1_reg(0) = '1') else 
        empty_36_reg_882;
    select_ln1027_4_fu_516_p3 <= 
        p_mid146_fu_506_p2 when (icmp_ln1027_2_reg_837_pp0_iter1_reg(0) = '1') else 
        empty_35_fu_496_p2;
    select_ln1027_5_fu_380_p3 <= 
        icmp_ln1027 when (icmp_ln1027_2_fu_339_p2(0) = '1') else 
        icmp_ln1027_3_fu_375_p2;
    select_ln1027_6_fu_419_p3 <= 
        ap_const_lv32_0 when (or_ln1027_fu_415_p2(0) = '1') else 
        op2_load_reg_827;
    select_ln1027_7_fu_532_p3 <= 
        p_mid115_reg_919 when (select_ln1027_5_reg_861_pp0_iter1_reg(0) = '1') else 
        select_ln1027_3_fu_510_p3;
    select_ln1027_8_fu_538_p3 <= 
        p_mid1_fu_526_p2 when (select_ln1027_5_reg_861_pp0_iter1_reg(0) = '1') else 
        select_ln1027_4_fu_516_p3;
    select_ln1027_9_fu_434_p3 <= 
        add_ln840_1_reg_869 when (select_ln1027_5_reg_861(0) = '1') else 
        select_ln1027_reg_846;
    select_ln1027_fu_344_p3 <= 
        ap_const_lv32_0 when (icmp_ln1027_2_fu_339_p2(0) = '1') else 
        cy_V_fu_116;
        sext_ln1027_1_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln39_mid2_v_reg_950),63));

        sext_ln1027_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln38_mid2_v_fu_570_p4),64));

    sext_ln38_mid2_v_fu_570_p4 <= add_ln1027_2_fu_565_p2(63 downto 2);
    sext_ln38_mid2_v_v_v_v_fu_558_p3 <= (mul_ln1027_reg_934 & ap_const_lv2_0);
    sext_ln39_mid2_v_v_v_v_fu_603_p3 <= (add_ln1027_3_fu_599_p2 & ap_const_lv2_0);
        sext_ln43_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln43_fu_632_p2),64));

    tmp10_fu_548_p2 <= std_logic_vector(unsigned(cx_V_cast_fu_545_p1) + unsigned(select_ln1027_7_fu_532_p3));
    tmp3_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_reg_903),62));
    tmp3_cast_mid144_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_cast_mid144),62));
    tmp3_cast_mid1_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_mid1_reg_914),62));
    tmp3_fu_480_p2 <= std_logic_vector(unsigned(cy_V_cast_fu_477_p1) + unsigned(zext_ln34_cast_reg_791));
    tmp3_mid1_fu_488_p2 <= std_logic_vector(unsigned(cy_V_cast_mid1_fu_485_p1) + unsigned(zext_ln34_cast_reg_791));
    x_V_cast13_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_cast13),62));
    zext_ln1027_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cy_V_fu_116),62));
    zext_ln1027_3_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_1_fu_358_p3),62));
    zext_ln1027_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iChannel_V_fu_124),62));
    zext_ln34_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln34),33));
    zext_ln42_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_reg_929_pp0_iter3_reg),64));
end behav;
