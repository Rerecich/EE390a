-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_117_15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    acc_3_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_2_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_1_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_0_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    iFilterBase : IN STD_LOGIC_VECTOR (31 downto 0);
    numFilters : IN STD_LOGIC_VECTOR (31 downto 0);
    biases : IN STD_LOGIC_VECTOR (63 downto 0);
    tobool : IN STD_LOGIC_VECTOR (0 downto 0);
    sub93 : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln89 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln127_cast : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0);
    acc_3_9_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_3_9_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_3_9_out_o_ap_vld : OUT STD_LOGIC;
    acc_2_9_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_2_9_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_2_9_out_o_ap_vld : OUT STD_LOGIC;
    acc_1_9_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_1_9_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_1_9_out_o_ap_vld : OUT STD_LOGIC;
    acc_0_8_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_0_8_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_0_8_out_o_ap_vld : OUT STD_LOGIC;
    grp_fu_484_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_484_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_484_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_484_p_ce : OUT STD_LOGIC;
    grp_fu_512_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_512_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_512_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_512_p_ce : OUT STD_LOGIC );
end;


architecture behav of Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_117_15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln119_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal icmp_ln119_reg_606_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal icmp_ln119_reg_606_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal icmp_ln119_reg_606_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal icmp_ln119_reg_606_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln117_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln127_cast_cast_fu_230_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln127_cast_cast_reg_579 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln89_cast_fu_234_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln89_cast_reg_584 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln118_fu_282_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_reg_593 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_reg_593_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_reg_593_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_reg_593_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_reg_593_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_reg_593_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_reg_593_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_reg_593_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_reg_593_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln119_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_606_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_610 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln127_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln127_1_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln127_1_fu_377_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln127_1_reg_626 : STD_LOGIC_VECTOR (33 downto 0);
    signal gmem_addr_2_reg_631 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_631_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_631_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_631_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_7_fu_465_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_7_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_fu_500_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_4_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_4_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_5_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_5_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_6_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_6_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln121_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln127_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_sig_allocacmp_acc_3_9_out_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_acc_2_9_out_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_acc_1_9_out_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_acc_0_8_out_load : STD_LOGIC_VECTOR (31 downto 0);
    signal pf_fu_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln117_fu_276_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_pf_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_286_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1_fu_310_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln121_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln121_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_330_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln127_fu_365_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln127_fu_368_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln127_1_fu_373_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln2_fu_382_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln127_2_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln127_2_fu_393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_fu_398_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_2_fu_434_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln121_1_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_452_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln123_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp19_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_350_ce : STD_LOGIC;
    signal grp_fu_361_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Conv2D_HW_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2D_HW_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2D_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_32_1_1_U85 : component Conv2D_HW_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_sig_allocacmp_acc_0_8_out_load,
        din1 => ap_sig_allocacmp_acc_1_9_out_load,
        din2 => ap_sig_allocacmp_acc_2_9_out_load,
        din3 => ap_sig_allocacmp_acc_3_9_out_load,
        din4 => trunc_ln118_reg_593_pp0_iter8_reg,
        dout => tmp_2_fu_434_p6);

    flow_control_loop_pipe_sequential_init_U : component Conv2D_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    pf_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln117_fu_270_p2 = ap_const_lv1_0))) then 
                    pf_fu_120 <= add_ln117_fu_276_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    pf_fu_120 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter8_reg = ap_const_lv1_1))) then
                acc_3_4_reg_652 <= acc_3_4_fu_508_p3;
                acc_3_5_reg_657 <= acc_3_5_fu_516_p3;
                acc_3_6_reg_662 <= acc_3_6_fu_524_p3;
                acc_3_7_reg_642 <= acc_3_7_fu_465_p3;
                acc_3_reg_647 <= acc_3_fu_500_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_606_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln127_1_reg_626 <= add_ln127_1_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_addr_2_reg_631_pp0_iter6_reg <= gmem_addr_2_reg_631;
                gmem_addr_2_reg_631_pp0_iter7_reg <= gmem_addr_2_reg_631_pp0_iter6_reg;
                gmem_addr_2_reg_631_pp0_iter8_reg <= gmem_addr_2_reg_631_pp0_iter7_reg;
                icmp_ln119_reg_606_pp0_iter10_reg <= icmp_ln119_reg_606_pp0_iter9_reg;
                icmp_ln119_reg_606_pp0_iter11_reg <= icmp_ln119_reg_606_pp0_iter10_reg;
                icmp_ln119_reg_606_pp0_iter12_reg <= icmp_ln119_reg_606_pp0_iter11_reg;
                icmp_ln119_reg_606_pp0_iter13_reg <= icmp_ln119_reg_606_pp0_iter12_reg;
                icmp_ln119_reg_606_pp0_iter14_reg <= icmp_ln119_reg_606_pp0_iter13_reg;
                icmp_ln119_reg_606_pp0_iter2_reg <= icmp_ln119_reg_606_pp0_iter1_reg;
                icmp_ln119_reg_606_pp0_iter3_reg <= icmp_ln119_reg_606_pp0_iter2_reg;
                icmp_ln119_reg_606_pp0_iter4_reg <= icmp_ln119_reg_606_pp0_iter3_reg;
                icmp_ln119_reg_606_pp0_iter5_reg <= icmp_ln119_reg_606_pp0_iter4_reg;
                icmp_ln119_reg_606_pp0_iter6_reg <= icmp_ln119_reg_606_pp0_iter5_reg;
                icmp_ln119_reg_606_pp0_iter7_reg <= icmp_ln119_reg_606_pp0_iter6_reg;
                icmp_ln119_reg_606_pp0_iter8_reg <= icmp_ln119_reg_606_pp0_iter7_reg;
                icmp_ln119_reg_606_pp0_iter9_reg <= icmp_ln119_reg_606_pp0_iter8_reg;
                trunc_ln118_reg_593_pp0_iter2_reg <= trunc_ln118_reg_593_pp0_iter1_reg;
                trunc_ln118_reg_593_pp0_iter3_reg <= trunc_ln118_reg_593_pp0_iter2_reg;
                trunc_ln118_reg_593_pp0_iter4_reg <= trunc_ln118_reg_593_pp0_iter3_reg;
                trunc_ln118_reg_593_pp0_iter5_reg <= trunc_ln118_reg_593_pp0_iter4_reg;
                trunc_ln118_reg_593_pp0_iter6_reg <= trunc_ln118_reg_593_pp0_iter5_reg;
                trunc_ln118_reg_593_pp0_iter7_reg <= trunc_ln118_reg_593_pp0_iter6_reg;
                trunc_ln118_reg_593_pp0_iter8_reg <= trunc_ln118_reg_593_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln119_reg_606_pp0_iter1_reg <= icmp_ln119_reg_606;
                trunc_ln118_reg_593_pp0_iter1_reg <= trunc_ln118_reg_593;
                    trunc_ln127_cast_cast_reg_579(31 downto 0) <= trunc_ln127_cast_cast_fu_230_p1(31 downto 0);
                    zext_ln89_cast_reg_584(31 downto 0) <= zext_ln89_cast_fu_234_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_606_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_2_reg_631 <= sext_ln127_fu_408_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter7_reg = ap_const_lv1_1))) then
                gmem_addr_read_reg_637 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln117_fu_270_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_reg_610 <= sext_ln121_fu_340_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln117_fu_270_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln119_reg_606 <= icmp_ln119_fu_304_p2;
                trunc_ln118_reg_593 <= trunc_ln118_fu_282_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_606_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln127_1_reg_621 <= grp_fu_512_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606 = ap_const_lv1_1))) then
                mul_ln127_reg_616 <= grp_fu_484_p_dout0;
            end if;
        end if;
    end process;
    trunc_ln127_cast_cast_reg_579(33 downto 32) <= "00";
    zext_ln89_cast_reg_584(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    acc_0_8_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, acc_0_7_reload, acc_0_8_out_i, ap_block_pp0_stage0, acc_3_6_reg_662, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                acc_0_8_out_o <= acc_0_7_reload;
            elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
                acc_0_8_out_o <= acc_3_6_reg_662;
            else 
                acc_0_8_out_o <= acc_0_8_out_i;
            end if;
        else 
            acc_0_8_out_o <= acc_0_8_out_i;
        end if; 
    end process;


    acc_0_8_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1)))) then 
            acc_0_8_out_o_ap_vld <= ap_const_logic_1;
        else 
            acc_0_8_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    acc_1_9_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, acc_1_7_reload, acc_1_9_out_i, ap_block_pp0_stage0, acc_3_5_reg_657, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                acc_1_9_out_o <= acc_1_7_reload;
            elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
                acc_1_9_out_o <= acc_3_5_reg_657;
            else 
                acc_1_9_out_o <= acc_1_9_out_i;
            end if;
        else 
            acc_1_9_out_o <= acc_1_9_out_i;
        end if; 
    end process;


    acc_1_9_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1)))) then 
            acc_1_9_out_o_ap_vld <= ap_const_logic_1;
        else 
            acc_1_9_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    acc_2_9_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, acc_2_7_reload, acc_2_9_out_i, ap_block_pp0_stage0, acc_3_4_reg_652, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                acc_2_9_out_o <= acc_2_7_reload;
            elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
                acc_2_9_out_o <= acc_3_4_reg_652;
            else 
                acc_2_9_out_o <= acc_2_9_out_i;
            end if;
        else 
            acc_2_9_out_o <= acc_2_9_out_i;
        end if; 
    end process;


    acc_2_9_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1)))) then 
            acc_2_9_out_o_ap_vld <= ap_const_logic_1;
        else 
            acc_2_9_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    acc_3_4_fu_508_p3 <= 
        acc_3_7_fu_465_p3 when (sel_tmp7_fu_483_p2(0) = '1') else 
        ap_sig_allocacmp_acc_2_9_out_load;
    acc_3_5_fu_516_p3 <= 
        acc_3_7_fu_465_p3 when (sel_tmp6_fu_478_p2(0) = '1') else 
        ap_sig_allocacmp_acc_1_9_out_load;
    acc_3_6_fu_524_p3 <= 
        acc_3_7_fu_465_p3 when (sel_tmp_fu_473_p2(0) = '1') else 
        ap_sig_allocacmp_acc_0_8_out_load;
    acc_3_7_fu_465_p3 <= 
        ap_const_lv32_0 when (and_ln123_fu_460_p2(0) = '1') else 
        add_ln121_1_fu_447_p2;

    acc_3_9_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, acc_3_7_reload, acc_3_9_out_i, ap_block_pp0_stage0, acc_3_reg_647, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                acc_3_9_out_o <= acc_3_7_reload;
            elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
                acc_3_9_out_o <= acc_3_reg_647;
            else 
                acc_3_9_out_o <= acc_3_9_out_i;
            end if;
        else 
            acc_3_9_out_o <= acc_3_9_out_i;
        end if; 
    end process;


    acc_3_9_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1)))) then 
            acc_3_9_out_o_ap_vld <= ap_const_logic_1;
        else 
            acc_3_9_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    acc_3_fu_500_p3 <= 
        ap_sig_allocacmp_acc_3_9_out_load when (sel_tmp9_fu_494_p2(0) = '1') else 
        acc_3_7_fu_465_p3;
    add_ln117_fu_276_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_pf_1) + unsigned(ap_const_lv3_1));
    add_ln121_1_fu_447_p2 <= std_logic_vector(unsigned(gmem_addr_read_reg_637) + unsigned(tmp_2_fu_434_p6));
    add_ln121_fu_324_p2 <= std_logic_vector(unsigned(zext_ln121_fu_320_p1) + unsigned(biases));
    add_ln127_1_fu_377_p2 <= std_logic_vector(unsigned(zext_ln127_1_fu_373_p1) + unsigned(trunc_ln127_cast_cast_reg_579));
    add_ln127_2_fu_393_p2 <= std_logic_vector(unsigned(zext_ln127_2_fu_389_p1) + unsigned(output_r));
    add_ln127_fu_368_p2 <= std_logic_vector(unsigned(zext_ln89_cast_reg_584) + unsigned(zext_ln127_fu_365_p1));
    add_ln_fu_296_p3 <= (tmp_1_fu_286_p4 & trunc_ln118_fu_282_p1);
    and_ln123_fu_460_p2 <= (tobool and tmp_fu_452_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln119_reg_606_pp0_iter7_reg, icmp_ln119_reg_606_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter14_reg = ap_const_lv1_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter15, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_block_state2_io, icmp_ln119_reg_606_pp0_iter7_reg, ap_block_state10_io, ap_block_state11_io, icmp_ln119_reg_606_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter14_reg = ap_const_lv1_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_io)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter15, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_block_state2_io, icmp_ln119_reg_606_pp0_iter7_reg, ap_block_state10_io, ap_block_state11_io, icmp_ln119_reg_606_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter14_reg = ap_const_lv1_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_io)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln119_reg_606_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state10_io_assign_proc : process(m_axi_gmem_AWREADY, icmp_ln119_reg_606_pp0_iter8_reg)
    begin
                ap_block_state10_io <= ((m_axi_gmem_AWREADY = ap_const_logic_0) and (icmp_ln119_reg_606_pp0_iter8_reg = ap_const_lv1_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_io_assign_proc : process(m_axi_gmem_WREADY, icmp_ln119_reg_606_pp0_iter9_reg)
    begin
                ap_block_state11_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1));
    end process;

        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage0_iter15_assign_proc : process(m_axi_gmem_BVALID, icmp_ln119_reg_606_pp0_iter14_reg)
    begin
                ap_block_state16_pp0_stage0_iter15 <= ((icmp_ln119_reg_606_pp0_iter14_reg = ap_const_lv1_1) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln119_reg_606)
    begin
                ap_block_state2_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln119_reg_606 = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter8_assign_proc : process(m_axi_gmem_RVALID, icmp_ln119_reg_606_pp0_iter7_reg)
    begin
                ap_block_state9_pp0_stage0_iter8 <= ((icmp_ln119_reg_606_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln117_fu_270_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln117_fu_270_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter14_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_acc_0_8_out_load_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, acc_0_8_out_i, ap_block_pp0_stage0, acc_3_6_reg_662)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
            ap_sig_allocacmp_acc_0_8_out_load <= acc_3_6_reg_662;
        else 
            ap_sig_allocacmp_acc_0_8_out_load <= acc_0_8_out_i;
        end if; 
    end process;


    ap_sig_allocacmp_acc_1_9_out_load_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, acc_1_9_out_i, ap_block_pp0_stage0, acc_3_5_reg_657)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
            ap_sig_allocacmp_acc_1_9_out_load <= acc_3_5_reg_657;
        else 
            ap_sig_allocacmp_acc_1_9_out_load <= acc_1_9_out_i;
        end if; 
    end process;


    ap_sig_allocacmp_acc_2_9_out_load_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, acc_2_9_out_i, ap_block_pp0_stage0, acc_3_4_reg_652)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
            ap_sig_allocacmp_acc_2_9_out_load <= acc_3_4_reg_652;
        else 
            ap_sig_allocacmp_acc_2_9_out_load <= acc_2_9_out_i;
        end if; 
    end process;


    ap_sig_allocacmp_acc_3_9_out_load_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, acc_3_9_out_i, ap_block_pp0_stage0, acc_3_reg_647)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
            ap_sig_allocacmp_acc_3_9_out_load <= acc_3_reg_647;
        else 
            ap_sig_allocacmp_acc_3_9_out_load <= acc_3_9_out_i;
        end if; 
    end process;


    ap_sig_allocacmp_pf_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, pf_fu_120)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_pf_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_pf_1 <= pf_fu_120;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_ARREADY, icmp_ln119_reg_606, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln119_reg_606 = ap_const_lv1_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem_AWREADY, icmp_ln119_reg_606_pp0_iter8_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln119_reg_606_pp0_iter8_reg = ap_const_lv1_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter15, m_axi_gmem_BVALID, icmp_ln119_reg_606_pp0_iter14_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln119_reg_606_pp0_iter14_reg = ap_const_lv1_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_gmem_RVALID, icmp_ln119_reg_606_pp0_iter7_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln119_reg_606_pp0_iter7_reg = ap_const_lv1_1))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_gmem_WREADY, icmp_ln119_reg_606_pp0_iter9_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_350_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_350_ce <= ap_const_logic_1;
        else 
            grp_fu_350_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_361_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_361_ce <= ap_const_logic_1;
        else 
            grp_fu_361_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_484_p_ce <= grp_fu_350_ce;
    grp_fu_484_p_din0 <= sub93;
    grp_fu_484_p_din1 <= add_ln_fu_296_p3;
    grp_fu_512_p_ce <= grp_fu_361_ce;
    grp_fu_512_p_din0 <= mul_ln127_reg_616;
    grp_fu_512_p_din1 <= sub;
    icmp_ln117_fu_270_p2 <= "1" when (ap_sig_allocacmp_pf_1 = ap_const_lv3_4) else "0";
    icmp_ln119_fu_304_p2 <= "1" when (unsigned(add_ln_fu_296_p3) < unsigned(numFilters)) else "0";
    m_axi_gmem_ARADDR <= gmem_addr_reg_610;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln119_reg_606, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606 = ap_const_lv1_1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_2_reg_631_pp0_iter8_reg;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln119_reg_606_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter8_reg = ap_const_lv1_1))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter15, icmp_ln119_reg_606_pp0_iter14_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter14_reg = ap_const_lv1_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln119_reg_606_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter7_reg = ap_const_lv1_1))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= acc_3_7_reg_642;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln119_reg_606_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln119_reg_606_pp0_iter9_reg = ap_const_lv1_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp6_fu_478_p2 <= "1" when (trunc_ln118_reg_593_pp0_iter8_reg = ap_const_lv2_1) else "0";
    sel_tmp7_fu_483_p2 <= "1" when (trunc_ln118_reg_593_pp0_iter8_reg = ap_const_lv2_2) else "0";
    sel_tmp9_fu_494_p2 <= (tmp19_fu_488_p2 or sel_tmp_fu_473_p2);
    sel_tmp_fu_473_p2 <= "1" when (trunc_ln118_reg_593_pp0_iter8_reg = ap_const_lv2_0) else "0";
        sext_ln121_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_330_p4),64));

        sext_ln127_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_398_p4),64));

    shl_ln1_fu_310_p4 <= ((tmp_1_fu_286_p4 & trunc_ln118_fu_282_p1) & ap_const_lv2_0);
    shl_ln2_fu_382_p3 <= (add_ln127_1_reg_626 & ap_const_lv2_0);
    tmp19_fu_488_p2 <= (sel_tmp7_fu_483_p2 or sel_tmp6_fu_478_p2);
    tmp_1_fu_286_p4 <= iFilterBase(31 downto 2);
    tmp_fu_452_p3 <= add_ln121_1_fu_447_p2(31 downto 31);
    trunc_ln118_fu_282_p1 <= ap_sig_allocacmp_pf_1(2 - 1 downto 0);
    trunc_ln127_cast_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln127_cast),34));
    trunc_ln8_fu_330_p4 <= add_ln121_fu_324_p2(63 downto 2);
    trunc_ln9_fu_398_p4 <= add_ln127_2_fu_393_p2(63 downto 2);
    zext_ln121_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_310_p4),64));
    zext_ln127_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln127_fu_368_p2),34));
    zext_ln127_2_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_382_p3),64));
    zext_ln127_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln127_1_reg_621),33));
    zext_ln89_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln89),33));
end behav;
