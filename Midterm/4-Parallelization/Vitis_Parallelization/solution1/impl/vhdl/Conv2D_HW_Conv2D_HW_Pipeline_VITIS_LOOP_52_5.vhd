-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_52_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_ln40 : IN STD_LOGIC_VECTOR (31 downto 0);
    convWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln50 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln19_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    mul_ln19 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (10 downto 0);
    tmp_cast_mid136 : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln52_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    coeff_cache_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_ce0 : OUT STD_LOGIC;
    coeff_cache_we0 : OUT STD_LOGIC;
    coeff_cache_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_1_ce0 : OUT STD_LOGIC;
    coeff_cache_1_we0 : OUT STD_LOGIC;
    coeff_cache_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_2_ce0 : OUT STD_LOGIC;
    coeff_cache_2_we0 : OUT STD_LOGIC;
    coeff_cache_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    coeffs : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_484_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_484_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_484_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_484_p_ce : OUT STD_LOGIC;
    grp_fu_512_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_512_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_512_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_512_p_ce : OUT STD_LOGIC;
    grp_fu_1158_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1158_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1158_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1158_p_ce : OUT STD_LOGIC;
    grp_fu_1162_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1162_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1162_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1162_p_ce : OUT STD_LOGIC );
end;


architecture behav of Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_52_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal or_ln51_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_723_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln50_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal first_iter_0_reg_226 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln50_cast_fu_238_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln50_cast_reg_687 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_mid136_cast_fu_242_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_mid136_cast_reg_693 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast1_fu_246_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast1_reg_698 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln50_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_703_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_703_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_703_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_707_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_707_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_707_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_707_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_fu_311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_reg_716_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_reg_716_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_reg_716_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_reg_716_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_723_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_723_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_723_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_723_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_reg_727_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_reg_727_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_reg_727_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_reg_727_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal cy_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_reg_743 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_1_fu_390_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_1_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_1_fu_414_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln51_1_reg_758 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_68_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_68_reg_763_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_76_fu_486_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter13_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_76_reg_769_pp0_iter14_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_69_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid126_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid1_reg_785 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_70_fu_510_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal empty_70_reg_790 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_mid138_fu_528_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_mid138_reg_795 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_mid111_fu_545_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_mid111_reg_800 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln52_mid2_v_reg_805 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln54_fu_593_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_810 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_810_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_810_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_810_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_810_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_810_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_810_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_810_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_810_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_addr_1_read_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter5_stage0 : STD_LOGIC;
    signal ap_phi_mux_first_iter_0_phi_fu_230_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_cast7_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln51_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cx_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_cx_load : STD_LOGIC_VECTOR (31 downto 0);
    signal cy_1_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_3_fu_421_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln51_4_fu_344_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal iChannel_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten56_fu_118 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln50_1_fu_286_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal icmp_ln52_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln52_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_2_fu_338_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln51_fu_373_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_1_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_fu_373_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln50_fu_383_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_1_fu_410_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln50_3_fu_397_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln50_1_cast_fu_452_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_72_fu_455_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_74_fu_464_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_468_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_73_fu_460_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_75_fu_476_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast_fu_498_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_501_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_fu_506_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln51_fu_495_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln50_2_fu_519_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln50_1_fu_516_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast_mid1_fu_533_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_mid1_fu_536_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_mid1_fu_541_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln50_2_fu_524_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_mid138_cast_fu_551_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln50_5_fu_554_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln51_2_fu_560_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln52_mid2_v_v_v_v_v_fu_566_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln51_1_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln51_1_fu_578_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_368_ce : STD_LOGIC;
    signal grp_fu_448_ce : STD_LOGIC;
    signal grp_fu_482_ce : STD_LOGIC;
    signal grp_fu_491_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Conv2D_HW_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2D_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Conv2D_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    cx_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cx_fu_102 <= ap_const_lv32_0;
                elsif (((icmp_ln50_reg_703 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    cx_fu_102 <= add_ln52_fu_428_p2;
                end if;
            end if; 
        end if;
    end process;

    cy_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cy_1_fu_106 <= ap_const_lv32_0;
                elsif (((icmp_ln50_reg_703 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    cy_1_fu_106 <= select_ln51_3_fu_421_p3;
                end if;
            end if; 
        end if;
    end process;

    first_iter_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_703 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_0_reg_226 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_0_reg_226 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    iChannel_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iChannel_fu_114 <= ap_const_lv32_0;
                elsif (((icmp_ln50_reg_703 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    iChannel_fu_114 <= select_ln50_1_fu_390_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten56_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten56_fu_118 <= ap_const_lv96_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln50_fu_281_p2 = ap_const_lv1_0))) then 
                    indvar_flatten56_fu_118 <= add_ln50_1_fu_286_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_110 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln50_fu_281_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_110 <= select_ln51_4_fu_344_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_703 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln50_reg_743 <= add_ln50_fu_377_p2;
                add_ln51_reg_753 <= add_ln51_fu_404_p2;
                select_ln50_1_reg_748 <= select_ln50_1_fu_390_p3;
                select_ln51_1_reg_758 <= select_ln51_1_fu_414_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                cy_reg_733 <= cy_1_fu_106;
                empty_68_reg_763 <= grp_fu_484_p_dout0;
                empty_68_reg_763_pp0_iter4_reg <= empty_68_reg_763;
                empty_76_reg_769_pp0_iter10_reg <= empty_76_reg_769_pp0_iter9_reg;
                empty_76_reg_769_pp0_iter11_reg <= empty_76_reg_769_pp0_iter10_reg;
                empty_76_reg_769_pp0_iter12_reg <= empty_76_reg_769_pp0_iter11_reg;
                empty_76_reg_769_pp0_iter13_reg <= empty_76_reg_769_pp0_iter12_reg;
                empty_76_reg_769_pp0_iter14_reg <= empty_76_reg_769_pp0_iter13_reg;
                empty_76_reg_769_pp0_iter4_reg <= empty_76_reg_769;
                empty_76_reg_769_pp0_iter5_reg <= empty_76_reg_769_pp0_iter4_reg;
                empty_76_reg_769_pp0_iter6_reg <= empty_76_reg_769_pp0_iter5_reg;
                empty_76_reg_769_pp0_iter7_reg <= empty_76_reg_769_pp0_iter6_reg;
                empty_76_reg_769_pp0_iter8_reg <= empty_76_reg_769_pp0_iter7_reg;
                empty_76_reg_769_pp0_iter9_reg <= empty_76_reg_769_pp0_iter8_reg;
                gmem_addr_1_read_reg_824 <= m_axi_gmem_RDATA;
                icmp_ln50_reg_703_pp0_iter2_reg <= icmp_ln50_reg_703;
                icmp_ln50_reg_703_pp0_iter3_reg <= icmp_ln50_reg_703_pp0_iter2_reg;
                icmp_ln50_reg_703_pp0_iter4_reg <= icmp_ln50_reg_703_pp0_iter3_reg;
                icmp_ln51_reg_707_pp0_iter2_reg <= icmp_ln51_reg_707;
                icmp_ln51_reg_707_pp0_iter3_reg <= icmp_ln51_reg_707_pp0_iter2_reg;
                icmp_ln51_reg_707_pp0_iter4_reg <= icmp_ln51_reg_707_pp0_iter3_reg;
                icmp_ln51_reg_707_pp0_iter5_reg <= icmp_ln51_reg_707_pp0_iter4_reg;
                or_ln51_reg_723_pp0_iter2_reg <= or_ln51_reg_723;
                or_ln51_reg_723_pp0_iter3_reg <= or_ln51_reg_723_pp0_iter2_reg;
                or_ln51_reg_723_pp0_iter4_reg <= or_ln51_reg_723_pp0_iter3_reg;
                or_ln51_reg_723_pp0_iter5_reg <= or_ln51_reg_723_pp0_iter4_reg;
                or_ln51_reg_723_pp0_iter6_reg <= or_ln51_reg_723_pp0_iter5_reg;
                select_ln50_4_reg_716_pp0_iter2_reg <= select_ln50_4_reg_716;
                select_ln50_4_reg_716_pp0_iter3_reg <= select_ln50_4_reg_716_pp0_iter2_reg;
                select_ln50_4_reg_716_pp0_iter4_reg <= select_ln50_4_reg_716_pp0_iter3_reg;
                select_ln50_4_reg_716_pp0_iter5_reg <= select_ln50_4_reg_716_pp0_iter4_reg;
                select_ln51_reg_727_pp0_iter2_reg <= select_ln51_reg_727;
                select_ln51_reg_727_pp0_iter3_reg <= select_ln51_reg_727_pp0_iter2_reg;
                select_ln51_reg_727_pp0_iter4_reg <= select_ln51_reg_727_pp0_iter3_reg;
                select_ln51_reg_727_pp0_iter5_reg <= select_ln51_reg_727_pp0_iter4_reg;
                sext_ln52_mid2_v_reg_805 <= add_ln51_1_fu_578_p2(63 downto 2);
                trunc_ln54_reg_810 <= trunc_ln54_fu_593_p1;
                trunc_ln54_reg_810_pp0_iter10_reg <= trunc_ln54_reg_810_pp0_iter9_reg;
                trunc_ln54_reg_810_pp0_iter11_reg <= trunc_ln54_reg_810_pp0_iter10_reg;
                trunc_ln54_reg_810_pp0_iter12_reg <= trunc_ln54_reg_810_pp0_iter11_reg;
                trunc_ln54_reg_810_pp0_iter13_reg <= trunc_ln54_reg_810_pp0_iter12_reg;
                trunc_ln54_reg_810_pp0_iter14_reg <= trunc_ln54_reg_810_pp0_iter13_reg;
                trunc_ln54_reg_810_pp0_iter7_reg <= trunc_ln54_reg_810;
                trunc_ln54_reg_810_pp0_iter8_reg <= trunc_ln54_reg_810_pp0_iter7_reg;
                trunc_ln54_reg_810_pp0_iter9_reg <= trunc_ln54_reg_810_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln50_reg_703 <= icmp_ln50_fu_281_p2;
                    p_cast1_reg_698(10 downto 0) <= p_cast1_fu_246_p1(10 downto 0);
                    tmp_cast_mid136_cast_reg_693(31 downto 0) <= tmp_cast_mid136_cast_fu_242_p1(31 downto 0);
                    zext_ln50_cast_reg_687(31 downto 0) <= zext_ln50_cast_fu_238_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln50_4_reg_716_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln51_reg_707_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_69_reg_774 <= grp_fu_512_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln50_4_reg_716_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln51_reg_707_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_70_reg_790 <= empty_70_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_703_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_76_reg_769 <= empty_76_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln50_fu_281_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln51_reg_707 <= icmp_ln51_fu_295_p2;
                or_ln51_reg_723 <= or_ln51_fu_318_p2;
                select_ln50_4_reg_716 <= select_ln50_4_fu_311_p3;
                select_ln51_reg_727 <= select_ln51_fu_330_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln50_4_reg_716_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln50_reg_703_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_mid111_reg_800 <= p_mid111_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_703_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_mid126_reg_779 <= grp_fu_1158_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln50_4_reg_716_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln51_reg_707_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln50_reg_703_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_mid138_reg_795 <= p_mid138_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln50_4_reg_716_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln50_reg_703_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_mid1_reg_785 <= grp_fu_1162_p_dout0;
            end if;
        end if;
    end process;
    zext_ln50_cast_reg_687(32) <= '0';
    tmp_cast_mid136_cast_reg_693(32) <= '0';
    p_cast1_reg_698(32 downto 11) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_1_fu_286_p2 <= std_logic_vector(unsigned(indvar_flatten56_fu_118) + unsigned(ap_const_lv96_1));
    add_ln50_fu_377_p0 <= iChannel_fu_114;
    add_ln50_fu_377_p2 <= std_logic_vector(signed(add_ln50_fu_377_p0) + signed(ap_const_lv32_1));
    add_ln51_1_fu_578_p2 <= std_logic_vector(unsigned(zext_ln51_1_fu_574_p1) + unsigned(coeffs));
    add_ln51_2_fu_338_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_110) + unsigned(ap_const_lv64_1));
    add_ln51_fu_404_p2 <= std_logic_vector(unsigned(select_ln50_fu_383_p3) + unsigned(ap_const_lv32_1));
    add_ln52_fu_428_p2 <= std_logic_vector(unsigned(select_ln51_reg_727) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter14, m_axi_gmem_RVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter14, m_axi_gmem_RVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage0_iter14_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state15_pp0_stage0_iter14 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(m_axi_gmem_ARREADY, or_ln51_reg_723_pp0_iter6_reg)
    begin
                ap_block_state8_io <= ((or_ln51_reg_723_pp0_iter6_reg = ap_const_lv1_1) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln50_fu_281_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln50_fu_281_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone, icmp_ln50_reg_703_pp0_iter4_reg)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln50_reg_703_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter14_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_0_phi_fu_230_p4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, first_iter_0_reg_226, icmp_ln50_reg_703)
    begin
        if (((icmp_ln50_reg_703 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_0_phi_fu_230_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_0_phi_fu_230_p4 <= first_iter_0_reg_226;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_cx_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln50_reg_703, cx_fu_102, add_ln52_fu_428_p2)
    begin
        if (((icmp_ln50_reg_703 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_cx_load <= add_ln52_fu_428_p2;
        else 
            ap_sig_allocacmp_cx_load <= cx_fu_102;
        end if; 
    end process;

    coeff_cache_1_address0 <= p_cast7_fu_612_p1(12 - 1 downto 0);

    coeff_cache_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_1_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_1_d0 <= gmem_addr_1_read_reg_824;

    coeff_cache_1_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln54_reg_810_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln54_reg_810_pp0_iter14_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_1_we0 <= ap_const_logic_1;
        else 
            coeff_cache_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_2_address0 <= p_cast7_fu_612_p1(12 - 1 downto 0);

    coeff_cache_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_2_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_2_d0 <= gmem_addr_1_read_reg_824;

    coeff_cache_2_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln54_reg_810_pp0_iter14_reg)
    begin
        if ((not((trunc_ln54_reg_810_pp0_iter14_reg = ap_const_lv2_0)) and not((trunc_ln54_reg_810_pp0_iter14_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_2_we0 <= ap_const_logic_1;
        else 
            coeff_cache_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_address0 <= p_cast7_fu_612_p1(12 - 1 downto 0);

    coeff_cache_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_d0 <= gmem_addr_1_read_reg_824;

    coeff_cache_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln54_reg_810_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln54_reg_810_pp0_iter14_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_we0 <= ap_const_logic_1;
        else 
            coeff_cache_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_70_fu_510_p2 <= std_logic_vector(unsigned(tmp_cast_fu_506_p1) + unsigned(zext_ln51_fu_495_p1));
    empty_72_fu_455_p2 <= std_logic_vector(unsigned(p_cast1_reg_698) + unsigned(select_ln50_1_cast_fu_452_p1));
    empty_73_fu_460_p1 <= empty_72_fu_455_p2(12 - 1 downto 0);
    empty_74_fu_464_p1 <= empty_72_fu_455_p2(10 - 1 downto 0);
    empty_75_fu_476_p2 <= std_logic_vector(unsigned(p_shl_fu_468_p3) - unsigned(empty_73_fu_460_p1));
    empty_76_fu_486_p2 <= std_logic_vector(unsigned(empty_75_fu_476_p2) + unsigned(select_ln51_1_reg_758));

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_gmem_ARREADY, or_ln51_reg_723_pp0_iter6_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln51_reg_723_pp0_iter6_reg = ap_const_lv1_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter14, m_axi_gmem_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1158_p_ce <= grp_fu_482_ce;
    grp_fu_1158_p_din0 <= add_ln50_reg_743;
    grp_fu_1158_p_din1 <= mul_ln40;
    grp_fu_1162_p_ce <= grp_fu_491_ce;
    grp_fu_1162_p_din0 <= add_ln51_reg_753;
    grp_fu_1162_p_din1 <= convWidth;

    grp_fu_368_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_368_ce <= ap_const_logic_1;
        else 
            grp_fu_368_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_448_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_448_ce <= ap_const_logic_1;
        else 
            grp_fu_448_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_482_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_482_ce <= ap_const_logic_1;
        else 
            grp_fu_482_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_484_p_ce <= grp_fu_368_ce;
    grp_fu_484_p_din0 <= iChannel_fu_114;
    grp_fu_484_p_din1 <= mul_ln40;

    grp_fu_491_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_491_ce <= ap_const_logic_1;
        else 
            grp_fu_491_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_512_p_ce <= grp_fu_448_ce;
    grp_fu_512_p_din0 <= cy_reg_733;
    grp_fu_512_p_din1 <= convWidth;
    icmp_ln50_fu_281_p2 <= "1" when (indvar_flatten56_fu_118 = mul_ln19_1) else "0";
    icmp_ln51_fu_295_p2 <= "1" when (indvar_flatten_fu_110 = mul_ln19) else "0";
    icmp_ln52_fu_306_p1 <= convWidth;
    icmp_ln52_fu_306_p2 <= "1" when (ap_sig_allocacmp_cx_load = icmp_ln52_fu_306_p1) else "0";
    m_axi_gmem_ARADDR <= sext_ln51_fu_596_p1;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= convWidth;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter7, or_ln51_reg_723_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln51_reg_723_pp0_iter6_reg = ap_const_lv1_1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    or_ln50_fu_300_p2 <= (icmp_ln51_fu_295_p2 or ap_phi_mux_first_iter_0_phi_fu_230_p4);
    or_ln51_1_fu_324_p2 <= (select_ln50_4_fu_311_p3 or icmp_ln51_fu_295_p2);
    or_ln51_fu_318_p2 <= (select_ln50_4_fu_311_p3 or or_ln50_fu_300_p2);
    p_cast1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty),33));
    p_cast7_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_76_reg_769_pp0_iter14_reg),64));
    p_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_69_reg_774),33));
    p_cast_mid1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid1_reg_785),33));
    p_mid111_fu_545_p2 <= std_logic_vector(unsigned(tmp_cast_mid1_fu_541_p1) + unsigned(zext_ln50_2_fu_524_p1));
    p_mid138_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid138_reg_795),34));
    p_mid138_fu_528_p2 <= std_logic_vector(unsigned(tmp_cast_mid136_cast_reg_693) + unsigned(zext_ln50_1_fu_516_p1));
    p_shl_fu_468_p3 <= (empty_74_fu_464_p1 & ap_const_lv2_0);
    select_ln50_1_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_reg_748),33));
    select_ln50_1_fu_390_p2 <= iChannel_fu_114;
    select_ln50_1_fu_390_p3 <= 
        add_ln50_fu_377_p2 when (icmp_ln51_reg_707(0) = '1') else 
        select_ln50_1_fu_390_p2;
    select_ln50_2_fu_519_p3 <= 
        p_mid126_reg_779 when (icmp_ln51_reg_707_pp0_iter4_reg(0) = '1') else 
        empty_68_reg_763_pp0_iter4_reg;
    select_ln50_3_fu_397_p3 <= 
        ap_const_lv12_0 when (icmp_ln51_reg_707(0) = '1') else 
        trunc_ln51_fu_373_p1;
    select_ln50_4_fu_311_p3 <= 
        icmp_ln52_1 when (icmp_ln51_fu_295_p2(0) = '1') else 
        icmp_ln52_fu_306_p2;
    select_ln50_5_fu_554_p3 <= 
        p_mid138_cast_fu_551_p1 when (icmp_ln51_reg_707_pp0_iter5_reg(0) = '1') else 
        empty_70_reg_790;
    select_ln50_fu_383_p2 <= cy_1_fu_106;
    select_ln50_fu_383_p3 <= 
        ap_const_lv32_0 when (icmp_ln51_reg_707(0) = '1') else 
        select_ln50_fu_383_p2;
    select_ln51_1_fu_414_p3 <= 
        trunc_ln51_1_fu_410_p1 when (select_ln50_4_reg_716(0) = '1') else 
        select_ln50_3_fu_397_p3;
    select_ln51_2_fu_560_p3 <= 
        p_mid111_reg_800 when (select_ln50_4_reg_716_pp0_iter5_reg(0) = '1') else 
        select_ln50_5_fu_554_p3;
    select_ln51_3_fu_421_p3 <= 
        add_ln51_fu_404_p2 when (select_ln50_4_reg_716(0) = '1') else 
        select_ln50_fu_383_p3;
    select_ln51_4_fu_344_p3 <= 
        ap_const_lv64_1 when (icmp_ln51_fu_295_p2(0) = '1') else 
        add_ln51_2_fu_338_p2;
    select_ln51_fu_330_p3 <= 
        ap_const_lv32_0 when (or_ln51_1_fu_324_p2(0) = '1') else 
        ap_sig_allocacmp_cx_load;
        sext_ln51_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln52_mid2_v_reg_805),64));

    sext_ln52_mid2_v_v_v_v_v_fu_566_p3 <= (select_ln51_2_fu_560_p3 & ap_const_lv2_0);
    tmp_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_501_p2),34));
    tmp_cast_mid136_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_mid136),33));
    tmp_cast_mid1_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid1_fu_536_p2),34));
    tmp_fu_501_p2 <= std_logic_vector(unsigned(zext_ln50_cast_reg_687) + unsigned(p_cast_fu_498_p1));
    tmp_mid1_fu_536_p2 <= std_logic_vector(unsigned(zext_ln50_cast_reg_687) + unsigned(p_cast_mid1_fu_533_p1));
    trunc_ln51_1_fu_410_p1 <= add_ln51_fu_404_p2(12 - 1 downto 0);
    trunc_ln51_fu_373_p0 <= cy_1_fu_106;
    trunc_ln51_fu_373_p1 <= trunc_ln51_fu_373_p0(12 - 1 downto 0);
    trunc_ln54_fu_593_p1 <= select_ln51_reg_727_pp0_iter5_reg(2 - 1 downto 0);
    zext_ln50_1_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid126_reg_779),33));
    zext_ln50_2_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_2_fu_519_p3),34));
    zext_ln50_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln50),33));
    zext_ln51_1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln52_mid2_v_v_v_v_v_fu_566_p3),64));
    zext_ln51_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_68_reg_763_pp0_iter4_reg),34));
end behav;
