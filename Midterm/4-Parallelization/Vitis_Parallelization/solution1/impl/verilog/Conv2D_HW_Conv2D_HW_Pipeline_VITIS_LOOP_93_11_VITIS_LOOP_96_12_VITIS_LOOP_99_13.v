// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_93_11_VITIS_LOOP_96_12_VITIS_LOOP_99_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        acc_3_3_reload,
        acc_2_3_reload,
        acc_1_3_reload,
        acc_0_32_reload,
        mul_ln19_1,
        mul_ln19,
        trunc_ln,
        convWidth,
        icmp_ln52_1,
        coeff_cache_address0,
        coeff_cache_ce0,
        coeff_cache_q0,
        coeff_cache_address1,
        coeff_cache_ce1,
        coeff_cache_q1,
        coeff_cache_address2,
        coeff_cache_ce2,
        coeff_cache_q2,
        coeff_cache_address3,
        coeff_cache_ce3,
        coeff_cache_q3,
        coeff_cache_1_address0,
        coeff_cache_1_ce0,
        coeff_cache_1_q0,
        coeff_cache_1_address1,
        coeff_cache_1_ce1,
        coeff_cache_1_q1,
        coeff_cache_1_address2,
        coeff_cache_1_ce2,
        coeff_cache_1_q2,
        coeff_cache_1_address3,
        coeff_cache_1_ce3,
        coeff_cache_1_q3,
        coeff_cache_2_address0,
        coeff_cache_2_ce0,
        coeff_cache_2_q0,
        coeff_cache_2_address1,
        coeff_cache_2_ce1,
        coeff_cache_2_q1,
        coeff_cache_2_address2,
        coeff_cache_2_ce2,
        coeff_cache_2_q2,
        coeff_cache_2_address3,
        coeff_cache_2_ce3,
        coeff_cache_2_q3,
        x_cast,
        row_buffer_address0,
        row_buffer_ce0,
        row_buffer_q0,
        row_buffer_1_address0,
        row_buffer_1_ce0,
        row_buffer_1_q0,
        row_buffer_2_address0,
        row_buffer_2_ce0,
        row_buffer_2_q0,
        icmp_ln107,
        icmp_ln107_1,
        icmp_ln107_2,
        acc_3_7_out,
        acc_3_7_out_ap_vld,
        acc_2_7_out,
        acc_2_7_out_ap_vld,
        acc_1_7_out,
        acc_1_7_out_ap_vld,
        acc_0_7_out,
        acc_0_7_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] acc_3_3_reload;
input  [31:0] acc_2_3_reload;
input  [31:0] acc_1_3_reload;
input  [31:0] acc_0_32_reload;
input  [95:0] mul_ln19_1;
input  [63:0] mul_ln19;
input  [11:0] trunc_ln;
input  [31:0] convWidth;
input  [0:0] icmp_ln52_1;
output  [11:0] coeff_cache_address0;
output   coeff_cache_ce0;
input  [31:0] coeff_cache_q0;
output  [11:0] coeff_cache_address1;
output   coeff_cache_ce1;
input  [31:0] coeff_cache_q1;
output  [11:0] coeff_cache_address2;
output   coeff_cache_ce2;
input  [31:0] coeff_cache_q2;
output  [11:0] coeff_cache_address3;
output   coeff_cache_ce3;
input  [31:0] coeff_cache_q3;
output  [11:0] coeff_cache_1_address0;
output   coeff_cache_1_ce0;
input  [31:0] coeff_cache_1_q0;
output  [11:0] coeff_cache_1_address1;
output   coeff_cache_1_ce1;
input  [31:0] coeff_cache_1_q1;
output  [11:0] coeff_cache_1_address2;
output   coeff_cache_1_ce2;
input  [31:0] coeff_cache_1_q2;
output  [11:0] coeff_cache_1_address3;
output   coeff_cache_1_ce3;
input  [31:0] coeff_cache_1_q3;
output  [11:0] coeff_cache_2_address0;
output   coeff_cache_2_ce0;
input  [31:0] coeff_cache_2_q0;
output  [11:0] coeff_cache_2_address1;
output   coeff_cache_2_ce1;
input  [31:0] coeff_cache_2_q1;
output  [11:0] coeff_cache_2_address2;
output   coeff_cache_2_ce2;
input  [31:0] coeff_cache_2_q2;
output  [11:0] coeff_cache_2_address3;
output   coeff_cache_2_ce3;
input  [31:0] coeff_cache_2_q3;
input  [11:0] x_cast;
output  [11:0] row_buffer_address0;
output   row_buffer_ce0;
input  [31:0] row_buffer_q0;
output  [11:0] row_buffer_1_address0;
output   row_buffer_1_ce0;
input  [31:0] row_buffer_1_q0;
output  [11:0] row_buffer_2_address0;
output   row_buffer_2_ce0;
input  [31:0] row_buffer_2_q0;
input  [0:0] icmp_ln107;
input  [0:0] icmp_ln107_1;
input  [0:0] icmp_ln107_2;
output  [31:0] acc_3_7_out;
output   acc_3_7_out_ap_vld;
output  [31:0] acc_2_7_out;
output   acc_2_7_out_ap_vld;
output  [31:0] acc_1_7_out;
output   acc_1_7_out_ap_vld;
output  [31:0] acc_0_7_out;
output   acc_0_7_out_ap_vld;

reg ap_idle;
reg coeff_cache_ce0;
reg coeff_cache_ce1;
reg coeff_cache_ce2;
reg coeff_cache_ce3;
reg coeff_cache_1_ce0;
reg coeff_cache_1_ce1;
reg coeff_cache_1_ce2;
reg coeff_cache_1_ce3;
reg coeff_cache_2_ce0;
reg coeff_cache_2_ce1;
reg coeff_cache_2_ce2;
reg coeff_cache_2_ce3;
reg row_buffer_ce0;
reg row_buffer_1_ce0;
reg row_buffer_2_ce0;
reg acc_3_7_out_ap_vld;
reg acc_2_7_out_ap_vld;
reg acc_1_7_out_ap_vld;
reg acc_0_7_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln93_fu_503_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln107_2_read_reg_1190;
wire   [0:0] icmp_ln107_1_read_reg_1195;
wire   [0:0] icmp_ln107_read_reg_1200;
wire   [11:0] sub_ln109_fu_497_p2;
reg   [11:0] sub_ln109_reg_1235;
reg   [0:0] icmp_ln93_reg_1243;
reg   [0:0] icmp_ln93_reg_1243_pp0_iter2_reg;
reg   [0:0] icmp_ln93_reg_1243_pp0_iter3_reg;
reg   [0:0] icmp_ln93_reg_1243_pp0_iter4_reg;
reg   [0:0] icmp_ln93_reg_1243_pp0_iter5_reg;
reg   [0:0] icmp_ln93_reg_1243_pp0_iter6_reg;
wire   [0:0] icmp_ln96_fu_527_p2;
reg   [0:0] icmp_ln96_reg_1247;
reg   [0:0] icmp_ln96_reg_1247_pp0_iter2_reg;
wire   [11:0] sub_ln109_1_fu_544_p2;
reg   [11:0] sub_ln109_1_reg_1259;
reg   [11:0] sub_ln109_1_reg_1259_pp0_iter2_reg;
wire  signed [11:0] trunc_ln109_3_fu_562_p1;
wire   [11:0] sub_ln109_2_fu_574_p2;
reg   [11:0] sub_ln109_2_reg_1272;
wire   [11:0] add_ln109_4_fu_636_p2;
reg   [11:0] add_ln109_4_reg_1280;
wire   [11:0] add_ln109_5_fu_642_p2;
reg   [11:0] add_ln109_5_reg_1285;
wire   [11:0] add_ln109_6_fu_648_p2;
reg   [11:0] add_ln109_6_reg_1290;
wire   [0:0] select_ln93_7_fu_686_p3;
reg   [0:0] select_ln93_7_reg_1295;
wire   [11:0] add_ln109_14_fu_725_p2;
reg   [11:0] add_ln109_14_reg_1302;
wire   [11:0] add_ln109_15_fu_736_p2;
reg   [11:0] add_ln109_15_reg_1307;
wire   [11:0] add_ln109_16_fu_747_p2;
reg   [11:0] add_ln109_16_reg_1312;
wire   [1:0] select_ln96_1_fu_757_p3;
reg   [1:0] select_ln96_1_reg_1317;
reg   [1:0] select_ln96_1_reg_1317_pp0_iter3_reg;
reg   [1:0] select_ln96_1_reg_1317_pp0_iter4_reg;
wire   [11:0] select_ln96_2_fu_765_p3;
reg   [11:0] select_ln96_2_reg_1322;
(* use_dsp48 = "no" *) wire   [11:0] add_ln100_1_fu_785_p2;
reg   [11:0] add_ln100_1_reg_1327;
wire   [1:0] empty_67_fu_790_p1;
reg   [1:0] empty_67_reg_1332;
reg   [1:0] empty_67_reg_1332_pp0_iter3_reg;
wire   [31:0] add_ln99_fu_794_p2;
reg   [31:0] add_ln99_reg_1340;
wire   [31:0] filterValue_fu_893_p5;
reg   [31:0] filterValue_reg_1420;
reg  signed [31:0] filterValue_reg_1420_pp0_iter5_reg;
wire   [31:0] filterValue_1_fu_904_p5;
reg   [31:0] filterValue_1_reg_1425;
reg  signed [31:0] filterValue_1_reg_1425_pp0_iter5_reg;
wire   [31:0] filterValue_2_fu_915_p5;
reg   [31:0] filterValue_2_reg_1430;
reg  signed [31:0] filterValue_2_reg_1430_pp0_iter5_reg;
wire   [31:0] filterValue_3_fu_926_p5;
reg   [31:0] filterValue_3_reg_1435;
reg  signed [31:0] filterValue_3_reg_1435_pp0_iter5_reg;
wire   [31:0] pixelValue_fu_937_p5;
reg   [31:0] pixelValue_reg_1440;
wire  signed [51:0] pixelValue_cast_fu_948_p1;
reg   [31:0] trunc_ln6_reg_1473;
reg   [31:0] trunc_ln15_1_reg_1478;
reg   [31:0] trunc_ln15_2_reg_1483;
reg   [31:0] trunc_ln15_3_reg_1488;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln109_fu_838_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln109_1_fu_850_p1;
wire   [63:0] zext_ln109_2_fu_863_p1;
wire   [63:0] zext_ln109_3_fu_876_p1;
wire   [63:0] zext_ln100_fu_887_p1;
reg   [31:0] cx_fu_102;
reg   [31:0] ap_sig_allocacmp_cx_load;
wire    ap_loop_init;
reg   [31:0] acc_0_1_fu_106;
wire   [31:0] acc_0_fu_1039_p2;
reg   [31:0] acc_1_1_fu_110;
wire   [31:0] acc_1_2_fu_1049_p3;
reg   [31:0] acc_2_1_fu_114;
wire   [31:0] acc_2_2_fu_1061_p3;
reg   [31:0] acc_3_fu_118;
wire   [31:0] acc_3_2_fu_1073_p3;
reg   [31:0] cy_fu_122;
wire   [31:0] select_ln96_6_fu_773_p3;
reg   [63:0] indvar_flatten123_fu_126;
wire   [63:0] select_ln96_7_fu_586_p3;
reg   [31:0] iChannel_fu_130;
wire   [31:0] select_ln93_1_fu_550_p3;
reg   [95:0] indvar_flatten195_fu_134;
wire   [95:0] add_ln93_1_fu_508_p2;
wire    ap_block_pp0_stage0_01001;
wire   [9:0] trunc_ln93_fu_481_p1;
wire   [11:0] tmp_5_fu_489_p3;
wire   [11:0] trunc_ln109_fu_485_p1;
wire   [31:0] add_ln93_fu_517_p2;
wire   [9:0] trunc_ln93_1_fu_523_p1;
wire   [11:0] tmp_6_fu_536_p3;
wire   [11:0] trunc_ln109_2_fu_532_p1;
wire   [9:0] trunc_ln93_2_fu_558_p1;
wire   [11:0] tmp_7_fu_566_p3;
wire   [63:0] add_ln96_1_fu_580_p2;
wire   [11:0] trunc_ln109_1_fu_627_p1;
wire   [11:0] add_ln109_fu_612_p2;
wire   [11:0] add_ln109_1_fu_617_p2;
wire   [11:0] add_ln109_2_fu_622_p2;
wire   [1:0] empty_fu_664_p1;
wire   [11:0] add_ln109_3_fu_631_p2;
wire   [0:0] icmp_ln99_fu_681_p2;
wire   [31:0] select_ln93_fu_657_p3;
wire   [0:0] or_ln96_fu_698_p2;
wire   [31:0] add_ln96_fu_692_p2;
wire   [11:0] trunc_ln109_4_fu_711_p1;
wire   [11:0] add_ln109_10_fu_720_p2;
wire   [11:0] add_ln109_11_fu_731_p2;
wire   [11:0] add_ln109_12_fu_742_p2;
wire   [1:0] empty_66_fu_753_p1;
wire   [1:0] select_ln93_2_fu_668_p3;
wire   [11:0] add_ln109_13_fu_715_p2;
wire   [11:0] select_ln93_3_fu_675_p3;
wire   [31:0] select_ln96_fu_703_p3;
wire   [11:0] trunc_ln100_fu_781_p1;
wire   [11:0] add_ln109_7_fu_805_p2;
wire   [11:0] add_ln109_8_fu_810_p2;
wire   [11:0] add_ln109_9_fu_815_p2;
wire   [11:0] select_ln93_4_fu_820_p3;
wire   [11:0] select_ln96_3_fu_844_p3;
wire   [11:0] select_ln93_5_fu_826_p3;
wire   [11:0] select_ln96_4_fu_857_p3;
wire   [11:0] select_ln93_6_fu_832_p3;
wire   [11:0] select_ln96_5_fu_870_p3;
wire  signed [11:0] zext_ln100_fu_887_p0;
wire   [11:0] grp_fu_1116_p3;
wire  signed [31:0] grp_fu_954_p1;
wire  signed [31:0] grp_fu_963_p1;
wire  signed [31:0] grp_fu_972_p1;
wire  signed [31:0] grp_fu_981_p1;
wire   [51:0] grp_fu_954_p2;
wire   [51:0] grp_fu_963_p2;
wire   [51:0] grp_fu_972_p2;
wire   [51:0] grp_fu_981_p2;
wire   [31:0] acc_1_fu_1044_p2;
wire   [31:0] acc_2_fu_1056_p2;
wire   [31:0] acc_3_1_fu_1068_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Conv2D_HW_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U47(
    .din0(coeff_cache_q3),
    .din1(coeff_cache_1_q3),
    .din2(coeff_cache_2_q3),
    .din3(empty_67_reg_1332_pp0_iter3_reg),
    .dout(filterValue_fu_893_p5)
);

Conv2D_HW_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U48(
    .din0(coeff_cache_q2),
    .din1(coeff_cache_1_q2),
    .din2(coeff_cache_2_q2),
    .din3(empty_67_reg_1332_pp0_iter3_reg),
    .dout(filterValue_1_fu_904_p5)
);

Conv2D_HW_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U49(
    .din0(coeff_cache_q1),
    .din1(coeff_cache_1_q1),
    .din2(coeff_cache_2_q1),
    .din3(empty_67_reg_1332_pp0_iter3_reg),
    .dout(filterValue_2_fu_915_p5)
);

Conv2D_HW_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U50(
    .din0(coeff_cache_q0),
    .din1(coeff_cache_1_q0),
    .din2(coeff_cache_2_q0),
    .din3(empty_67_reg_1332_pp0_iter3_reg),
    .dout(filterValue_3_fu_926_p5)
);

Conv2D_HW_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U51(
    .din0(row_buffer_q0),
    .din1(row_buffer_1_q0),
    .din2(row_buffer_2_q0),
    .din3(select_ln96_1_reg_1317_pp0_iter4_reg),
    .dout(pixelValue_fu_937_p5)
);

Conv2D_HW_mul_32s_32s_52_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 52 ))
mul_32s_32s_52_2_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filterValue_reg_1420_pp0_iter5_reg),
    .din1(grp_fu_954_p1),
    .ce(1'b1),
    .dout(grp_fu_954_p2)
);

Conv2D_HW_mul_32s_32s_52_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 52 ))
mul_32s_32s_52_2_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filterValue_1_reg_1425_pp0_iter5_reg),
    .din1(grp_fu_963_p1),
    .ce(1'b1),
    .dout(grp_fu_963_p2)
);

Conv2D_HW_mul_32s_32s_52_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 52 ))
mul_32s_32s_52_2_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filterValue_2_reg_1430_pp0_iter5_reg),
    .din1(grp_fu_972_p1),
    .ce(1'b1),
    .dout(grp_fu_972_p2)
);

Conv2D_HW_mul_32s_32s_52_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 52 ))
mul_32s_32s_52_2_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filterValue_3_reg_1435_pp0_iter5_reg),
    .din1(grp_fu_981_p1),
    .ce(1'b1),
    .dout(grp_fu_981_p2)
);

Conv2D_HW_mac_muladd_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_12s_12s_12ns_12_4_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln109_3_fu_562_p1),
    .din1(trunc_ln),
    .din2(add_ln100_1_reg_1327),
    .ce(1'b1),
    .dout(grp_fu_1116_p3)
);

Conv2D_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            acc_0_1_fu_106 <= acc_0_32_reload;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            acc_0_1_fu_106 <= acc_0_fu_1039_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            acc_1_1_fu_110 <= acc_1_3_reload;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            acc_1_1_fu_110 <= acc_1_2_fu_1049_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            acc_2_1_fu_114 <= acc_2_3_reload;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            acc_2_1_fu_114 <= acc_2_2_fu_1061_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            acc_3_fu_118 <= acc_3_3_reload;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            acc_3_fu_118 <= acc_3_2_fu_1073_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cx_fu_102 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            cx_fu_102 <= add_ln99_reg_1340;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cy_fu_122 <= 32'd0;
        end else if (((icmp_ln93_reg_1243 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            cy_fu_122 <= select_ln96_6_fu_773_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            iChannel_fu_130 <= 32'd0;
        end else if (((icmp_ln93_fu_503_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            iChannel_fu_130 <= select_ln93_1_fu_550_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten123_fu_126 <= 64'd0;
        end else if (((icmp_ln93_fu_503_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten123_fu_126 <= select_ln96_7_fu_586_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten195_fu_134 <= 96'd0;
        end else if (((icmp_ln93_fu_503_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten195_fu_134 <= add_ln93_1_fu_508_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_1243 == 1'd0))) begin
        add_ln100_1_reg_1327 <= add_ln100_1_fu_785_p2;
        add_ln99_reg_1340 <= add_ln99_fu_794_p2;
        empty_67_reg_1332 <= empty_67_fu_790_p1;
        select_ln93_7_reg_1295 <= select_ln93_7_fu_686_p3;
        select_ln96_1_reg_1317 <= select_ln96_1_fu_757_p3;
        select_ln96_2_reg_1322 <= select_ln96_2_fu_765_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_1243 == 1'd0) & (icmp_ln107_read_reg_1200 == 1'd1))) begin
        add_ln109_14_reg_1302 <= add_ln109_14_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_1243 == 1'd0) & (icmp_ln107_1_read_reg_1195 == 1'd1))) begin
        add_ln109_15_reg_1307 <= add_ln109_15_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_1243 == 1'd0) & (icmp_ln107_2_read_reg_1190 == 1'd1))) begin
        add_ln109_16_reg_1312 <= add_ln109_16_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln96_reg_1247 == 1'd0) & (icmp_ln107_read_reg_1200 == 1'd1))) begin
        add_ln109_4_reg_1280 <= add_ln109_4_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln96_reg_1247 == 1'd0) & (icmp_ln107_1_read_reg_1195 == 1'd1))) begin
        add_ln109_5_reg_1285 <= add_ln109_5_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln96_reg_1247 == 1'd0) & (icmp_ln107_2_read_reg_1190 == 1'd1))) begin
        add_ln109_6_reg_1290 <= add_ln109_6_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln93_reg_1243 <= icmp_ln93_fu_503_p2;
        sub_ln109_reg_1235 <= sub_ln109_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        empty_67_reg_1332_pp0_iter3_reg <= empty_67_reg_1332;
        filterValue_1_reg_1425_pp0_iter5_reg <= filterValue_1_reg_1425;
        filterValue_2_reg_1430_pp0_iter5_reg <= filterValue_2_reg_1430;
        filterValue_3_reg_1435_pp0_iter5_reg <= filterValue_3_reg_1435;
        filterValue_reg_1420 <= filterValue_fu_893_p5;
        filterValue_reg_1420_pp0_iter5_reg <= filterValue_reg_1420;
        icmp_ln93_reg_1243_pp0_iter2_reg <= icmp_ln93_reg_1243;
        icmp_ln93_reg_1243_pp0_iter3_reg <= icmp_ln93_reg_1243_pp0_iter2_reg;
        icmp_ln93_reg_1243_pp0_iter4_reg <= icmp_ln93_reg_1243_pp0_iter3_reg;
        icmp_ln93_reg_1243_pp0_iter5_reg <= icmp_ln93_reg_1243_pp0_iter4_reg;
        icmp_ln93_reg_1243_pp0_iter6_reg <= icmp_ln93_reg_1243_pp0_iter5_reg;
        icmp_ln96_reg_1247_pp0_iter2_reg <= icmp_ln96_reg_1247;
        pixelValue_reg_1440 <= pixelValue_fu_937_p5;
        select_ln96_1_reg_1317_pp0_iter3_reg <= select_ln96_1_reg_1317;
        select_ln96_1_reg_1317_pp0_iter4_reg <= select_ln96_1_reg_1317_pp0_iter3_reg;
        sub_ln109_1_reg_1259_pp0_iter2_reg <= sub_ln109_1_reg_1259;
        trunc_ln6_reg_1473 <= {{grp_fu_954_p2[51:20]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln107_read_reg_1200 == 1'd1))) begin
        filterValue_1_reg_1425 <= filterValue_1_fu_904_p5;
        trunc_ln15_1_reg_1478 <= {{grp_fu_963_p2[51:20]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln107_1_read_reg_1195 == 1'd1))) begin
        filterValue_2_reg_1430 <= filterValue_2_fu_915_p5;
        trunc_ln15_2_reg_1483 <= {{grp_fu_972_p2[51:20]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln107_2_read_reg_1190 == 1'd1))) begin
        filterValue_3_reg_1435 <= filterValue_3_fu_926_p5;
        trunc_ln15_3_reg_1488 <= {{grp_fu_981_p2[51:20]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_503_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln96_reg_1247 <= icmp_ln96_fu_527_p2;
        sub_ln109_1_reg_1259 <= sub_ln109_1_fu_544_p2;
        sub_ln109_2_reg_1272 <= sub_ln109_2_fu_574_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_1243_pp0_iter6_reg == 1'd1))) begin
        acc_0_7_out_ap_vld = 1'b1;
    end else begin
        acc_0_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_1243_pp0_iter6_reg == 1'd1))) begin
        acc_1_7_out_ap_vld = 1'b1;
    end else begin
        acc_1_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_1243_pp0_iter6_reg == 1'd1))) begin
        acc_2_7_out_ap_vld = 1'b1;
    end else begin
        acc_2_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_1243_pp0_iter6_reg == 1'd1))) begin
        acc_3_7_out_ap_vld = 1'b1;
    end else begin
        acc_3_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_503_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln93_reg_1243 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_cx_load = add_ln99_reg_1340;
    end else begin
        ap_sig_allocacmp_cx_load = cx_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_1_ce0 = 1'b1;
    end else begin
        coeff_cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_1_ce1 = 1'b1;
    end else begin
        coeff_cache_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_1_ce2 = 1'b1;
    end else begin
        coeff_cache_1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_1_ce3 = 1'b1;
    end else begin
        coeff_cache_1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_2_ce0 = 1'b1;
    end else begin
        coeff_cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_2_ce1 = 1'b1;
    end else begin
        coeff_cache_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_2_ce2 = 1'b1;
    end else begin
        coeff_cache_2_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_2_ce3 = 1'b1;
    end else begin
        coeff_cache_2_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_ce0 = 1'b1;
    end else begin
        coeff_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_ce1 = 1'b1;
    end else begin
        coeff_cache_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_ce2 = 1'b1;
    end else begin
        coeff_cache_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_ce3 = 1'b1;
    end else begin
        coeff_cache_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        row_buffer_1_ce0 = 1'b1;
    end else begin
        row_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        row_buffer_2_ce0 = 1'b1;
    end else begin
        row_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        row_buffer_ce0 = 1'b1;
    end else begin
        row_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_7_out = acc_0_1_fu_106;

assign acc_0_fu_1039_p2 = (trunc_ln6_reg_1473 + acc_0_1_fu_106);

assign acc_1_2_fu_1049_p3 = ((icmp_ln107[0:0] == 1'b1) ? acc_1_fu_1044_p2 : acc_1_1_fu_110);

assign acc_1_7_out = acc_1_1_fu_110;

assign acc_1_fu_1044_p2 = (trunc_ln15_1_reg_1478 + acc_1_1_fu_110);

assign acc_2_2_fu_1061_p3 = ((icmp_ln107_1[0:0] == 1'b1) ? acc_2_fu_1056_p2 : acc_2_1_fu_114);

assign acc_2_7_out = acc_2_1_fu_114;

assign acc_2_fu_1056_p2 = (trunc_ln15_2_reg_1483 + acc_2_1_fu_114);

assign acc_3_1_fu_1068_p2 = (trunc_ln15_3_reg_1488 + acc_3_fu_118);

assign acc_3_2_fu_1073_p3 = ((icmp_ln107_2[0:0] == 1'b1) ? acc_3_1_fu_1068_p2 : acc_3_fu_118);

assign acc_3_7_out = acc_3_fu_118;

assign add_ln100_1_fu_785_p2 = (x_cast + trunc_ln100_fu_781_p1);

assign add_ln109_10_fu_720_p2 = (sub_ln109_2_reg_1272 + 12'd768);

assign add_ln109_11_fu_731_p2 = (sub_ln109_2_reg_1272 + 12'd1536);

assign add_ln109_12_fu_742_p2 = ($signed(sub_ln109_2_reg_1272) + $signed(12'd2304));

assign add_ln109_13_fu_715_p2 = (sub_ln109_2_reg_1272 + trunc_ln109_4_fu_711_p1);

assign add_ln109_14_fu_725_p2 = (add_ln109_10_fu_720_p2 + trunc_ln109_4_fu_711_p1);

assign add_ln109_15_fu_736_p2 = (add_ln109_11_fu_731_p2 + trunc_ln109_4_fu_711_p1);

assign add_ln109_16_fu_747_p2 = (add_ln109_12_fu_742_p2 + trunc_ln109_4_fu_711_p1);

assign add_ln109_1_fu_617_p2 = (sub_ln109_reg_1235 + 12'd1536);

assign add_ln109_2_fu_622_p2 = ($signed(sub_ln109_reg_1235) + $signed(12'd2304));

assign add_ln109_3_fu_631_p2 = (sub_ln109_reg_1235 + trunc_ln109_1_fu_627_p1);

assign add_ln109_4_fu_636_p2 = (add_ln109_fu_612_p2 + trunc_ln109_1_fu_627_p1);

assign add_ln109_5_fu_642_p2 = (add_ln109_1_fu_617_p2 + trunc_ln109_1_fu_627_p1);

assign add_ln109_6_fu_648_p2 = (add_ln109_2_fu_622_p2 + trunc_ln109_1_fu_627_p1);

assign add_ln109_7_fu_805_p2 = (sub_ln109_1_reg_1259_pp0_iter2_reg + 12'd768);

assign add_ln109_8_fu_810_p2 = (sub_ln109_1_reg_1259_pp0_iter2_reg + 12'd1536);

assign add_ln109_9_fu_815_p2 = ($signed(sub_ln109_1_reg_1259_pp0_iter2_reg) + $signed(12'd2304));

assign add_ln109_fu_612_p2 = (sub_ln109_reg_1235 + 12'd768);

assign add_ln93_1_fu_508_p2 = (indvar_flatten195_fu_134 + 96'd1);

assign add_ln93_fu_517_p2 = (iChannel_fu_130 + 32'd1);

assign add_ln96_1_fu_580_p2 = (indvar_flatten123_fu_126 + 64'd1);

assign add_ln96_fu_692_p2 = (select_ln93_fu_657_p3 + 32'd1);

assign add_ln99_fu_794_p2 = (select_ln96_fu_703_p3 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign coeff_cache_1_address0 = zext_ln109_3_fu_876_p1;

assign coeff_cache_1_address1 = zext_ln109_2_fu_863_p1;

assign coeff_cache_1_address2 = zext_ln109_1_fu_850_p1;

assign coeff_cache_1_address3 = zext_ln109_fu_838_p1;

assign coeff_cache_2_address0 = zext_ln109_3_fu_876_p1;

assign coeff_cache_2_address1 = zext_ln109_2_fu_863_p1;

assign coeff_cache_2_address2 = zext_ln109_1_fu_850_p1;

assign coeff_cache_2_address3 = zext_ln109_fu_838_p1;

assign coeff_cache_address0 = zext_ln109_3_fu_876_p1;

assign coeff_cache_address1 = zext_ln109_2_fu_863_p1;

assign coeff_cache_address2 = zext_ln109_1_fu_850_p1;

assign coeff_cache_address3 = zext_ln109_fu_838_p1;

assign empty_66_fu_753_p1 = add_ln96_fu_692_p2[1:0];

assign empty_67_fu_790_p1 = select_ln96_fu_703_p3[1:0];

assign empty_fu_664_p1 = cy_fu_122[1:0];

assign grp_fu_954_p1 = pixelValue_cast_fu_948_p1;

assign grp_fu_963_p1 = pixelValue_cast_fu_948_p1;

assign grp_fu_972_p1 = pixelValue_cast_fu_948_p1;

assign grp_fu_981_p1 = pixelValue_cast_fu_948_p1;

assign icmp_ln107_1_read_reg_1195 = icmp_ln107_1;

assign icmp_ln107_2_read_reg_1190 = icmp_ln107_2;

assign icmp_ln107_read_reg_1200 = icmp_ln107;

assign icmp_ln93_fu_503_p2 = ((indvar_flatten195_fu_134 == mul_ln19_1) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_527_p2 = ((indvar_flatten123_fu_126 == mul_ln19) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_681_p2 = ((ap_sig_allocacmp_cx_load == convWidth) ? 1'b1 : 1'b0);

assign or_ln96_fu_698_p2 = (select_ln93_7_fu_686_p3 | icmp_ln96_reg_1247);

assign pixelValue_cast_fu_948_p1 = $signed(pixelValue_reg_1440);

assign row_buffer_1_address0 = zext_ln100_fu_887_p1;

assign row_buffer_2_address0 = zext_ln100_fu_887_p1;

assign row_buffer_address0 = zext_ln100_fu_887_p1;

assign select_ln93_1_fu_550_p3 = ((icmp_ln96_fu_527_p2[0:0] == 1'b1) ? add_ln93_fu_517_p2 : iChannel_fu_130);

assign select_ln93_2_fu_668_p3 = ((icmp_ln96_reg_1247[0:0] == 1'b1) ? 2'd0 : empty_fu_664_p1);

assign select_ln93_3_fu_675_p3 = ((icmp_ln96_reg_1247[0:0] == 1'b1) ? sub_ln109_1_reg_1259 : add_ln109_3_fu_631_p2);

assign select_ln93_4_fu_820_p3 = ((icmp_ln96_reg_1247_pp0_iter2_reg[0:0] == 1'b1) ? add_ln109_7_fu_805_p2 : add_ln109_4_reg_1280);

assign select_ln93_5_fu_826_p3 = ((icmp_ln96_reg_1247_pp0_iter2_reg[0:0] == 1'b1) ? add_ln109_8_fu_810_p2 : add_ln109_5_reg_1285);

assign select_ln93_6_fu_832_p3 = ((icmp_ln96_reg_1247_pp0_iter2_reg[0:0] == 1'b1) ? add_ln109_9_fu_815_p2 : add_ln109_6_reg_1290);

assign select_ln93_7_fu_686_p3 = ((icmp_ln96_reg_1247[0:0] == 1'b1) ? icmp_ln52_1 : icmp_ln99_fu_681_p2);

assign select_ln93_fu_657_p3 = ((icmp_ln96_reg_1247[0:0] == 1'b1) ? 32'd0 : cy_fu_122);

assign select_ln96_1_fu_757_p3 = ((select_ln93_7_fu_686_p3[0:0] == 1'b1) ? empty_66_fu_753_p1 : select_ln93_2_fu_668_p3);

assign select_ln96_2_fu_765_p3 = ((select_ln93_7_fu_686_p3[0:0] == 1'b1) ? add_ln109_13_fu_715_p2 : select_ln93_3_fu_675_p3);

assign select_ln96_3_fu_844_p3 = ((select_ln93_7_reg_1295[0:0] == 1'b1) ? add_ln109_14_reg_1302 : select_ln93_4_fu_820_p3);

assign select_ln96_4_fu_857_p3 = ((select_ln93_7_reg_1295[0:0] == 1'b1) ? add_ln109_15_reg_1307 : select_ln93_5_fu_826_p3);

assign select_ln96_5_fu_870_p3 = ((select_ln93_7_reg_1295[0:0] == 1'b1) ? add_ln109_16_reg_1312 : select_ln93_6_fu_832_p3);

assign select_ln96_6_fu_773_p3 = ((select_ln93_7_fu_686_p3[0:0] == 1'b1) ? add_ln96_fu_692_p2 : select_ln93_fu_657_p3);

assign select_ln96_7_fu_586_p3 = ((icmp_ln96_fu_527_p2[0:0] == 1'b1) ? 64'd1 : add_ln96_1_fu_580_p2);

assign select_ln96_fu_703_p3 = ((or_ln96_fu_698_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_cx_load);

assign sub_ln109_1_fu_544_p2 = (tmp_6_fu_536_p3 - trunc_ln109_2_fu_532_p1);

assign sub_ln109_2_fu_574_p2 = ($signed(tmp_7_fu_566_p3) - $signed(trunc_ln109_3_fu_562_p1));

assign sub_ln109_fu_497_p2 = (tmp_5_fu_489_p3 - trunc_ln109_fu_485_p1);

assign tmp_5_fu_489_p3 = {{trunc_ln93_fu_481_p1}, {2'd0}};

assign tmp_6_fu_536_p3 = {{trunc_ln93_1_fu_523_p1}, {2'd0}};

assign tmp_7_fu_566_p3 = {{trunc_ln93_2_fu_558_p1}, {2'd0}};

assign trunc_ln100_fu_781_p1 = select_ln96_fu_703_p3[11:0];

assign trunc_ln109_1_fu_627_p1 = cy_fu_122[11:0];

assign trunc_ln109_2_fu_532_p1 = add_ln93_fu_517_p2[11:0];

assign trunc_ln109_3_fu_562_p1 = select_ln93_1_fu_550_p3[11:0];

assign trunc_ln109_4_fu_711_p1 = add_ln96_fu_692_p2[11:0];

assign trunc_ln109_fu_485_p1 = iChannel_fu_130[11:0];

assign trunc_ln93_1_fu_523_p1 = add_ln93_fu_517_p2[9:0];

assign trunc_ln93_2_fu_558_p1 = select_ln93_1_fu_550_p3[9:0];

assign trunc_ln93_fu_481_p1 = iChannel_fu_130[9:0];

assign zext_ln100_fu_887_p0 = grp_fu_1116_p3;

assign zext_ln100_fu_887_p1 = $unsigned(zext_ln100_fu_887_p0);

assign zext_ln109_1_fu_850_p1 = select_ln96_3_fu_844_p3;

assign zext_ln109_2_fu_863_p1 = select_ln96_4_fu_857_p3;

assign zext_ln109_3_fu_876_p1 = select_ln96_5_fu_870_p3;

assign zext_ln109_fu_838_p1 = select_ln96_2_reg_1322;

endmodule //Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_93_11_VITIS_LOOP_96_12_VITIS_LOOP_99_13
