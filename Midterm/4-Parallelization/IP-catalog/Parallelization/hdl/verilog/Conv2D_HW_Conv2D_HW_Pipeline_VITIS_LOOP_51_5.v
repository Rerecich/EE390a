// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_51_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        mul_ln40,
        convWidth,
        zext_ln49,
        mul_ln19_1,
        mul_ln19,
        empty,
        tmp_cast_mid136,
        icmp_ln51_1,
        coeff_cache_address0,
        coeff_cache_ce0,
        coeff_cache_we0,
        coeff_cache_d0,
        coeff_cache_1_address0,
        coeff_cache_1_ce0,
        coeff_cache_1_we0,
        coeff_cache_1_d0,
        coeff_cache_2_address0,
        coeff_cache_2_ce0,
        coeff_cache_2_we0,
        coeff_cache_2_d0,
        coeffs,
        grp_fu_484_p_din0,
        grp_fu_484_p_din1,
        grp_fu_484_p_dout0,
        grp_fu_484_p_ce,
        grp_fu_512_p_din0,
        grp_fu_512_p_din1,
        grp_fu_512_p_dout0,
        grp_fu_512_p_ce,
        grp_fu_1158_p_din0,
        grp_fu_1158_p_din1,
        grp_fu_1158_p_dout0,
        grp_fu_1158_p_ce,
        grp_fu_1162_p_din0,
        grp_fu_1162_p_din1,
        grp_fu_1162_p_dout0,
        grp_fu_1162_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] mul_ln40;
input  [31:0] convWidth;
input  [31:0] zext_ln49;
input  [95:0] mul_ln19_1;
input  [63:0] mul_ln19;
input  [10:0] empty;
input  [31:0] tmp_cast_mid136;
input  [0:0] icmp_ln51_1;
output  [11:0] coeff_cache_address0;
output   coeff_cache_ce0;
output   coeff_cache_we0;
output  [31:0] coeff_cache_d0;
output  [11:0] coeff_cache_1_address0;
output   coeff_cache_1_ce0;
output   coeff_cache_1_we0;
output  [31:0] coeff_cache_1_d0;
output  [11:0] coeff_cache_2_address0;
output   coeff_cache_2_ce0;
output   coeff_cache_2_we0;
output  [31:0] coeff_cache_2_d0;
input  [63:0] coeffs;
output  [31:0] grp_fu_484_p_din0;
output  [31:0] grp_fu_484_p_din1;
input  [31:0] grp_fu_484_p_dout0;
output   grp_fu_484_p_ce;
output  [31:0] grp_fu_512_p_din0;
output  [31:0] grp_fu_512_p_din1;
input  [31:0] grp_fu_512_p_dout0;
output   grp_fu_512_p_ce;
output  [31:0] grp_fu_1158_p_din0;
output  [31:0] grp_fu_1158_p_din1;
input  [31:0] grp_fu_1158_p_dout0;
output   grp_fu_1158_p_ce;
output  [31:0] grp_fu_1162_p_din0;
output  [31:0] grp_fu_1162_p_din1;
input  [31:0] grp_fu_1162_p_dout0;
output   grp_fu_1162_p_ce;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg coeff_cache_ce0;
reg coeff_cache_we0;
reg coeff_cache_1_ce0;
reg coeff_cache_1_we0;
reg coeff_cache_2_ce0;
reg coeff_cache_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg   [0:0] or_ln50_reg_723;
reg   [0:0] or_ln50_reg_723_pp0_iter6_reg;
reg    ap_block_state8_io;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln49_fu_281_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AR;
reg   [0:0] first_iter_0_reg_226;
reg    ap_block_pp0_stage0_11001;
wire   [32:0] zext_ln49_cast_fu_238_p1;
reg   [32:0] zext_ln49_cast_reg_687;
wire   [32:0] tmp_cast_mid136_cast_fu_242_p1;
reg   [32:0] tmp_cast_mid136_cast_reg_693;
wire   [32:0] p_cast1_fu_246_p1;
reg   [32:0] p_cast1_reg_698;
reg   [0:0] icmp_ln49_reg_703;
reg   [0:0] icmp_ln49_reg_703_pp0_iter2_reg;
reg   [0:0] icmp_ln49_reg_703_pp0_iter3_reg;
reg   [0:0] icmp_ln49_reg_703_pp0_iter4_reg;
wire   [0:0] icmp_ln50_fu_295_p2;
reg   [0:0] icmp_ln50_reg_707;
reg   [0:0] icmp_ln50_reg_707_pp0_iter2_reg;
reg   [0:0] icmp_ln50_reg_707_pp0_iter3_reg;
reg   [0:0] icmp_ln50_reg_707_pp0_iter4_reg;
reg   [0:0] icmp_ln50_reg_707_pp0_iter5_reg;
wire   [0:0] select_ln49_4_fu_311_p3;
reg   [0:0] select_ln49_4_reg_716;
reg   [0:0] select_ln49_4_reg_716_pp0_iter2_reg;
reg   [0:0] select_ln49_4_reg_716_pp0_iter3_reg;
reg   [0:0] select_ln49_4_reg_716_pp0_iter4_reg;
reg   [0:0] select_ln49_4_reg_716_pp0_iter5_reg;
wire   [0:0] or_ln50_fu_318_p2;
reg   [0:0] or_ln50_reg_723_pp0_iter2_reg;
reg   [0:0] or_ln50_reg_723_pp0_iter3_reg;
reg   [0:0] or_ln50_reg_723_pp0_iter4_reg;
reg   [0:0] or_ln50_reg_723_pp0_iter5_reg;
wire   [31:0] select_ln50_fu_330_p3;
reg   [31:0] select_ln50_reg_727;
reg   [31:0] select_ln50_reg_727_pp0_iter2_reg;
reg   [31:0] select_ln50_reg_727_pp0_iter3_reg;
reg   [31:0] select_ln50_reg_727_pp0_iter4_reg;
reg   [31:0] select_ln50_reg_727_pp0_iter5_reg;
reg  signed [31:0] cy_reg_733;
wire  signed [31:0] add_ln49_fu_377_p2;
reg  signed [31:0] add_ln49_reg_743;
wire   [31:0] select_ln49_1_fu_390_p3;
reg   [31:0] select_ln49_1_reg_748;
wire  signed [31:0] add_ln50_fu_404_p2;
reg  signed [31:0] add_ln50_reg_753;
wire   [11:0] select_ln50_1_fu_414_p3;
reg   [11:0] select_ln50_1_reg_758;
reg   [31:0] empty_68_reg_763;
reg   [31:0] empty_68_reg_763_pp0_iter4_reg;
wire   [11:0] empty_76_fu_486_p2;
reg   [11:0] empty_76_reg_769;
reg   [11:0] empty_76_reg_769_pp0_iter4_reg;
reg   [11:0] empty_76_reg_769_pp0_iter5_reg;
reg   [11:0] empty_76_reg_769_pp0_iter6_reg;
reg   [11:0] empty_76_reg_769_pp0_iter7_reg;
reg   [11:0] empty_76_reg_769_pp0_iter8_reg;
reg   [11:0] empty_76_reg_769_pp0_iter9_reg;
reg   [11:0] empty_76_reg_769_pp0_iter10_reg;
reg   [11:0] empty_76_reg_769_pp0_iter11_reg;
reg   [11:0] empty_76_reg_769_pp0_iter12_reg;
reg   [11:0] empty_76_reg_769_pp0_iter13_reg;
reg   [11:0] empty_76_reg_769_pp0_iter14_reg;
reg   [31:0] empty_69_reg_774;
reg   [31:0] p_mid126_reg_779;
reg   [31:0] p_mid1_reg_785;
wire   [33:0] empty_70_fu_510_p2;
reg   [33:0] empty_70_reg_790;
wire   [32:0] p_mid138_fu_528_p2;
reg   [32:0] p_mid138_reg_795;
wire   [33:0] p_mid111_fu_545_p2;
reg   [33:0] p_mid111_reg_800;
reg   [61:0] sext_ln51_mid2_v_reg_805;
wire   [1:0] trunc_ln53_fu_593_p1;
reg   [1:0] trunc_ln53_reg_810;
reg   [1:0] trunc_ln53_reg_810_pp0_iter7_reg;
reg   [1:0] trunc_ln53_reg_810_pp0_iter8_reg;
reg   [1:0] trunc_ln53_reg_810_pp0_iter9_reg;
reg   [1:0] trunc_ln53_reg_810_pp0_iter10_reg;
reg   [1:0] trunc_ln53_reg_810_pp0_iter11_reg;
reg   [1:0] trunc_ln53_reg_810_pp0_iter12_reg;
reg   [1:0] trunc_ln53_reg_810_pp0_iter13_reg;
reg   [1:0] trunc_ln53_reg_810_pp0_iter14_reg;
reg   [31:0] gmem_addr_1_read_reg_824;
reg    ap_condition_exit_pp0_iter5_stage0;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_230_p4;
wire    ap_loop_init;
wire   [63:0] p_cast7_fu_612_p1;
wire  signed [63:0] sext_ln50_fu_596_p1;
reg   [31:0] cx_fu_102;
wire   [31:0] add_ln51_fu_428_p2;
reg   [31:0] ap_sig_allocacmp_cx_load;
reg   [31:0] cy_1_fu_106;
wire   [31:0] select_ln50_3_fu_421_p3;
reg   [63:0] indvar_flatten_fu_110;
wire   [63:0] select_ln50_4_fu_344_p3;
reg   [31:0] iChannel_fu_114;
reg   [95:0] indvar_flatten56_fu_118;
wire   [95:0] add_ln49_1_fu_286_p2;
wire  signed [31:0] icmp_ln51_fu_306_p1;
wire   [0:0] icmp_ln51_fu_306_p2;
wire   [0:0] or_ln49_fu_300_p2;
wire   [0:0] or_ln50_1_fu_324_p2;
wire   [63:0] add_ln50_2_fu_338_p2;
wire  signed [31:0] trunc_ln50_fu_373_p0;
wire  signed [31:0] add_ln49_fu_377_p0;
wire  signed [31:0] select_ln49_fu_383_p2;
wire  signed [31:0] select_ln49_1_fu_390_p2;
wire   [11:0] trunc_ln50_fu_373_p1;
wire   [31:0] select_ln49_fu_383_p3;
wire   [11:0] trunc_ln50_1_fu_410_p1;
wire   [11:0] select_ln49_3_fu_397_p3;
wire   [32:0] select_ln49_1_cast_fu_452_p1;
wire   [32:0] empty_72_fu_455_p2;
wire   [9:0] empty_74_fu_464_p1;
wire   [11:0] p_shl_fu_468_p3;
wire   [11:0] empty_73_fu_460_p1;
wire   [11:0] empty_75_fu_476_p2;
wire   [32:0] p_cast_fu_498_p1;
wire   [32:0] tmp_fu_501_p2;
wire   [33:0] tmp_cast_fu_506_p1;
wire   [33:0] zext_ln50_fu_495_p1;
wire   [31:0] select_ln49_2_fu_519_p3;
wire   [32:0] zext_ln49_1_fu_516_p1;
wire   [32:0] p_cast_mid1_fu_533_p1;
wire   [32:0] tmp_mid1_fu_536_p2;
wire   [33:0] tmp_cast_mid1_fu_541_p1;
wire   [33:0] zext_ln49_2_fu_524_p1;
wire   [33:0] p_mid138_cast_fu_551_p1;
wire   [33:0] select_ln49_5_fu_554_p3;
wire   [33:0] select_ln50_2_fu_560_p3;
wire   [35:0] sext_ln51_mid2_v_v_v_v_v_fu_566_p3;
wire   [63:0] zext_ln50_1_fu_574_p1;
wire   [63:0] add_ln50_1_fu_578_p2;
reg    grp_fu_368_ce;
reg    grp_fu_448_ce;
reg    grp_fu_482_ce;
reg    grp_fu_491_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Conv2D_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter14_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter5_stage0)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cx_fu_102 <= 32'd0;
        end else if (((icmp_ln49_reg_703 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            cx_fu_102 <= add_ln51_fu_428_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cy_1_fu_106 <= 32'd0;
        end else if (((icmp_ln49_reg_703 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            cy_1_fu_106 <= select_ln50_3_fu_421_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_703 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_226 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_226 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iChannel_fu_114 <= 32'd0;
        end else if (((icmp_ln49_reg_703 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            iChannel_fu_114 <= select_ln49_1_fu_390_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten56_fu_118 <= 96'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln49_fu_281_p2 == 1'd0))) begin
            indvar_flatten56_fu_118 <= add_ln49_1_fu_286_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_110 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln49_fu_281_p2 == 1'd0))) begin
            indvar_flatten_fu_110 <= select_ln50_4_fu_344_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_703 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln49_reg_743 <= add_ln49_fu_377_p2;
        add_ln50_reg_753 <= add_ln50_fu_404_p2;
        select_ln49_1_reg_748 <= select_ln49_1_fu_390_p3;
        select_ln50_1_reg_758 <= select_ln50_1_fu_414_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        cy_reg_733 <= cy_1_fu_106;
        empty_68_reg_763 <= grp_fu_484_p_dout0;
        empty_68_reg_763_pp0_iter4_reg <= empty_68_reg_763;
        empty_76_reg_769_pp0_iter10_reg <= empty_76_reg_769_pp0_iter9_reg;
        empty_76_reg_769_pp0_iter11_reg <= empty_76_reg_769_pp0_iter10_reg;
        empty_76_reg_769_pp0_iter12_reg <= empty_76_reg_769_pp0_iter11_reg;
        empty_76_reg_769_pp0_iter13_reg <= empty_76_reg_769_pp0_iter12_reg;
        empty_76_reg_769_pp0_iter14_reg <= empty_76_reg_769_pp0_iter13_reg;
        empty_76_reg_769_pp0_iter4_reg <= empty_76_reg_769;
        empty_76_reg_769_pp0_iter5_reg <= empty_76_reg_769_pp0_iter4_reg;
        empty_76_reg_769_pp0_iter6_reg <= empty_76_reg_769_pp0_iter5_reg;
        empty_76_reg_769_pp0_iter7_reg <= empty_76_reg_769_pp0_iter6_reg;
        empty_76_reg_769_pp0_iter8_reg <= empty_76_reg_769_pp0_iter7_reg;
        empty_76_reg_769_pp0_iter9_reg <= empty_76_reg_769_pp0_iter8_reg;
        gmem_addr_1_read_reg_824 <= m_axi_gmem_RDATA;
        icmp_ln49_reg_703_pp0_iter2_reg <= icmp_ln49_reg_703;
        icmp_ln49_reg_703_pp0_iter3_reg <= icmp_ln49_reg_703_pp0_iter2_reg;
        icmp_ln49_reg_703_pp0_iter4_reg <= icmp_ln49_reg_703_pp0_iter3_reg;
        icmp_ln50_reg_707_pp0_iter2_reg <= icmp_ln50_reg_707;
        icmp_ln50_reg_707_pp0_iter3_reg <= icmp_ln50_reg_707_pp0_iter2_reg;
        icmp_ln50_reg_707_pp0_iter4_reg <= icmp_ln50_reg_707_pp0_iter3_reg;
        icmp_ln50_reg_707_pp0_iter5_reg <= icmp_ln50_reg_707_pp0_iter4_reg;
        or_ln50_reg_723_pp0_iter2_reg <= or_ln50_reg_723;
        or_ln50_reg_723_pp0_iter3_reg <= or_ln50_reg_723_pp0_iter2_reg;
        or_ln50_reg_723_pp0_iter4_reg <= or_ln50_reg_723_pp0_iter3_reg;
        or_ln50_reg_723_pp0_iter5_reg <= or_ln50_reg_723_pp0_iter4_reg;
        or_ln50_reg_723_pp0_iter6_reg <= or_ln50_reg_723_pp0_iter5_reg;
        select_ln49_4_reg_716_pp0_iter2_reg <= select_ln49_4_reg_716;
        select_ln49_4_reg_716_pp0_iter3_reg <= select_ln49_4_reg_716_pp0_iter2_reg;
        select_ln49_4_reg_716_pp0_iter4_reg <= select_ln49_4_reg_716_pp0_iter3_reg;
        select_ln49_4_reg_716_pp0_iter5_reg <= select_ln49_4_reg_716_pp0_iter4_reg;
        select_ln50_reg_727_pp0_iter2_reg <= select_ln50_reg_727;
        select_ln50_reg_727_pp0_iter3_reg <= select_ln50_reg_727_pp0_iter2_reg;
        select_ln50_reg_727_pp0_iter4_reg <= select_ln50_reg_727_pp0_iter3_reg;
        select_ln50_reg_727_pp0_iter5_reg <= select_ln50_reg_727_pp0_iter4_reg;
        sext_ln51_mid2_v_reg_805 <= {{add_ln50_1_fu_578_p2[63:2]}};
        trunc_ln53_reg_810 <= trunc_ln53_fu_593_p1;
        trunc_ln53_reg_810_pp0_iter10_reg <= trunc_ln53_reg_810_pp0_iter9_reg;
        trunc_ln53_reg_810_pp0_iter11_reg <= trunc_ln53_reg_810_pp0_iter10_reg;
        trunc_ln53_reg_810_pp0_iter12_reg <= trunc_ln53_reg_810_pp0_iter11_reg;
        trunc_ln53_reg_810_pp0_iter13_reg <= trunc_ln53_reg_810_pp0_iter12_reg;
        trunc_ln53_reg_810_pp0_iter14_reg <= trunc_ln53_reg_810_pp0_iter13_reg;
        trunc_ln53_reg_810_pp0_iter7_reg <= trunc_ln53_reg_810;
        trunc_ln53_reg_810_pp0_iter8_reg <= trunc_ln53_reg_810_pp0_iter7_reg;
        trunc_ln53_reg_810_pp0_iter9_reg <= trunc_ln53_reg_810_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln49_reg_703 <= icmp_ln49_fu_281_p2;
        p_cast1_reg_698[10 : 0] <= p_cast1_fu_246_p1[10 : 0];
        tmp_cast_mid136_cast_reg_693[31 : 0] <= tmp_cast_mid136_cast_fu_242_p1[31 : 0];
        zext_ln49_cast_reg_687[31 : 0] <= zext_ln49_cast_fu_238_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln49_4_reg_716_pp0_iter3_reg == 1'd0) & (icmp_ln50_reg_707_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_69_reg_774 <= grp_fu_512_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln49_4_reg_716_pp0_iter4_reg == 1'd0) & (icmp_ln50_reg_707_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_70_reg_790 <= empty_70_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_703_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_76_reg_769 <= empty_76_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_fu_281_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln50_reg_707 <= icmp_ln50_fu_295_p2;
        or_ln50_reg_723 <= or_ln50_fu_318_p2;
        select_ln49_4_reg_716 <= select_ln49_4_fu_311_p3;
        select_ln50_reg_727 <= select_ln50_fu_330_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln49_4_reg_716_pp0_iter4_reg == 1'd1) & (icmp_ln49_reg_703_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_mid111_reg_800 <= p_mid111_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_703_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_mid126_reg_779 <= grp_fu_1158_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln49_4_reg_716_pp0_iter4_reg == 1'd0) & (icmp_ln50_reg_707_pp0_iter4_reg == 1'd1) & (icmp_ln49_reg_703_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_mid138_reg_795 <= p_mid138_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln49_4_reg_716_pp0_iter3_reg == 1'd1) & (icmp_ln49_reg_703_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_mid1_reg_785 <= grp_fu_1162_p_dout0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln49_reg_703_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter14_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_703 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_0_phi_fu_230_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_230_p4 = first_iter_0_reg_226;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_703 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_cx_load = add_ln51_fu_428_p2;
    end else begin
        ap_sig_allocacmp_cx_load = cx_fu_102;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_1_ce0 = 1'b1;
    end else begin
        coeff_cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (trunc_ln53_reg_810_pp0_iter14_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_1_we0 = 1'b1;
    end else begin
        coeff_cache_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_2_ce0 = 1'b1;
    end else begin
        coeff_cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln53_reg_810_pp0_iter14_reg == 2'd0) & ~(trunc_ln53_reg_810_pp0_iter14_reg == 2'd1) & (ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_2_we0 = 1'b1;
    end else begin
        coeff_cache_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_ce0 = 1'b1;
    end else begin
        coeff_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (trunc_ln53_reg_810_pp0_iter14_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_we0 = 1'b1;
    end else begin
        coeff_cache_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln50_reg_723_pp0_iter6_reg == 1'd1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_368_ce = 1'b1;
    end else begin
        grp_fu_368_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_448_ce = 1'b1;
    end else begin
        grp_fu_448_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_482_ce = 1'b1;
    end else begin
        grp_fu_482_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_491_ce = 1'b1;
    end else begin
        grp_fu_491_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln50_reg_723_pp0_iter6_reg == 1'd1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_1_fu_286_p2 = (indvar_flatten56_fu_118 + 96'd1);

assign add_ln49_fu_377_p0 = iChannel_fu_114;

assign add_ln49_fu_377_p2 = ($signed(add_ln49_fu_377_p0) + $signed(32'd1));

assign add_ln50_1_fu_578_p2 = (zext_ln50_1_fu_574_p1 + coeffs);

assign add_ln50_2_fu_338_p2 = (indvar_flatten_fu_110 + 64'd1);

assign add_ln50_fu_404_p2 = (select_ln49_fu_383_p3 + 32'd1);

assign add_ln51_fu_428_p2 = (select_ln50_reg_727 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter14 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter14 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage0_iter14 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((or_ln50_reg_723_pp0_iter6_reg == 1'd1) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign coeff_cache_1_address0 = p_cast7_fu_612_p1;

assign coeff_cache_1_d0 = gmem_addr_1_read_reg_824;

assign coeff_cache_2_address0 = p_cast7_fu_612_p1;

assign coeff_cache_2_d0 = gmem_addr_1_read_reg_824;

assign coeff_cache_address0 = p_cast7_fu_612_p1;

assign coeff_cache_d0 = gmem_addr_1_read_reg_824;

assign empty_70_fu_510_p2 = (tmp_cast_fu_506_p1 + zext_ln50_fu_495_p1);

assign empty_72_fu_455_p2 = (p_cast1_reg_698 + select_ln49_1_cast_fu_452_p1);

assign empty_73_fu_460_p1 = empty_72_fu_455_p2[11:0];

assign empty_74_fu_464_p1 = empty_72_fu_455_p2[9:0];

assign empty_75_fu_476_p2 = (p_shl_fu_468_p3 - empty_73_fu_460_p1);

assign empty_76_fu_486_p2 = (empty_75_fu_476_p2 + select_ln50_1_reg_758);

assign grp_fu_1158_p_ce = grp_fu_482_ce;

assign grp_fu_1158_p_din0 = add_ln49_reg_743;

assign grp_fu_1158_p_din1 = mul_ln40;

assign grp_fu_1162_p_ce = grp_fu_491_ce;

assign grp_fu_1162_p_din0 = add_ln50_reg_753;

assign grp_fu_1162_p_din1 = convWidth;

assign grp_fu_484_p_ce = grp_fu_368_ce;

assign grp_fu_484_p_din0 = iChannel_fu_114;

assign grp_fu_484_p_din1 = mul_ln40;

assign grp_fu_512_p_ce = grp_fu_448_ce;

assign grp_fu_512_p_din0 = cy_reg_733;

assign grp_fu_512_p_din1 = convWidth;

assign icmp_ln49_fu_281_p2 = ((indvar_flatten56_fu_118 == mul_ln19_1) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_295_p2 = ((indvar_flatten_fu_110 == mul_ln19) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_306_p1 = convWidth;

assign icmp_ln51_fu_306_p2 = ((ap_sig_allocacmp_cx_load == icmp_ln51_fu_306_p1) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = sext_ln50_fu_596_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = convWidth;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln49_fu_300_p2 = (icmp_ln50_fu_295_p2 | ap_phi_mux_first_iter_0_phi_fu_230_p4);

assign or_ln50_1_fu_324_p2 = (select_ln49_4_fu_311_p3 | icmp_ln50_fu_295_p2);

assign or_ln50_fu_318_p2 = (select_ln49_4_fu_311_p3 | or_ln49_fu_300_p2);

assign p_cast1_fu_246_p1 = empty;

assign p_cast7_fu_612_p1 = empty_76_reg_769_pp0_iter14_reg;

assign p_cast_fu_498_p1 = empty_69_reg_774;

assign p_cast_mid1_fu_533_p1 = p_mid1_reg_785;

assign p_mid111_fu_545_p2 = (tmp_cast_mid1_fu_541_p1 + zext_ln49_2_fu_524_p1);

assign p_mid138_cast_fu_551_p1 = p_mid138_reg_795;

assign p_mid138_fu_528_p2 = (tmp_cast_mid136_cast_reg_693 + zext_ln49_1_fu_516_p1);

assign p_shl_fu_468_p3 = {{empty_74_fu_464_p1}, {2'd0}};

assign select_ln49_1_cast_fu_452_p1 = select_ln49_1_reg_748;

assign select_ln49_1_fu_390_p2 = iChannel_fu_114;

assign select_ln49_1_fu_390_p3 = ((icmp_ln50_reg_707[0:0] == 1'b1) ? add_ln49_fu_377_p2 : select_ln49_1_fu_390_p2);

assign select_ln49_2_fu_519_p3 = ((icmp_ln50_reg_707_pp0_iter4_reg[0:0] == 1'b1) ? p_mid126_reg_779 : empty_68_reg_763_pp0_iter4_reg);

assign select_ln49_3_fu_397_p3 = ((icmp_ln50_reg_707[0:0] == 1'b1) ? 12'd0 : trunc_ln50_fu_373_p1);

assign select_ln49_4_fu_311_p3 = ((icmp_ln50_fu_295_p2[0:0] == 1'b1) ? icmp_ln51_1 : icmp_ln51_fu_306_p2);

assign select_ln49_5_fu_554_p3 = ((icmp_ln50_reg_707_pp0_iter5_reg[0:0] == 1'b1) ? p_mid138_cast_fu_551_p1 : empty_70_reg_790);

assign select_ln49_fu_383_p2 = cy_1_fu_106;

assign select_ln49_fu_383_p3 = ((icmp_ln50_reg_707[0:0] == 1'b1) ? 32'd0 : select_ln49_fu_383_p2);

assign select_ln50_1_fu_414_p3 = ((select_ln49_4_reg_716[0:0] == 1'b1) ? trunc_ln50_1_fu_410_p1 : select_ln49_3_fu_397_p3);

assign select_ln50_2_fu_560_p3 = ((select_ln49_4_reg_716_pp0_iter5_reg[0:0] == 1'b1) ? p_mid111_reg_800 : select_ln49_5_fu_554_p3);

assign select_ln50_3_fu_421_p3 = ((select_ln49_4_reg_716[0:0] == 1'b1) ? add_ln50_fu_404_p2 : select_ln49_fu_383_p3);

assign select_ln50_4_fu_344_p3 = ((icmp_ln50_fu_295_p2[0:0] == 1'b1) ? 64'd1 : add_ln50_2_fu_338_p2);

assign select_ln50_fu_330_p3 = ((or_ln50_1_fu_324_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_cx_load);

assign sext_ln50_fu_596_p1 = $signed(sext_ln51_mid2_v_reg_805);

assign sext_ln51_mid2_v_v_v_v_v_fu_566_p3 = {{select_ln50_2_fu_560_p3}, {2'd0}};

assign tmp_cast_fu_506_p1 = tmp_fu_501_p2;

assign tmp_cast_mid136_cast_fu_242_p1 = tmp_cast_mid136;

assign tmp_cast_mid1_fu_541_p1 = tmp_mid1_fu_536_p2;

assign tmp_fu_501_p2 = (zext_ln49_cast_reg_687 + p_cast_fu_498_p1);

assign tmp_mid1_fu_536_p2 = (zext_ln49_cast_reg_687 + p_cast_mid1_fu_533_p1);

assign trunc_ln50_1_fu_410_p1 = add_ln50_fu_404_p2[11:0];

assign trunc_ln50_fu_373_p0 = cy_1_fu_106;

assign trunc_ln50_fu_373_p1 = trunc_ln50_fu_373_p0[11:0];

assign trunc_ln53_fu_593_p1 = select_ln50_reg_727_pp0_iter5_reg[1:0];

assign zext_ln49_1_fu_516_p1 = p_mid126_reg_779;

assign zext_ln49_2_fu_524_p1 = select_ln49_2_fu_519_p3;

assign zext_ln49_cast_fu_238_p1 = zext_ln49;

assign zext_ln50_1_fu_574_p1 = sext_ln51_mid2_v_v_v_v_v_fu_566_p3;

assign zext_ln50_fu_495_p1 = empty_68_reg_763_pp0_iter4_reg;

always @ (posedge ap_clk) begin
    zext_ln49_cast_reg_687[32] <= 1'b0;
    tmp_cast_mid136_cast_reg_693[32] <= 1'b0;
    p_cast1_reg_698[32:11] <= 22'b0000000000000000000000;
end

endmodule //Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_51_5
