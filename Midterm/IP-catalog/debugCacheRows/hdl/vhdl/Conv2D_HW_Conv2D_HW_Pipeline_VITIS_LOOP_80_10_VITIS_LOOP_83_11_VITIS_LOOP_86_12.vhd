-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_80_10_VITIS_LOOP_83_11_VITIS_LOOP_86_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul_ln17_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    mul_ln17 : IN STD_LOGIC_VECTOR (63 downto 0);
    convWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln1027_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    coeff_cache_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    coeff_cache_ce0 : OUT STD_LOGIC;
    coeff_cache_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    coeff_cache_1_ce0 : OUT STD_LOGIC;
    coeff_cache_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    coeff_cache_2_ce0 : OUT STD_LOGIC;
    coeff_cache_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lhs_V : IN STD_LOGIC_VECTOR (14 downto 0);
    row_buffer_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    row_buffer_ce0 : OUT STD_LOGIC;
    row_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    row_buffer_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    row_buffer_1_ce0 : OUT STD_LOGIC;
    row_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    row_buffer_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    row_buffer_2_ce0 : OUT STD_LOGIC;
    row_buffer_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_80_10_VITIS_LOOP_83_11_VITIS_LOOP_86_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1027_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_668_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_668_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_668_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_668_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_2_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_2_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_2_reg_672_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_fu_325_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_50_reg_682 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_52_fu_363_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_52_reg_687 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1027_1_fu_376_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1027_1_reg_692 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1027_4_fu_414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1027_4_reg_697 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_443_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_57_reg_702 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln1027_7_fu_453_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1027_7_reg_707 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1027_7_reg_707_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln88_fu_469_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln88_reg_712 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln88_reg_712_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal rhs_V_fu_473_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_reg_717 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln840_2_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln840_2_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_fu_539_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelValue_fu_550_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelValue_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal select_ln1027_22_cast_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln91_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal cx_V_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_cx_V_load : STD_LOGIC_VECTOR (31 downto 0);
    signal cy_V_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_8_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten101_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1027_9_fu_275_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal iChannel_V_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_1_fu_369_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten131_fu_98 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln1027_fu_255_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln1027_1_fu_269_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1027_fu_299_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_307_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_303_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_48_fu_315_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_49_fu_321_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln840_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln80_fu_340_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_355_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_51_fu_351_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_384_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_53_fu_380_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_55_fu_398_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1027_3_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1027_fu_344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1027_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln840_1_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_54_fu_392_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_56_fu_439_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_58_fu_449_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1027_3_fu_402_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1027_5_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_2_fu_500_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln1027_6_fu_505_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_493_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_518_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln91_fu_523_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_567_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Conv2D_HW_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2D_HW_mul_32s_32s_52_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component Conv2D_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_32_1_1_U31 : component Conv2D_HW_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => coeff_cache_q0,
        din1 => coeff_cache_1_q0,
        din2 => coeff_cache_2_q0,
        din3 => trunc_ln88_reg_712_pp0_iter3_reg,
        dout => filterValue_fu_539_p5);

    mux_32_32_1_1_U32 : component Conv2D_HW_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => row_buffer_q0,
        din1 => row_buffer_1_q0,
        din2 => row_buffer_2_q0,
        din3 => select_ln1027_7_reg_707_pp0_iter3_reg,
        dout => pixelValue_fu_550_p5);

    mul_32s_32s_52_2_1_U33 : component Conv2D_HW_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pixelValue_reg_762,
        din1 => filterValue_reg_757,
        ce => ap_const_logic_1,
        dout => grp_fu_567_p2);

    flow_control_loop_pipe_sequential_init_U : component Conv2D_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    acc_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    acc_fu_78 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    acc_fu_78 <= acc_1_fu_586_p2;
                end if;
            end if; 
        end if;
    end process;

    cx_V_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cx_V_fu_82 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    cx_V_fu_82 <= add_ln840_2_reg_722;
                end if;
            end if; 
        end if;
    end process;

    cy_V_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cy_V_fu_86 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_668 = ap_const_lv1_0))) then 
                    cy_V_fu_86 <= select_ln1027_8_fu_461_p3;
                end if;
            end if; 
        end if;
    end process;

    iChannel_V_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iChannel_V_fu_94 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_668 = ap_const_lv1_0))) then 
                    iChannel_V_fu_94 <= select_ln1027_1_fu_369_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten101_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten101_fu_90 <= ap_const_lv64_0;
                elsif (((icmp_ln1027_fu_250_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten101_fu_90 <= select_ln1027_9_fu_275_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten131_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten131_fu_98 <= ap_const_lv96_0;
                elsif (((icmp_ln1027_fu_250_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten131_fu_98 <= add_ln1027_fu_255_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_668 = ap_const_lv1_0))) then
                add_ln840_2_reg_722 <= add_ln840_2_fu_477_p2;
                empty_57_reg_702 <= empty_57_fu_443_p2;
                rhs_V_reg_717 <= rhs_V_fu_473_p1;
                select_ln1027_4_reg_697 <= select_ln1027_4_fu_414_p3;
                select_ln1027_7_reg_707 <= select_ln1027_7_fu_453_p3;
                trunc_ln1027_1_reg_692 <= trunc_ln1027_1_fu_376_p1;
                trunc_ln88_reg_712 <= trunc_ln88_fu_469_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln1027_reg_668 <= icmp_ln1027_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                filterValue_reg_757 <= filterValue_fu_539_p5;
                icmp_ln1027_2_reg_672_pp0_iter2_reg <= icmp_ln1027_2_reg_672;
                icmp_ln1027_reg_668_pp0_iter2_reg <= icmp_ln1027_reg_668;
                icmp_ln1027_reg_668_pp0_iter3_reg <= icmp_ln1027_reg_668_pp0_iter2_reg;
                icmp_ln1027_reg_668_pp0_iter4_reg <= icmp_ln1027_reg_668_pp0_iter3_reg;
                icmp_ln1027_reg_668_pp0_iter5_reg <= icmp_ln1027_reg_668_pp0_iter4_reg;
                pixelValue_reg_762 <= pixelValue_fu_550_p5;
                select_ln1027_7_reg_707_pp0_iter3_reg <= select_ln1027_7_reg_707;
                trunc_ln4_reg_777 <= grp_fu_567_p2(51 downto 20);
                trunc_ln88_reg_712_pp0_iter3_reg <= trunc_ln88_reg_712;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_2_reg_672 = ap_const_lv1_0))) then
                empty_50_reg_682 <= empty_50_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_2_reg_672 = ap_const_lv1_1) and (icmp_ln1027_reg_668 = ap_const_lv1_0))) then
                empty_52_reg_687 <= empty_52_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_fu_250_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1027_2_reg_672 <= icmp_ln1027_2_fu_264_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_1_fu_586_p2 <= std_logic_vector(unsigned(trunc_ln4_reg_777) + unsigned(acc_fu_78));
    acc_2_out <= acc_fu_78;

    acc_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_668_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_reg_668_pp0_iter5_reg = ap_const_lv1_1))) then 
            acc_2_out_ap_vld <= ap_const_logic_1;
        else 
            acc_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1027_1_fu_269_p2 <= std_logic_vector(unsigned(indvar_flatten101_fu_90) + unsigned(ap_const_lv64_1));
    add_ln1027_fu_255_p2 <= std_logic_vector(unsigned(indvar_flatten131_fu_98) + unsigned(ap_const_lv96_1));
    add_ln840_1_fu_420_p2 <= std_logic_vector(unsigned(select_ln1027_fu_344_p3) + unsigned(ap_const_lv32_1));
    add_ln840_2_fu_477_p2 <= std_logic_vector(unsigned(select_ln1027_5_fu_431_p3) + unsigned(ap_const_lv32_1));
    add_ln840_fu_334_p2 <= std_logic_vector(unsigned(iChannel_V_fu_94) + unsigned(ap_const_lv32_1));
    add_ln91_fu_523_p2 <= std_logic_vector(unsigned(ret_V_fu_518_p2) + unsigned(rhs_V_reg_717));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_250_p2)
    begin
        if (((icmp_ln1027_fu_250_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln1027_reg_668)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_668 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_cx_V_load_assign_proc : process(ap_enable_reg_pp0_iter3, add_ln840_2_reg_722, ap_block_pp0_stage0, cx_V_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_cx_V_load <= add_ln840_2_reg_722;
        else 
            ap_sig_allocacmp_cx_V_load <= cx_V_fu_82;
        end if; 
    end process;

    coeff_cache_1_address0 <= select_ln1027_22_cast_fu_511_p1(10 - 1 downto 0);

    coeff_cache_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_1_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_2_address0 <= select_ln1027_22_cast_fu_511_p1(10 - 1 downto 0);

    coeff_cache_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_2_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_address0 <= select_ln1027_22_cast_fu_511_p1(10 - 1 downto 0);

    coeff_cache_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_48_fu_315_p2 <= std_logic_vector(unsigned(tmp_3_fu_307_p3) - unsigned(empty_fu_303_p1));
    empty_49_fu_321_p1 <= cy_V_fu_86(10 - 1 downto 0);
    empty_50_fu_325_p2 <= std_logic_vector(unsigned(empty_48_fu_315_p2) + unsigned(empty_49_fu_321_p1));
    empty_51_fu_351_p1 <= add_ln840_fu_334_p2(10 - 1 downto 0);
    empty_52_fu_363_p2 <= std_logic_vector(unsigned(tmp_4_fu_355_p3) - unsigned(empty_51_fu_351_p1));
    empty_53_fu_380_p1 <= select_ln1027_1_fu_369_p3(10 - 1 downto 0);
    empty_54_fu_392_p2 <= std_logic_vector(unsigned(tmp_5_fu_384_p3) - unsigned(empty_53_fu_380_p1));
    empty_55_fu_398_p1 <= cy_V_fu_86(2 - 1 downto 0);
    empty_56_fu_439_p1 <= add_ln840_1_fu_420_p2(10 - 1 downto 0);
    empty_57_fu_443_p2 <= std_logic_vector(unsigned(empty_54_fu_392_p2) + unsigned(empty_56_fu_439_p1));
    empty_58_fu_449_p1 <= add_ln840_1_fu_420_p2(2 - 1 downto 0);
    empty_fu_303_p1 <= iChannel_V_fu_94(10 - 1 downto 0);
    icmp_ln1027_2_fu_264_p2 <= "1" when (indvar_flatten101_fu_90 = mul_ln17) else "0";
    icmp_ln1027_3_fu_409_p2 <= "1" when (ap_sig_allocacmp_cx_V_load = convWidth) else "0";
    icmp_ln1027_fu_250_p2 <= "1" when (indvar_flatten131_fu_98 = mul_ln17_1) else "0";
    or_ln1027_fu_426_p2 <= (select_ln1027_4_fu_414_p3 or icmp_ln1027_2_reg_672);
    ret_V_fu_518_p2 <= std_logic_vector(unsigned(tmp_6_fu_493_p3) + unsigned(lhs_V));
    rhs_V_fu_473_p1 <= select_ln1027_5_fu_431_p3(15 - 1 downto 0);
    row_buffer_1_address0 <= zext_ln91_fu_528_p1(15 - 1 downto 0);

    row_buffer_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            row_buffer_1_ce0 <= ap_const_logic_1;
        else 
            row_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_2_address0 <= zext_ln91_fu_528_p1(15 - 1 downto 0);

    row_buffer_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            row_buffer_2_ce0 <= ap_const_logic_1;
        else 
            row_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_address0 <= zext_ln91_fu_528_p1(15 - 1 downto 0);

    row_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            row_buffer_ce0 <= ap_const_logic_1;
        else 
            row_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1027_1_fu_369_p3 <= 
        add_ln840_fu_334_p2 when (icmp_ln1027_2_reg_672(0) = '1') else 
        iChannel_V_fu_94;
    select_ln1027_22_cast_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_6_fu_505_p3),64));
    select_ln1027_2_fu_500_p3 <= 
        empty_52_reg_687 when (icmp_ln1027_2_reg_672_pp0_iter2_reg(0) = '1') else 
        empty_50_reg_682;
    select_ln1027_3_fu_402_p3 <= 
        ap_const_lv2_0 when (icmp_ln1027_2_reg_672(0) = '1') else 
        empty_55_fu_398_p1;
    select_ln1027_4_fu_414_p3 <= 
        icmp_ln1027_1 when (icmp_ln1027_2_reg_672(0) = '1') else 
        icmp_ln1027_3_fu_409_p2;
    select_ln1027_5_fu_431_p3 <= 
        ap_const_lv32_0 when (or_ln1027_fu_426_p2(0) = '1') else 
        ap_sig_allocacmp_cx_V_load;
    select_ln1027_6_fu_505_p3 <= 
        empty_57_reg_702 when (select_ln1027_4_reg_697(0) = '1') else 
        select_ln1027_2_fu_500_p3;
    select_ln1027_7_fu_453_p3 <= 
        empty_58_fu_449_p1 when (select_ln1027_4_fu_414_p3(0) = '1') else 
        select_ln1027_3_fu_402_p3;
    select_ln1027_8_fu_461_p3 <= 
        add_ln840_1_fu_420_p2 when (select_ln1027_4_fu_414_p3(0) = '1') else 
        select_ln1027_fu_344_p3;
    select_ln1027_9_fu_275_p3 <= 
        ap_const_lv64_1 when (icmp_ln1027_2_fu_264_p2(0) = '1') else 
        add_ln1027_1_fu_269_p2;
    select_ln1027_fu_344_p3 <= 
        ap_const_lv32_0 when (icmp_ln1027_2_reg_672(0) = '1') else 
        cy_V_fu_86;
    tmp_3_fu_307_p3 <= (trunc_ln1027_fu_299_p1 & ap_const_lv2_0);
    tmp_4_fu_355_p3 <= (trunc_ln80_fu_340_p1 & ap_const_lv2_0);
    tmp_5_fu_384_p3 <= (trunc_ln1027_1_fu_376_p1 & ap_const_lv2_0);
    tmp_6_fu_493_p3 <= (trunc_ln1027_1_reg_692 & ap_const_lv7_0);
    trunc_ln1027_1_fu_376_p1 <= select_ln1027_1_fu_369_p3(8 - 1 downto 0);
    trunc_ln1027_fu_299_p1 <= iChannel_V_fu_94(8 - 1 downto 0);
    trunc_ln80_fu_340_p1 <= add_ln840_fu_334_p2(8 - 1 downto 0);
    trunc_ln88_fu_469_p1 <= select_ln1027_5_fu_431_p3(2 - 1 downto 0);
    zext_ln91_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_fu_523_p2),64));
end behav;
