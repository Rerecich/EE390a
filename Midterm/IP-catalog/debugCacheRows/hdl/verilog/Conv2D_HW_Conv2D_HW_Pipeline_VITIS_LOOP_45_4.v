// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_45_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        mul_ln17_1,
        empty,
        mul_ln17,
        mul_ln38,
        mul_ln39_2,
        coeffs,
        convWidth,
        icmp_ln1027_1,
        coeff_cache_address0,
        coeff_cache_ce0,
        coeff_cache_we0,
        coeff_cache_d0,
        coeff_cache_1_address0,
        coeff_cache_1_ce0,
        coeff_cache_1_we0,
        coeff_cache_1_d0,
        coeff_cache_2_address0,
        coeff_cache_2_ce0,
        coeff_cache_2_we0,
        coeff_cache_2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [95:0] mul_ln17_1;
input  [31:0] empty;
input  [63:0] mul_ln17;
input  [61:0] mul_ln38;
input  [61:0] mul_ln39_2;
input  [63:0] coeffs;
input  [31:0] convWidth;
input  [0:0] icmp_ln1027_1;
output  [9:0] coeff_cache_address0;
output   coeff_cache_ce0;
output   coeff_cache_we0;
output  [31:0] coeff_cache_d0;
output  [9:0] coeff_cache_1_address0;
output   coeff_cache_1_ce0;
output   coeff_cache_1_we0;
output  [31:0] coeff_cache_1_d0;
output  [9:0] coeff_cache_2_address0;
output   coeff_cache_2_ce0;
output   coeff_cache_2_we0;
output  [31:0] coeff_cache_2_d0;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg coeff_cache_ce0;
reg coeff_cache_we0;
reg coeff_cache_1_ce0;
reg coeff_cache_1_we0;
reg coeff_cache_2_ce0;
reg coeff_cache_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg   [0:0] or_ln1027_2_reg_644;
reg   [0:0] or_ln1027_2_reg_644_pp0_iter7_reg;
reg   [0:0] and_ln1027_reg_654;
reg   [0:0] and_ln1027_reg_654_pp0_iter7_reg;
reg    ap_predicate_op101_readreq_state9;
reg    ap_block_state9_io;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
reg    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_272_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AR;
reg   [0:0] first_iter_0_reg_218;
reg   [0:0] first_iter_01_reg_229;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1027_reg_613;
reg   [0:0] icmp_ln1027_reg_613_pp0_iter2_reg;
reg   [0:0] icmp_ln1027_reg_613_pp0_iter3_reg;
reg   [0:0] icmp_ln1027_reg_613_pp0_iter4_reg;
reg   [0:0] icmp_ln1027_reg_613_pp0_iter5_reg;
reg   [0:0] icmp_ln1027_reg_613_pp0_iter6_reg;
wire   [0:0] icmp_ln1027_6_fu_295_p2;
reg   [0:0] icmp_ln1027_6_reg_617;
wire   [31:0] select_ln1027_1_fu_312_p3;
reg   [31:0] select_ln1027_1_reg_623;
wire   [7:0] trunc_ln1027_fu_320_p1;
reg   [7:0] trunc_ln1027_reg_628;
reg   [7:0] trunc_ln1027_reg_628_pp0_iter2_reg;
wire   [9:0] empty_64_fu_324_p1;
reg   [9:0] empty_64_reg_633;
reg   [9:0] empty_64_reg_633_pp0_iter2_reg;
wire   [0:0] select_ln1027_3_fu_333_p3;
reg   [0:0] select_ln1027_3_reg_638;
wire   [0:0] or_ln1027_2_fu_340_p2;
reg   [0:0] or_ln1027_2_reg_644_pp0_iter2_reg;
reg   [0:0] or_ln1027_2_reg_644_pp0_iter3_reg;
reg   [0:0] or_ln1027_2_reg_644_pp0_iter4_reg;
reg   [0:0] or_ln1027_2_reg_644_pp0_iter5_reg;
reg   [0:0] or_ln1027_2_reg_644_pp0_iter6_reg;
wire   [31:0] select_ln1027_4_fu_352_p3;
reg   [31:0] select_ln1027_4_reg_648;
wire   [0:0] and_ln1027_fu_366_p2;
reg   [0:0] and_ln1027_reg_654_pp0_iter2_reg;
reg   [0:0] and_ln1027_reg_654_pp0_iter3_reg;
reg   [0:0] and_ln1027_reg_654_pp0_iter4_reg;
reg   [0:0] and_ln1027_reg_654_pp0_iter5_reg;
reg   [0:0] and_ln1027_reg_654_pp0_iter6_reg;
wire   [9:0] select_ln1027_5_fu_440_p3;
reg   [9:0] select_ln1027_5_reg_664;
wire   [1:0] trunc_ln47_fu_454_p1;
reg   [1:0] trunc_ln47_reg_669;
reg   [1:0] trunc_ln47_reg_669_pp0_iter3_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter4_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter5_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter6_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter7_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter8_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter9_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter10_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter11_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter12_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter13_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter14_reg;
reg   [1:0] trunc_ln47_reg_669_pp0_iter15_reg;
wire   [9:0] empty_66_fu_484_p2;
reg   [9:0] empty_66_reg_673;
reg   [9:0] empty_66_reg_673_pp0_iter4_reg;
reg   [9:0] empty_66_reg_673_pp0_iter5_reg;
reg   [9:0] empty_66_reg_673_pp0_iter6_reg;
reg   [9:0] empty_66_reg_673_pp0_iter7_reg;
reg   [9:0] empty_66_reg_673_pp0_iter8_reg;
reg   [9:0] empty_66_reg_673_pp0_iter9_reg;
reg   [9:0] empty_66_reg_673_pp0_iter10_reg;
reg   [9:0] empty_66_reg_673_pp0_iter11_reg;
reg   [9:0] empty_66_reg_673_pp0_iter12_reg;
reg   [9:0] empty_66_reg_673_pp0_iter13_reg;
reg   [9:0] empty_66_reg_673_pp0_iter14_reg;
reg   [9:0] empty_66_reg_673_pp0_iter15_reg;
wire   [61:0] grp_fu_414_p2;
reg   [61:0] mul_ln1027_reg_678;
reg   [61:0] sext_ln44_mid2_v_reg_683;
reg   [31:0] gmem_addr_read_reg_698;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_222_p4;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_first_iter_01_phi_fu_233_p4;
wire   [63:0] p_cast_fu_532_p1;
wire  signed [63:0] sext_ln1027_fu_516_p1;
reg   [31:0] cx_V_fu_100;
wire   [31:0] add_ln840_4_fu_457_p2;
reg   [31:0] ap_sig_allocacmp_cx_V_load;
reg   [31:0] cy_V_fu_104;
wire   [31:0] select_ln1027_6_fu_447_p3;
reg   [63:0] indvar_flatten_fu_108;
wire   [63:0] select_ln1027_11_fu_378_p3;
reg   [31:0] iChannel_V_fu_112;
reg   [95:0] indvar_flatten30_fu_116;
wire   [95:0] add_ln1027_4_fu_277_p2;
wire   [31:0] add_ln840_1_fu_289_p2;
wire   [0:0] icmp_ln1027_7_fu_328_p2;
wire   [0:0] or_ln1027_1_fu_306_p2;
wire   [0:0] or_ln1027_3_fu_346_p2;
wire   [0:0] or_ln1027_fu_300_p2;
wire   [0:0] xor_ln1027_fu_360_p2;
wire   [63:0] add_ln1027_3_fu_372_p2;
wire   [31:0] grp_fu_414_p0;
wire   [9:0] trunc_ln1027_2_fu_419_p1;
wire   [31:0] select_ln1027_fu_404_p3;
wire   [31:0] add_ln840_2_fu_430_p2;
wire   [9:0] trunc_ln1027_3_fu_436_p1;
wire   [9:0] select_ln1027_2_fu_423_p3;
wire   [9:0] tmp_1_fu_472_p3;
wire   [9:0] empty_65_fu_479_p2;
wire   [61:0] add_ln1027_fu_489_p2;
wire   [63:0] sext_ln44_mid2_v_v_v_v_fu_493_p3;
wire   [63:0] add_ln1027_1_fu_501_p2;
reg    grp_fu_414_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [61:0] grp_fu_414_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Conv2D_HW_mul_32ns_62s_62_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 62 ),
    .dout_WIDTH( 62 ))
mul_32ns_62s_62_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_414_p0),
    .din1(mul_ln38),
    .ce(grp_fu_414_ce),
    .dout(grp_fu_414_p2)
);

Conv2D_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cx_V_fu_100 <= 32'd0;
        end else if (((icmp_ln1027_reg_613 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            cx_V_fu_100 <= add_ln840_4_fu_457_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cy_V_fu_104 <= 32'd0;
        end else if (((icmp_ln1027_reg_613 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            cy_V_fu_104 <= select_ln1027_6_fu_447_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_613 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_01_reg_229 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_01_reg_229 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_613 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_218 <= and_ln1027_reg_654;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_218 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            iChannel_V_fu_112 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1027_fu_272_p2 == 1'd0))) begin
            iChannel_V_fu_112 <= select_ln1027_1_fu_312_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten30_fu_116 <= 96'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1027_fu_272_p2 == 1'd0))) begin
            indvar_flatten30_fu_116 <= add_ln1027_4_fu_277_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_108 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1027_fu_272_p2 == 1'd0))) begin
            indvar_flatten_fu_108 <= select_ln1027_11_fu_378_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_fu_272_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln1027_reg_654 <= and_ln1027_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln1027_reg_654_pp0_iter2_reg <= and_ln1027_reg_654;
        and_ln1027_reg_654_pp0_iter3_reg <= and_ln1027_reg_654_pp0_iter2_reg;
        and_ln1027_reg_654_pp0_iter4_reg <= and_ln1027_reg_654_pp0_iter3_reg;
        and_ln1027_reg_654_pp0_iter5_reg <= and_ln1027_reg_654_pp0_iter4_reg;
        and_ln1027_reg_654_pp0_iter6_reg <= and_ln1027_reg_654_pp0_iter5_reg;
        and_ln1027_reg_654_pp0_iter7_reg <= and_ln1027_reg_654_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        empty_64_reg_633_pp0_iter2_reg <= empty_64_reg_633;
        empty_66_reg_673_pp0_iter10_reg <= empty_66_reg_673_pp0_iter9_reg;
        empty_66_reg_673_pp0_iter11_reg <= empty_66_reg_673_pp0_iter10_reg;
        empty_66_reg_673_pp0_iter12_reg <= empty_66_reg_673_pp0_iter11_reg;
        empty_66_reg_673_pp0_iter13_reg <= empty_66_reg_673_pp0_iter12_reg;
        empty_66_reg_673_pp0_iter14_reg <= empty_66_reg_673_pp0_iter13_reg;
        empty_66_reg_673_pp0_iter15_reg <= empty_66_reg_673_pp0_iter14_reg;
        empty_66_reg_673_pp0_iter4_reg <= empty_66_reg_673;
        empty_66_reg_673_pp0_iter5_reg <= empty_66_reg_673_pp0_iter4_reg;
        empty_66_reg_673_pp0_iter6_reg <= empty_66_reg_673_pp0_iter5_reg;
        empty_66_reg_673_pp0_iter7_reg <= empty_66_reg_673_pp0_iter6_reg;
        empty_66_reg_673_pp0_iter8_reg <= empty_66_reg_673_pp0_iter7_reg;
        empty_66_reg_673_pp0_iter9_reg <= empty_66_reg_673_pp0_iter8_reg;
        gmem_addr_read_reg_698 <= m_axi_gmem_RDATA;
        icmp_ln1027_reg_613_pp0_iter2_reg <= icmp_ln1027_reg_613;
        icmp_ln1027_reg_613_pp0_iter3_reg <= icmp_ln1027_reg_613_pp0_iter2_reg;
        icmp_ln1027_reg_613_pp0_iter4_reg <= icmp_ln1027_reg_613_pp0_iter3_reg;
        icmp_ln1027_reg_613_pp0_iter5_reg <= icmp_ln1027_reg_613_pp0_iter4_reg;
        icmp_ln1027_reg_613_pp0_iter6_reg <= icmp_ln1027_reg_613_pp0_iter5_reg;
        or_ln1027_2_reg_644_pp0_iter2_reg <= or_ln1027_2_reg_644;
        or_ln1027_2_reg_644_pp0_iter3_reg <= or_ln1027_2_reg_644_pp0_iter2_reg;
        or_ln1027_2_reg_644_pp0_iter4_reg <= or_ln1027_2_reg_644_pp0_iter3_reg;
        or_ln1027_2_reg_644_pp0_iter5_reg <= or_ln1027_2_reg_644_pp0_iter4_reg;
        or_ln1027_2_reg_644_pp0_iter6_reg <= or_ln1027_2_reg_644_pp0_iter5_reg;
        or_ln1027_2_reg_644_pp0_iter7_reg <= or_ln1027_2_reg_644_pp0_iter6_reg;
        trunc_ln1027_reg_628_pp0_iter2_reg <= trunc_ln1027_reg_628;
        trunc_ln47_reg_669 <= trunc_ln47_fu_454_p1;
        trunc_ln47_reg_669_pp0_iter10_reg <= trunc_ln47_reg_669_pp0_iter9_reg;
        trunc_ln47_reg_669_pp0_iter11_reg <= trunc_ln47_reg_669_pp0_iter10_reg;
        trunc_ln47_reg_669_pp0_iter12_reg <= trunc_ln47_reg_669_pp0_iter11_reg;
        trunc_ln47_reg_669_pp0_iter13_reg <= trunc_ln47_reg_669_pp0_iter12_reg;
        trunc_ln47_reg_669_pp0_iter14_reg <= trunc_ln47_reg_669_pp0_iter13_reg;
        trunc_ln47_reg_669_pp0_iter15_reg <= trunc_ln47_reg_669_pp0_iter14_reg;
        trunc_ln47_reg_669_pp0_iter3_reg <= trunc_ln47_reg_669;
        trunc_ln47_reg_669_pp0_iter4_reg <= trunc_ln47_reg_669_pp0_iter3_reg;
        trunc_ln47_reg_669_pp0_iter5_reg <= trunc_ln47_reg_669_pp0_iter4_reg;
        trunc_ln47_reg_669_pp0_iter6_reg <= trunc_ln47_reg_669_pp0_iter5_reg;
        trunc_ln47_reg_669_pp0_iter7_reg <= trunc_ln47_reg_669_pp0_iter6_reg;
        trunc_ln47_reg_669_pp0_iter8_reg <= trunc_ln47_reg_669_pp0_iter7_reg;
        trunc_ln47_reg_669_pp0_iter9_reg <= trunc_ln47_reg_669_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1027_reg_613 <= icmp_ln1027_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_fu_272_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_64_reg_633 <= empty_64_fu_324_p1;
        icmp_ln1027_6_reg_617 <= icmp_ln1027_6_fu_295_p2;
        or_ln1027_2_reg_644 <= or_ln1027_2_fu_340_p2;
        select_ln1027_1_reg_623 <= select_ln1027_1_fu_312_p3;
        select_ln1027_3_reg_638 <= select_ln1027_3_fu_333_p3;
        select_ln1027_4_reg_648 <= select_ln1027_4_fu_352_p3;
        trunc_ln1027_reg_628 <= trunc_ln1027_fu_320_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_613_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_66_reg_673 <= empty_66_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_613_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1027_reg_678 <= grp_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_613 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln1027_5_reg_664 <= select_ln1027_5_fu_440_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_613_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sext_ln44_mid2_v_reg_683 <= {{add_ln1027_1_fu_501_p2[63:2]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_fu_272_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_613 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_01_phi_fu_233_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_01_phi_fu_233_p4 = first_iter_01_reg_229;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_613 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_0_phi_fu_222_p4 = and_ln1027_reg_654;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_222_p4 = first_iter_0_reg_218;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_613 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_cx_V_load = add_ln840_4_fu_457_p2;
    end else begin
        ap_sig_allocacmp_cx_V_load = cx_V_fu_100;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_1_ce0 = 1'b1;
    end else begin
        coeff_cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (trunc_ln47_reg_669_pp0_iter15_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_1_we0 = 1'b1;
    end else begin
        coeff_cache_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_2_ce0 = 1'b1;
    end else begin
        coeff_cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln47_reg_669_pp0_iter15_reg == 2'd0) & ~(trunc_ln47_reg_669_pp0_iter15_reg == 2'd1) & (ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_2_we0 = 1'b1;
    end else begin
        coeff_cache_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_ce0 = 1'b1;
    end else begin
        coeff_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (trunc_ln47_reg_669_pp0_iter15_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_we0 = 1'b1;
    end else begin
        coeff_cache_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op101_readreq_state9 == 1'b1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_414_ce = 1'b1;
    end else begin
        grp_fu_414_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op101_readreq_state9 == 1'b1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1027_1_fu_501_p2 = (sext_ln44_mid2_v_v_v_v_fu_493_p3 + coeffs);

assign add_ln1027_3_fu_372_p2 = (indvar_flatten_fu_108 + 64'd1);

assign add_ln1027_4_fu_277_p2 = (indvar_flatten30_fu_116 + 96'd1);

assign add_ln1027_fu_489_p2 = (mul_ln1027_reg_678 + mul_ln39_2);

assign add_ln840_1_fu_289_p2 = (iChannel_V_fu_112 + 32'd1);

assign add_ln840_2_fu_430_p2 = (select_ln1027_fu_404_p3 + 32'd1);

assign add_ln840_4_fu_457_p2 = (select_ln1027_4_reg_648 + 32'd1);

assign and_ln1027_fu_366_p2 = (xor_ln1027_fu_360_p2 & or_ln1027_fu_300_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter15 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter15 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage0_iter15 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((ap_predicate_op101_readreq_state9 == 1'b1) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op101_readreq_state9 = ((1'd1 == and_ln1027_reg_654_pp0_iter7_reg) & (or_ln1027_2_reg_644_pp0_iter7_reg == 1'd1));
end

assign coeff_cache_1_address0 = p_cast_fu_532_p1;

assign coeff_cache_1_d0 = gmem_addr_read_reg_698;

assign coeff_cache_2_address0 = p_cast_fu_532_p1;

assign coeff_cache_2_d0 = gmem_addr_read_reg_698;

assign coeff_cache_address0 = p_cast_fu_532_p1;

assign coeff_cache_d0 = gmem_addr_read_reg_698;

assign empty_64_fu_324_p1 = select_ln1027_1_fu_312_p3[9:0];

assign empty_65_fu_479_p2 = (tmp_1_fu_472_p3 - empty_64_reg_633_pp0_iter2_reg);

assign empty_66_fu_484_p2 = (empty_65_fu_479_p2 + select_ln1027_5_reg_664);

assign grp_fu_414_p0 = grp_fu_414_p00;

assign grp_fu_414_p00 = select_ln1027_1_reg_623;

assign icmp_ln1027_6_fu_295_p2 = ((indvar_flatten_fu_108 == mul_ln17) ? 1'b1 : 1'b0);

assign icmp_ln1027_7_fu_328_p2 = ((ap_sig_allocacmp_cx_V_load == convWidth) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_272_p2 = ((indvar_flatten30_fu_116 == mul_ln17_1) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = sext_ln1027_fu_516_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = empty;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln1027_1_fu_306_p2 = (icmp_ln1027_6_fu_295_p2 | ap_phi_mux_first_iter_01_phi_fu_233_p4);

assign or_ln1027_2_fu_340_p2 = (select_ln1027_3_fu_333_p3 | or_ln1027_1_fu_306_p2);

assign or_ln1027_3_fu_346_p2 = (select_ln1027_3_fu_333_p3 | icmp_ln1027_6_fu_295_p2);

assign or_ln1027_fu_300_p2 = (icmp_ln1027_6_fu_295_p2 | ap_phi_mux_first_iter_0_phi_fu_222_p4);

assign p_cast_fu_532_p1 = empty_66_reg_673_pp0_iter15_reg;

assign select_ln1027_11_fu_378_p3 = ((icmp_ln1027_6_fu_295_p2[0:0] == 1'b1) ? 64'd1 : add_ln1027_3_fu_372_p2);

assign select_ln1027_1_fu_312_p3 = ((icmp_ln1027_6_fu_295_p2[0:0] == 1'b1) ? add_ln840_1_fu_289_p2 : iChannel_V_fu_112);

assign select_ln1027_2_fu_423_p3 = ((icmp_ln1027_6_reg_617[0:0] == 1'b1) ? 10'd0 : trunc_ln1027_2_fu_419_p1);

assign select_ln1027_3_fu_333_p3 = ((icmp_ln1027_6_fu_295_p2[0:0] == 1'b1) ? icmp_ln1027_1 : icmp_ln1027_7_fu_328_p2);

assign select_ln1027_4_fu_352_p3 = ((or_ln1027_3_fu_346_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_cx_V_load);

assign select_ln1027_5_fu_440_p3 = ((select_ln1027_3_reg_638[0:0] == 1'b1) ? trunc_ln1027_3_fu_436_p1 : select_ln1027_2_fu_423_p3);

assign select_ln1027_6_fu_447_p3 = ((select_ln1027_3_reg_638[0:0] == 1'b1) ? add_ln840_2_fu_430_p2 : select_ln1027_fu_404_p3);

assign select_ln1027_fu_404_p3 = ((icmp_ln1027_6_reg_617[0:0] == 1'b1) ? 32'd0 : cy_V_fu_104);

assign sext_ln1027_fu_516_p1 = $signed(sext_ln44_mid2_v_reg_683);

assign sext_ln44_mid2_v_v_v_v_fu_493_p3 = {{add_ln1027_fu_489_p2}, {2'd0}};

assign tmp_1_fu_472_p3 = {{trunc_ln1027_reg_628_pp0_iter2_reg}, {2'd0}};

assign trunc_ln1027_2_fu_419_p1 = cy_V_fu_104[9:0];

assign trunc_ln1027_3_fu_436_p1 = add_ln840_2_fu_430_p2[9:0];

assign trunc_ln1027_fu_320_p1 = select_ln1027_1_fu_312_p3[7:0];

assign trunc_ln47_fu_454_p1 = select_ln1027_4_reg_648[1:0];

assign xor_ln1027_fu_360_p2 = (select_ln1027_3_fu_333_p3 ^ 1'd1);

endmodule //Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_45_4
