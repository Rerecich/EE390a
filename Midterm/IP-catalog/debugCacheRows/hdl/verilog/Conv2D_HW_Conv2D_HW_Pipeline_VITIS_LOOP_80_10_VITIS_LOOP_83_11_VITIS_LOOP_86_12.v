// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_80_10_VITIS_LOOP_83_11_VITIS_LOOP_86_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_ln17_1,
        mul_ln17,
        convWidth,
        icmp_ln1027_1,
        coeff_cache_address0,
        coeff_cache_ce0,
        coeff_cache_q0,
        coeff_cache_1_address0,
        coeff_cache_1_ce0,
        coeff_cache_1_q0,
        coeff_cache_2_address0,
        coeff_cache_2_ce0,
        coeff_cache_2_q0,
        lhs_V,
        row_buffer_address0,
        row_buffer_ce0,
        row_buffer_q0,
        row_buffer_1_address0,
        row_buffer_1_ce0,
        row_buffer_1_q0,
        row_buffer_2_address0,
        row_buffer_2_ce0,
        row_buffer_2_q0,
        acc_2_out,
        acc_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [95:0] mul_ln17_1;
input  [63:0] mul_ln17;
input  [31:0] convWidth;
input  [0:0] icmp_ln1027_1;
output  [9:0] coeff_cache_address0;
output   coeff_cache_ce0;
input  [31:0] coeff_cache_q0;
output  [9:0] coeff_cache_1_address0;
output   coeff_cache_1_ce0;
input  [31:0] coeff_cache_1_q0;
output  [9:0] coeff_cache_2_address0;
output   coeff_cache_2_ce0;
input  [31:0] coeff_cache_2_q0;
input  [14:0] lhs_V;
output  [14:0] row_buffer_address0;
output   row_buffer_ce0;
input  [31:0] row_buffer_q0;
output  [14:0] row_buffer_1_address0;
output   row_buffer_1_ce0;
input  [31:0] row_buffer_1_q0;
output  [14:0] row_buffer_2_address0;
output   row_buffer_2_ce0;
input  [31:0] row_buffer_2_q0;
output  [31:0] acc_2_out;
output   acc_2_out_ap_vld;

reg ap_idle;
reg coeff_cache_ce0;
reg coeff_cache_1_ce0;
reg coeff_cache_2_ce0;
reg row_buffer_ce0;
reg row_buffer_1_ce0;
reg row_buffer_2_ce0;
reg acc_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_250_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1027_reg_668;
reg   [0:0] icmp_ln1027_reg_668_pp0_iter2_reg;
reg   [0:0] icmp_ln1027_reg_668_pp0_iter3_reg;
reg   [0:0] icmp_ln1027_reg_668_pp0_iter4_reg;
reg   [0:0] icmp_ln1027_reg_668_pp0_iter5_reg;
wire   [0:0] icmp_ln1027_2_fu_264_p2;
reg   [0:0] icmp_ln1027_2_reg_672;
reg   [0:0] icmp_ln1027_2_reg_672_pp0_iter2_reg;
wire   [9:0] empty_50_fu_325_p2;
reg   [9:0] empty_50_reg_682;
wire   [9:0] empty_52_fu_363_p2;
reg   [9:0] empty_52_reg_687;
wire   [7:0] trunc_ln1027_1_fu_376_p1;
reg   [7:0] trunc_ln1027_1_reg_692;
wire   [0:0] select_ln1027_4_fu_414_p3;
reg   [0:0] select_ln1027_4_reg_697;
wire   [9:0] empty_57_fu_443_p2;
reg   [9:0] empty_57_reg_702;
wire   [1:0] select_ln1027_7_fu_453_p3;
reg   [1:0] select_ln1027_7_reg_707;
reg   [1:0] select_ln1027_7_reg_707_pp0_iter3_reg;
wire   [1:0] trunc_ln88_fu_469_p1;
reg   [1:0] trunc_ln88_reg_712;
reg   [1:0] trunc_ln88_reg_712_pp0_iter3_reg;
wire   [14:0] rhs_V_fu_473_p1;
reg   [14:0] rhs_V_reg_717;
wire   [31:0] add_ln840_2_fu_477_p2;
reg   [31:0] add_ln840_2_reg_722;
wire   [31:0] filterValue_fu_539_p5;
reg  signed [31:0] filterValue_reg_757;
wire   [31:0] pixelValue_fu_550_p5;
reg  signed [31:0] pixelValue_reg_762;
reg   [31:0] trunc_ln4_reg_777;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] select_ln1027_22_cast_fu_511_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln91_fu_528_p1;
reg   [31:0] acc_fu_78;
wire   [31:0] acc_1_fu_586_p2;
wire    ap_loop_init;
reg   [31:0] cx_V_fu_82;
reg   [31:0] ap_sig_allocacmp_cx_V_load;
reg   [31:0] cy_V_fu_86;
wire   [31:0] select_ln1027_8_fu_461_p3;
reg   [63:0] indvar_flatten101_fu_90;
wire   [63:0] select_ln1027_9_fu_275_p3;
reg   [31:0] iChannel_V_fu_94;
wire   [31:0] select_ln1027_1_fu_369_p3;
reg   [95:0] indvar_flatten131_fu_98;
wire   [95:0] add_ln1027_fu_255_p2;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] add_ln1027_1_fu_269_p2;
wire   [7:0] trunc_ln1027_fu_299_p1;
wire   [9:0] tmp_3_fu_307_p3;
wire   [9:0] empty_fu_303_p1;
wire   [9:0] empty_48_fu_315_p2;
wire   [9:0] empty_49_fu_321_p1;
wire   [31:0] add_ln840_fu_334_p2;
wire   [7:0] trunc_ln80_fu_340_p1;
wire   [9:0] tmp_4_fu_355_p3;
wire   [9:0] empty_51_fu_351_p1;
wire   [9:0] tmp_5_fu_384_p3;
wire   [9:0] empty_53_fu_380_p1;
wire   [1:0] empty_55_fu_398_p1;
wire   [0:0] icmp_ln1027_3_fu_409_p2;
wire   [31:0] select_ln1027_fu_344_p3;
wire   [0:0] or_ln1027_fu_426_p2;
wire   [31:0] add_ln840_1_fu_420_p2;
wire   [9:0] empty_54_fu_392_p2;
wire   [9:0] empty_56_fu_439_p1;
wire   [1:0] empty_58_fu_449_p1;
wire   [1:0] select_ln1027_3_fu_402_p3;
wire   [31:0] select_ln1027_5_fu_431_p3;
wire   [9:0] select_ln1027_2_fu_500_p3;
wire   [9:0] select_ln1027_6_fu_505_p3;
wire   [14:0] tmp_6_fu_493_p3;
wire   [14:0] ret_V_fu_518_p2;
wire   [14:0] add_ln91_fu_523_p2;
wire   [51:0] grp_fu_567_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Conv2D_HW_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U31(
    .din0(coeff_cache_q0),
    .din1(coeff_cache_1_q0),
    .din2(coeff_cache_2_q0),
    .din3(trunc_ln88_reg_712_pp0_iter3_reg),
    .dout(filterValue_fu_539_p5)
);

Conv2D_HW_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U32(
    .din0(row_buffer_q0),
    .din1(row_buffer_1_q0),
    .din2(row_buffer_2_q0),
    .din3(select_ln1027_7_reg_707_pp0_iter3_reg),
    .dout(pixelValue_fu_550_p5)
);

Conv2D_HW_mul_32s_32s_52_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 52 ))
mul_32s_32s_52_2_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(pixelValue_reg_762),
    .din1(filterValue_reg_757),
    .ce(1'b1),
    .dout(grp_fu_567_p2)
);

Conv2D_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            acc_fu_78 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            acc_fu_78 <= acc_1_fu_586_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cx_V_fu_82 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            cx_V_fu_82 <= add_ln840_2_reg_722;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cy_V_fu_86 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1027_reg_668 == 1'd0))) begin
            cy_V_fu_86 <= select_ln1027_8_fu_461_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iChannel_V_fu_94 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1027_reg_668 == 1'd0))) begin
            iChannel_V_fu_94 <= select_ln1027_1_fu_369_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten101_fu_90 <= 64'd0;
        end else if (((icmp_ln1027_fu_250_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten101_fu_90 <= select_ln1027_9_fu_275_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten131_fu_98 <= 96'd0;
        end else if (((icmp_ln1027_fu_250_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten131_fu_98 <= add_ln1027_fu_255_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_668 == 1'd0))) begin
        add_ln840_2_reg_722 <= add_ln840_2_fu_477_p2;
        empty_57_reg_702 <= empty_57_fu_443_p2;
        rhs_V_reg_717 <= rhs_V_fu_473_p1;
        select_ln1027_4_reg_697 <= select_ln1027_4_fu_414_p3;
        select_ln1027_7_reg_707 <= select_ln1027_7_fu_453_p3;
        trunc_ln1027_1_reg_692 <= trunc_ln1027_1_fu_376_p1;
        trunc_ln88_reg_712 <= trunc_ln88_fu_469_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1027_reg_668 <= icmp_ln1027_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        filterValue_reg_757 <= filterValue_fu_539_p5;
        icmp_ln1027_2_reg_672_pp0_iter2_reg <= icmp_ln1027_2_reg_672;
        icmp_ln1027_reg_668_pp0_iter2_reg <= icmp_ln1027_reg_668;
        icmp_ln1027_reg_668_pp0_iter3_reg <= icmp_ln1027_reg_668_pp0_iter2_reg;
        icmp_ln1027_reg_668_pp0_iter4_reg <= icmp_ln1027_reg_668_pp0_iter3_reg;
        icmp_ln1027_reg_668_pp0_iter5_reg <= icmp_ln1027_reg_668_pp0_iter4_reg;
        pixelValue_reg_762 <= pixelValue_fu_550_p5;
        select_ln1027_7_reg_707_pp0_iter3_reg <= select_ln1027_7_reg_707;
        trunc_ln4_reg_777 <= {{grp_fu_567_p2[51:20]}};
        trunc_ln88_reg_712_pp0_iter3_reg <= trunc_ln88_reg_712;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_2_reg_672 == 1'd0))) begin
        empty_50_reg_682 <= empty_50_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_2_reg_672 == 1'd1) & (icmp_ln1027_reg_668 == 1'd0))) begin
        empty_52_reg_687 <= empty_52_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_2_reg_672 <= icmp_ln1027_2_fu_264_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_668_pp0_iter5_reg == 1'd1))) begin
        acc_2_out_ap_vld = 1'b1;
    end else begin
        acc_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_250_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1027_reg_668 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_cx_V_load = add_ln840_2_reg_722;
    end else begin
        ap_sig_allocacmp_cx_V_load = cx_V_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_1_ce0 = 1'b1;
    end else begin
        coeff_cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_2_ce0 = 1'b1;
    end else begin
        coeff_cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_ce0 = 1'b1;
    end else begin
        coeff_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        row_buffer_1_ce0 = 1'b1;
    end else begin
        row_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        row_buffer_2_ce0 = 1'b1;
    end else begin
        row_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        row_buffer_ce0 = 1'b1;
    end else begin
        row_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_586_p2 = (trunc_ln4_reg_777 + acc_fu_78);

assign acc_2_out = acc_fu_78;

assign add_ln1027_1_fu_269_p2 = (indvar_flatten101_fu_90 + 64'd1);

assign add_ln1027_fu_255_p2 = (indvar_flatten131_fu_98 + 96'd1);

assign add_ln840_1_fu_420_p2 = (select_ln1027_fu_344_p3 + 32'd1);

assign add_ln840_2_fu_477_p2 = (select_ln1027_5_fu_431_p3 + 32'd1);

assign add_ln840_fu_334_p2 = (iChannel_V_fu_94 + 32'd1);

assign add_ln91_fu_523_p2 = (ret_V_fu_518_p2 + rhs_V_reg_717);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign coeff_cache_1_address0 = select_ln1027_22_cast_fu_511_p1;

assign coeff_cache_2_address0 = select_ln1027_22_cast_fu_511_p1;

assign coeff_cache_address0 = select_ln1027_22_cast_fu_511_p1;

assign empty_48_fu_315_p2 = (tmp_3_fu_307_p3 - empty_fu_303_p1);

assign empty_49_fu_321_p1 = cy_V_fu_86[9:0];

assign empty_50_fu_325_p2 = (empty_48_fu_315_p2 + empty_49_fu_321_p1);

assign empty_51_fu_351_p1 = add_ln840_fu_334_p2[9:0];

assign empty_52_fu_363_p2 = (tmp_4_fu_355_p3 - empty_51_fu_351_p1);

assign empty_53_fu_380_p1 = select_ln1027_1_fu_369_p3[9:0];

assign empty_54_fu_392_p2 = (tmp_5_fu_384_p3 - empty_53_fu_380_p1);

assign empty_55_fu_398_p1 = cy_V_fu_86[1:0];

assign empty_56_fu_439_p1 = add_ln840_1_fu_420_p2[9:0];

assign empty_57_fu_443_p2 = (empty_54_fu_392_p2 + empty_56_fu_439_p1);

assign empty_58_fu_449_p1 = add_ln840_1_fu_420_p2[1:0];

assign empty_fu_303_p1 = iChannel_V_fu_94[9:0];

assign icmp_ln1027_2_fu_264_p2 = ((indvar_flatten101_fu_90 == mul_ln17) ? 1'b1 : 1'b0);

assign icmp_ln1027_3_fu_409_p2 = ((ap_sig_allocacmp_cx_V_load == convWidth) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_250_p2 = ((indvar_flatten131_fu_98 == mul_ln17_1) ? 1'b1 : 1'b0);

assign or_ln1027_fu_426_p2 = (select_ln1027_4_fu_414_p3 | icmp_ln1027_2_reg_672);

assign ret_V_fu_518_p2 = (tmp_6_fu_493_p3 + lhs_V);

assign rhs_V_fu_473_p1 = select_ln1027_5_fu_431_p3[14:0];

assign row_buffer_1_address0 = zext_ln91_fu_528_p1;

assign row_buffer_2_address0 = zext_ln91_fu_528_p1;

assign row_buffer_address0 = zext_ln91_fu_528_p1;

assign select_ln1027_1_fu_369_p3 = ((icmp_ln1027_2_reg_672[0:0] == 1'b1) ? add_ln840_fu_334_p2 : iChannel_V_fu_94);

assign select_ln1027_22_cast_fu_511_p1 = select_ln1027_6_fu_505_p3;

assign select_ln1027_2_fu_500_p3 = ((icmp_ln1027_2_reg_672_pp0_iter2_reg[0:0] == 1'b1) ? empty_52_reg_687 : empty_50_reg_682);

assign select_ln1027_3_fu_402_p3 = ((icmp_ln1027_2_reg_672[0:0] == 1'b1) ? 2'd0 : empty_55_fu_398_p1);

assign select_ln1027_4_fu_414_p3 = ((icmp_ln1027_2_reg_672[0:0] == 1'b1) ? icmp_ln1027_1 : icmp_ln1027_3_fu_409_p2);

assign select_ln1027_5_fu_431_p3 = ((or_ln1027_fu_426_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_cx_V_load);

assign select_ln1027_6_fu_505_p3 = ((select_ln1027_4_reg_697[0:0] == 1'b1) ? empty_57_reg_702 : select_ln1027_2_fu_500_p3);

assign select_ln1027_7_fu_453_p3 = ((select_ln1027_4_fu_414_p3[0:0] == 1'b1) ? empty_58_fu_449_p1 : select_ln1027_3_fu_402_p3);

assign select_ln1027_8_fu_461_p3 = ((select_ln1027_4_fu_414_p3[0:0] == 1'b1) ? add_ln840_1_fu_420_p2 : select_ln1027_fu_344_p3);

assign select_ln1027_9_fu_275_p3 = ((icmp_ln1027_2_fu_264_p2[0:0] == 1'b1) ? 64'd1 : add_ln1027_1_fu_269_p2);

assign select_ln1027_fu_344_p3 = ((icmp_ln1027_2_reg_672[0:0] == 1'b1) ? 32'd0 : cy_V_fu_86);

assign tmp_3_fu_307_p3 = {{trunc_ln1027_fu_299_p1}, {2'd0}};

assign tmp_4_fu_355_p3 = {{trunc_ln80_fu_340_p1}, {2'd0}};

assign tmp_5_fu_384_p3 = {{trunc_ln1027_1_fu_376_p1}, {2'd0}};

assign tmp_6_fu_493_p3 = {{trunc_ln1027_1_reg_692}, {7'd0}};

assign trunc_ln1027_1_fu_376_p1 = select_ln1027_1_fu_369_p3[7:0];

assign trunc_ln1027_fu_299_p1 = iChannel_V_fu_94[7:0];

assign trunc_ln80_fu_340_p1 = add_ln840_fu_334_p2[7:0];

assign trunc_ln88_fu_469_p1 = select_ln1027_5_fu_431_p3[1:0];

assign zext_ln91_fu_528_p1 = add_ln91_fu_523_p2;

endmodule //Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_80_10_VITIS_LOOP_83_11_VITIS_LOOP_86_12
