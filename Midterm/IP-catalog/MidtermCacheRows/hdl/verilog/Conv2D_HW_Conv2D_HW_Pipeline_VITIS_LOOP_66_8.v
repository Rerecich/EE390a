// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_66_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        y_V,
        inputHeight_cast7,
        inputWidth,
        mul_ln17_3,
        mul_ln17_2,
        icmp_ln1027_3,
        inputWidth_cast8,
        input_r,
        row_buffer_address0,
        row_buffer_ce0,
        row_buffer_we0,
        row_buffer_d0,
        grp_fu_400_p_din0,
        grp_fu_400_p_din1,
        grp_fu_400_p_dout0,
        grp_fu_400_p_ce,
        grp_fu_406_p_din0,
        grp_fu_406_p_din1,
        grp_fu_406_p_dout0,
        grp_fu_406_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] y_V;
input  [31:0] inputHeight_cast7;
input  [31:0] inputWidth;
input  [95:0] mul_ln17_3;
input  [63:0] mul_ln17_2;
input  [0:0] icmp_ln1027_3;
input  [31:0] inputWidth_cast8;
input  [63:0] input_r;
output  [16:0] row_buffer_address0;
output   row_buffer_ce0;
output   row_buffer_we0;
output  [31:0] row_buffer_d0;
output  [31:0] grp_fu_400_p_din0;
output  [31:0] grp_fu_400_p_din1;
input  [61:0] grp_fu_400_p_dout0;
output   grp_fu_400_p_ce;
output  [31:0] grp_fu_406_p_din0;
output  [31:0] grp_fu_406_p_din1;
input  [61:0] grp_fu_406_p_dout0;
output   grp_fu_406_p_ce;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg row_buffer_ce0;
reg row_buffer_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
reg   [0:0] or_ln1027_1_reg_643;
reg   [0:0] or_ln1027_1_reg_643_pp0_iter11_reg;
reg    ap_block_state13_io;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
reg   [0:0] icmp_ln1027_4_reg_607;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter18_reg;
reg    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_4_fu_243_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AR;
reg   [0:0] first_iter_2_reg_191;
reg    ap_block_pp0_stage0_11001;
wire   [61:0] inputWidth_cast8_cast_fu_204_p1;
reg   [61:0] inputWidth_cast8_cast_reg_596;
wire   [61:0] inputHeight_cast7_cast_fu_208_p1;
reg   [61:0] inputHeight_cast7_cast_reg_601;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter2_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter3_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter4_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter5_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter6_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter7_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter8_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter9_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter10_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter11_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter12_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter13_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter14_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter15_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter16_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter17_reg;
reg   [0:0] icmp_ln1027_4_reg_607_pp0_iter19_reg;
wire   [0:0] icmp_ln1027_5_fu_254_p2;
reg   [0:0] icmp_ln1027_5_reg_611;
reg   [0:0] icmp_ln1027_5_reg_611_pp0_iter2_reg;
reg   [0:0] icmp_ln1027_5_reg_611_pp0_iter3_reg;
reg   [0:0] icmp_ln1027_5_reg_611_pp0_iter4_reg;
reg   [16:0] x_V_1_reg_622;
reg   [31:0] iChannel_V_1_reg_627;
wire   [0:0] select_ln1027_9_fu_305_p3;
reg   [0:0] select_ln1027_9_reg_632;
reg   [0:0] select_ln1027_9_reg_632_pp0_iter3_reg;
reg   [0:0] select_ln1027_9_reg_632_pp0_iter4_reg;
wire   [31:0] add_ln840_3_fu_311_p2;
reg   [31:0] add_ln840_3_reg_638;
wire   [0:0] or_ln1027_1_fu_322_p2;
reg   [0:0] or_ln1027_1_reg_643_pp0_iter3_reg;
reg   [0:0] or_ln1027_1_reg_643_pp0_iter4_reg;
reg   [0:0] or_ln1027_1_reg_643_pp0_iter5_reg;
reg   [0:0] or_ln1027_1_reg_643_pp0_iter6_reg;
reg   [0:0] or_ln1027_1_reg_643_pp0_iter7_reg;
reg   [0:0] or_ln1027_1_reg_643_pp0_iter8_reg;
reg   [0:0] or_ln1027_1_reg_643_pp0_iter9_reg;
reg   [0:0] or_ln1027_1_reg_643_pp0_iter10_reg;
wire   [9:0] trunc_ln67_1_fu_336_p1;
reg   [9:0] trunc_ln67_1_reg_647;
wire   [31:0] add_ln186_fu_348_p2;
reg   [31:0] add_ln186_reg_652;
reg   [31:0] add_ln186_reg_652_pp0_iter4_reg;
wire   [61:0] iChannel_V_1_cast15_fu_353_p1;
wire   [31:0] add_ln840_fu_361_p2;
reg   [31:0] add_ln840_reg_663;
wire   [61:0] iChannel_V_1_cast15_mid1_fu_410_p1;
wire   [16:0] add_ln67_1_fu_418_p2;
reg   [16:0] add_ln67_1_reg_673;
reg   [16:0] add_ln67_1_reg_673_pp0_iter4_reg;
reg   [16:0] add_ln67_1_reg_673_pp0_iter5_reg;
reg   [16:0] add_ln67_1_reg_673_pp0_iter6_reg;
reg   [16:0] add_ln67_1_reg_673_pp0_iter7_reg;
reg   [16:0] add_ln67_1_reg_673_pp0_iter8_reg;
reg   [16:0] add_ln67_1_reg_673_pp0_iter9_reg;
reg   [16:0] add_ln67_1_reg_673_pp0_iter10_reg;
reg   [16:0] add_ln67_1_reg_673_pp0_iter11_reg;
reg   [61:0] empty_reg_678;
wire   [31:0] add_ln186_1_fu_440_p2;
reg   [31:0] add_ln186_1_reg_683;
reg   [61:0] p_mid143_reg_689;
wire  signed [61:0] select_ln1027_12_fu_476_p3;
reg  signed [61:0] select_ln1027_12_reg_694;
wire   [61:0] grp_fu_483_p2;
reg   [61:0] mul_ln1027_reg_699;
reg   [61:0] sext_ln66_mid2_v_reg_704;
reg   [16:0] row_buffer_addr_reg_709;
reg   [16:0] row_buffer_addr_reg_709_pp0_iter13_reg;
reg   [16:0] row_buffer_addr_reg_709_pp0_iter14_reg;
reg   [16:0] row_buffer_addr_reg_709_pp0_iter15_reg;
reg   [16:0] row_buffer_addr_reg_709_pp0_iter16_reg;
reg   [16:0] row_buffer_addr_reg_709_pp0_iter17_reg;
reg   [16:0] row_buffer_addr_reg_709_pp0_iter18_reg;
reg   [16:0] row_buffer_addr_reg_709_pp0_iter19_reg;
reg   [31:0] gmem_addr_1_read_reg_724;
reg    ap_condition_exit_pp0_iter5_stage0;
reg   [0:0] ap_phi_mux_first_iter_2_phi_fu_196_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln67_fu_512_p1;
wire  signed [63:0] sext_ln1027_fu_509_p1;
reg   [16:0] x_V_fu_100;
wire   [16:0] add_ln840_4_fu_424_p2;
reg   [16:0] ap_sig_allocacmp_x_V_1;
reg   [31:0] iChannel_V_fu_104;
wire   [31:0] select_ln1027_11_fu_328_p3;
reg   [63:0] indvar_flatten53_fu_108;
wire   [63:0] select_ln1027_13_fu_265_p3;
reg   [31:0] cy_V_fu_112;
wire   [31:0] select_ln1027_6_fu_367_p3;
reg   [95:0] indvar_flatten90_fu_116;
wire   [95:0] add_ln1027_fu_248_p2;
wire   [63:0] add_ln1027_3_fu_259_p2;
wire   [31:0] x_V_2_cast_fu_289_p1;
wire   [0:0] icmp_ln1027_fu_293_p2;
wire   [31:0] select_ln1027_fu_298_p3;
wire   [0:0] or_ln1027_fu_317_p2;
wire   [1:0] trunc_ln67_fu_374_p1;
wire   [0:0] or_ln1027_2_fu_386_p2;
wire   [9:0] tmp_4_cast_fu_378_p3;
wire   [9:0] add_ln67_fu_397_p2;
wire   [16:0] tmp_6_fu_402_p3;
wire   [16:0] select_ln1027_10_fu_390_p3;
wire   [61:0] add_ln186_cast_fu_444_p1;
wire   [31:0] select_ln1027_7_fu_455_p3;
wire   [61:0] add_ln186_cast_mid1_fu_452_p1;
wire   [61:0] empty_54_fu_447_p2;
wire   [61:0] zext_ln1027_fu_460_p1;
wire   [61:0] p_mid145_fu_471_p2;
wire   [61:0] select_ln1027_8_fu_464_p3;
wire   [31:0] grp_fu_483_p1;
wire   [63:0] sext_ln66_mid2_v_v_v_v_fu_487_p3;
wire   [63:0] add_ln1027_2_fu_494_p2;
reg    grp_fu_356_ce;
reg    grp_fu_413_ce;
reg    grp_fu_483_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Conv2D_HW_mul_62s_32ns_62_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 62 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_62s_32ns_62_5_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln1027_12_reg_694),
    .din1(grp_fu_483_p1),
    .ce(grp_fu_483_ce),
    .dout(grp_fu_483_p2)
);

Conv2D_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter19_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter5_stage0)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cy_V_fu_112 <= 32'd0;
        end else if (((icmp_ln1027_4_reg_607_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            cy_V_fu_112 <= select_ln1027_6_fu_367_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_4_reg_607_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_2_reg_191 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_2_reg_191 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iChannel_V_fu_104 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1027_4_reg_607 == 1'd0))) begin
            iChannel_V_fu_104 <= select_ln1027_11_fu_328_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten53_fu_108 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1027_4_fu_243_p2 == 1'd0))) begin
            indvar_flatten53_fu_108 <= select_ln1027_13_fu_265_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten90_fu_116 <= 96'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1027_4_fu_243_p2 == 1'd0))) begin
            indvar_flatten90_fu_116 <= add_ln1027_fu_248_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_V_fu_100 <= 17'd0;
        end else if (((icmp_ln1027_4_reg_607_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            x_V_fu_100 <= add_ln840_4_fu_424_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_4_reg_607_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln186_1_reg_683 <= add_ln186_1_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln186_reg_652 <= add_ln186_fu_348_p2;
        add_ln186_reg_652_pp0_iter4_reg <= add_ln186_reg_652;
        add_ln67_1_reg_673_pp0_iter10_reg <= add_ln67_1_reg_673_pp0_iter9_reg;
        add_ln67_1_reg_673_pp0_iter11_reg <= add_ln67_1_reg_673_pp0_iter10_reg;
        add_ln67_1_reg_673_pp0_iter4_reg <= add_ln67_1_reg_673;
        add_ln67_1_reg_673_pp0_iter5_reg <= add_ln67_1_reg_673_pp0_iter4_reg;
        add_ln67_1_reg_673_pp0_iter6_reg <= add_ln67_1_reg_673_pp0_iter5_reg;
        add_ln67_1_reg_673_pp0_iter7_reg <= add_ln67_1_reg_673_pp0_iter6_reg;
        add_ln67_1_reg_673_pp0_iter8_reg <= add_ln67_1_reg_673_pp0_iter7_reg;
        add_ln67_1_reg_673_pp0_iter9_reg <= add_ln67_1_reg_673_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        iChannel_V_1_reg_627 <= iChannel_V_fu_104;
        icmp_ln1027_4_reg_607_pp0_iter10_reg <= icmp_ln1027_4_reg_607_pp0_iter9_reg;
        icmp_ln1027_4_reg_607_pp0_iter11_reg <= icmp_ln1027_4_reg_607_pp0_iter10_reg;
        icmp_ln1027_4_reg_607_pp0_iter12_reg <= icmp_ln1027_4_reg_607_pp0_iter11_reg;
        icmp_ln1027_4_reg_607_pp0_iter13_reg <= icmp_ln1027_4_reg_607_pp0_iter12_reg;
        icmp_ln1027_4_reg_607_pp0_iter14_reg <= icmp_ln1027_4_reg_607_pp0_iter13_reg;
        icmp_ln1027_4_reg_607_pp0_iter15_reg <= icmp_ln1027_4_reg_607_pp0_iter14_reg;
        icmp_ln1027_4_reg_607_pp0_iter16_reg <= icmp_ln1027_4_reg_607_pp0_iter15_reg;
        icmp_ln1027_4_reg_607_pp0_iter17_reg <= icmp_ln1027_4_reg_607_pp0_iter16_reg;
        icmp_ln1027_4_reg_607_pp0_iter18_reg <= icmp_ln1027_4_reg_607_pp0_iter17_reg;
        icmp_ln1027_4_reg_607_pp0_iter19_reg <= icmp_ln1027_4_reg_607_pp0_iter18_reg;
        icmp_ln1027_4_reg_607_pp0_iter2_reg <= icmp_ln1027_4_reg_607;
        icmp_ln1027_4_reg_607_pp0_iter3_reg <= icmp_ln1027_4_reg_607_pp0_iter2_reg;
        icmp_ln1027_4_reg_607_pp0_iter4_reg <= icmp_ln1027_4_reg_607_pp0_iter3_reg;
        icmp_ln1027_4_reg_607_pp0_iter5_reg <= icmp_ln1027_4_reg_607_pp0_iter4_reg;
        icmp_ln1027_4_reg_607_pp0_iter6_reg <= icmp_ln1027_4_reg_607_pp0_iter5_reg;
        icmp_ln1027_4_reg_607_pp0_iter7_reg <= icmp_ln1027_4_reg_607_pp0_iter6_reg;
        icmp_ln1027_4_reg_607_pp0_iter8_reg <= icmp_ln1027_4_reg_607_pp0_iter7_reg;
        icmp_ln1027_4_reg_607_pp0_iter9_reg <= icmp_ln1027_4_reg_607_pp0_iter8_reg;
        icmp_ln1027_5_reg_611_pp0_iter2_reg <= icmp_ln1027_5_reg_611;
        icmp_ln1027_5_reg_611_pp0_iter3_reg <= icmp_ln1027_5_reg_611_pp0_iter2_reg;
        icmp_ln1027_5_reg_611_pp0_iter4_reg <= icmp_ln1027_5_reg_611_pp0_iter3_reg;
        mul_ln1027_reg_699 <= grp_fu_483_p2;
        or_ln1027_1_reg_643_pp0_iter10_reg <= or_ln1027_1_reg_643_pp0_iter9_reg;
        or_ln1027_1_reg_643_pp0_iter11_reg <= or_ln1027_1_reg_643_pp0_iter10_reg;
        or_ln1027_1_reg_643_pp0_iter3_reg <= or_ln1027_1_reg_643;
        or_ln1027_1_reg_643_pp0_iter4_reg <= or_ln1027_1_reg_643_pp0_iter3_reg;
        or_ln1027_1_reg_643_pp0_iter5_reg <= or_ln1027_1_reg_643_pp0_iter4_reg;
        or_ln1027_1_reg_643_pp0_iter6_reg <= or_ln1027_1_reg_643_pp0_iter5_reg;
        or_ln1027_1_reg_643_pp0_iter7_reg <= or_ln1027_1_reg_643_pp0_iter6_reg;
        or_ln1027_1_reg_643_pp0_iter8_reg <= or_ln1027_1_reg_643_pp0_iter7_reg;
        or_ln1027_1_reg_643_pp0_iter9_reg <= or_ln1027_1_reg_643_pp0_iter8_reg;
        row_buffer_addr_reg_709 <= zext_ln67_fu_512_p1;
        row_buffer_addr_reg_709_pp0_iter13_reg <= row_buffer_addr_reg_709;
        row_buffer_addr_reg_709_pp0_iter14_reg <= row_buffer_addr_reg_709_pp0_iter13_reg;
        row_buffer_addr_reg_709_pp0_iter15_reg <= row_buffer_addr_reg_709_pp0_iter14_reg;
        row_buffer_addr_reg_709_pp0_iter16_reg <= row_buffer_addr_reg_709_pp0_iter15_reg;
        row_buffer_addr_reg_709_pp0_iter17_reg <= row_buffer_addr_reg_709_pp0_iter16_reg;
        row_buffer_addr_reg_709_pp0_iter18_reg <= row_buffer_addr_reg_709_pp0_iter17_reg;
        row_buffer_addr_reg_709_pp0_iter19_reg <= row_buffer_addr_reg_709_pp0_iter18_reg;
        select_ln1027_9_reg_632_pp0_iter3_reg <= select_ln1027_9_reg_632;
        select_ln1027_9_reg_632_pp0_iter4_reg <= select_ln1027_9_reg_632_pp0_iter3_reg;
        sext_ln66_mid2_v_reg_704 <= {{add_ln1027_2_fu_494_p2[63:2]}};
        x_V_1_reg_622 <= ap_sig_allocacmp_x_V_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_4_reg_607_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln67_1_reg_673 <= add_ln67_1_fu_418_p2;
        add_ln840_reg_663 <= add_ln840_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_4_reg_607 == 1'd0))) begin
        add_ln840_3_reg_638 <= add_ln840_3_fu_311_p2;
        or_ln1027_1_reg_643 <= or_ln1027_1_fu_322_p2;
        select_ln1027_9_reg_632 <= select_ln1027_9_fu_305_p3;
        trunc_ln67_1_reg_647 <= trunc_ln67_1_fu_336_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1027_4_reg_607 <= icmp_ln1027_4_fu_243_p2;
        inputHeight_cast7_cast_reg_601[31 : 0] <= inputHeight_cast7_cast_fu_208_p1[31 : 0];
        inputWidth_cast8_cast_reg_596[31 : 0] <= inputWidth_cast8_cast_fu_204_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1027_9_reg_632_pp0_iter3_reg == 1'd0) & (icmp_ln1027_5_reg_611_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_678 <= grp_fu_400_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_4_reg_607_pp0_iter18_reg == 1'd0))) begin
        gmem_addr_1_read_reg_724 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_4_fu_243_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1027_5_reg_611 <= icmp_ln1027_5_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1027_9_reg_632_pp0_iter3_reg == 1'd1) & (icmp_ln1027_4_reg_607_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_mid143_reg_689 <= grp_fu_406_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_4_reg_607_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln1027_12_reg_694 <= select_ln1027_12_fu_476_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_4_fu_243_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln1027_4_reg_607_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter19_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_4_reg_607_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_2_phi_fu_196_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_2_phi_fu_196_p4 = first_iter_2_reg_191;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_4_reg_607_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_x_V_1 = add_ln840_4_fu_424_p2;
    end else begin
        ap_sig_allocacmp_x_V_1 = x_V_fu_100;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln1027_1_reg_643_pp0_iter11_reg == 1'd1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_4_reg_607_pp0_iter18_reg == 1'd0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_356_ce = 1'b1;
    end else begin
        grp_fu_356_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_413_ce = 1'b1;
    end else begin
        grp_fu_413_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_483_ce = 1'b1;
    end else begin
        grp_fu_483_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln1027_1_reg_643_pp0_iter11_reg == 1'd1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_4_reg_607_pp0_iter18_reg == 1'd0))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buffer_ce0 = 1'b1;
    end else begin
        row_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (icmp_ln1027_4_reg_607_pp0_iter19_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buffer_we0 = 1'b1;
    end else begin
        row_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1027_2_fu_494_p2 = (sext_ln66_mid2_v_v_v_v_fu_487_p3 + input_r);

assign add_ln1027_3_fu_259_p2 = (indvar_flatten53_fu_108 + 64'd1);

assign add_ln1027_fu_248_p2 = (indvar_flatten90_fu_116 + 96'd1);

assign add_ln186_1_fu_440_p2 = (add_ln840_reg_663 + y_V);

assign add_ln186_cast_fu_444_p1 = add_ln186_reg_652_pp0_iter4_reg;

assign add_ln186_cast_mid1_fu_452_p1 = add_ln186_1_reg_683;

assign add_ln186_fu_348_p2 = (cy_V_fu_112 + y_V);

assign add_ln67_1_fu_418_p2 = (tmp_6_fu_402_p3 + select_ln1027_10_fu_390_p3);

assign add_ln67_fu_397_p2 = (tmp_4_cast_fu_378_p3 + trunc_ln67_1_reg_647);

assign add_ln840_3_fu_311_p2 = (select_ln1027_fu_298_p3 + 32'd1);

assign add_ln840_4_fu_424_p2 = (select_ln1027_10_fu_390_p3 + 17'd1);

assign add_ln840_fu_361_p2 = (cy_V_fu_112 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter19 == 1'b1) & (icmp_ln1027_4_reg_607_pp0_iter18_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter19 == 1'b1) & (icmp_ln1027_4_reg_607_pp0_iter18_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((or_ln1027_1_reg_643_pp0_iter11_reg == 1'd1) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage0_iter19 = ((icmp_ln1027_4_reg_607_pp0_iter18_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_54_fu_447_p2 = (empty_reg_678 + add_ln186_cast_fu_444_p1);

assign grp_fu_400_p_ce = grp_fu_356_ce;

assign grp_fu_400_p_din0 = iChannel_V_1_cast15_fu_353_p1;

assign grp_fu_400_p_din1 = inputHeight_cast7_cast_reg_601;

assign grp_fu_406_p_ce = grp_fu_413_ce;

assign grp_fu_406_p_din0 = iChannel_V_1_cast15_mid1_fu_410_p1;

assign grp_fu_406_p_din1 = inputHeight_cast7_cast_reg_601;

assign grp_fu_483_p1 = inputWidth_cast8_cast_reg_596;

assign iChannel_V_1_cast15_fu_353_p1 = iChannel_V_1_reg_627;

assign iChannel_V_1_cast15_mid1_fu_410_p1 = add_ln840_3_reg_638;

assign icmp_ln1027_4_fu_243_p2 = ((indvar_flatten90_fu_116 == mul_ln17_3) ? 1'b1 : 1'b0);

assign icmp_ln1027_5_fu_254_p2 = ((indvar_flatten53_fu_108 == mul_ln17_2) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_293_p2 = ((x_V_2_cast_fu_289_p1 == inputWidth) ? 1'b1 : 1'b0);

assign inputHeight_cast7_cast_fu_208_p1 = inputHeight_cast7;

assign inputWidth_cast8_cast_fu_204_p1 = inputWidth_cast8;

assign m_axi_gmem_ARADDR = sext_ln1027_fu_509_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = inputWidth;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln1027_1_fu_322_p2 = (select_ln1027_9_fu_305_p3 | or_ln1027_fu_317_p2);

assign or_ln1027_2_fu_386_p2 = (select_ln1027_9_reg_632 | icmp_ln1027_5_reg_611_pp0_iter2_reg);

assign or_ln1027_fu_317_p2 = (icmp_ln1027_5_reg_611 | ap_phi_mux_first_iter_2_phi_fu_196_p4);

assign p_mid145_fu_471_p2 = (p_mid143_reg_689 + zext_ln1027_fu_460_p1);

assign row_buffer_address0 = row_buffer_addr_reg_709_pp0_iter19_reg;

assign row_buffer_d0 = gmem_addr_1_read_reg_724;

assign select_ln1027_10_fu_390_p3 = ((or_ln1027_2_fu_386_p2[0:0] == 1'b1) ? 17'd0 : x_V_1_reg_622);

assign select_ln1027_11_fu_328_p3 = ((select_ln1027_9_fu_305_p3[0:0] == 1'b1) ? add_ln840_3_fu_311_p2 : select_ln1027_fu_298_p3);

assign select_ln1027_12_fu_476_p3 = ((select_ln1027_9_reg_632_pp0_iter4_reg[0:0] == 1'b1) ? p_mid145_fu_471_p2 : select_ln1027_8_fu_464_p3);

assign select_ln1027_13_fu_265_p3 = ((icmp_ln1027_5_fu_254_p2[0:0] == 1'b1) ? 64'd1 : add_ln1027_3_fu_259_p2);

assign select_ln1027_6_fu_367_p3 = ((icmp_ln1027_5_reg_611_pp0_iter2_reg[0:0] == 1'b1) ? add_ln840_fu_361_p2 : cy_V_fu_112);

assign select_ln1027_7_fu_455_p3 = ((icmp_ln1027_5_reg_611_pp0_iter4_reg[0:0] == 1'b1) ? add_ln186_1_reg_683 : add_ln186_reg_652_pp0_iter4_reg);

assign select_ln1027_8_fu_464_p3 = ((icmp_ln1027_5_reg_611_pp0_iter4_reg[0:0] == 1'b1) ? add_ln186_cast_mid1_fu_452_p1 : empty_54_fu_447_p2);

assign select_ln1027_9_fu_305_p3 = ((icmp_ln1027_5_reg_611[0:0] == 1'b1) ? icmp_ln1027_3 : icmp_ln1027_fu_293_p2);

assign select_ln1027_fu_298_p3 = ((icmp_ln1027_5_reg_611[0:0] == 1'b1) ? 32'd0 : iChannel_V_fu_104);

assign sext_ln1027_fu_509_p1 = $signed(sext_ln66_mid2_v_reg_704);

assign sext_ln66_mid2_v_v_v_v_fu_487_p3 = {{mul_ln1027_reg_699}, {2'd0}};

assign tmp_4_cast_fu_378_p3 = {{trunc_ln67_fu_374_p1}, {8'd0}};

assign tmp_6_fu_402_p3 = {{add_ln67_fu_397_p2}, {7'd0}};

assign trunc_ln67_1_fu_336_p1 = select_ln1027_11_fu_328_p3[9:0];

assign trunc_ln67_fu_374_p1 = select_ln1027_6_fu_367_p3[1:0];

assign x_V_2_cast_fu_289_p1 = ap_sig_allocacmp_x_V_1;

assign zext_ln1027_fu_460_p1 = select_ln1027_7_fu_455_p3;

assign zext_ln67_fu_512_p1 = add_ln67_1_reg_673_pp0_iter11_reg;

always @ (posedge ap_clk) begin
    inputWidth_cast8_cast_reg_596[61:32] <= 30'b000000000000000000000000000000;
    inputHeight_cast7_cast_reg_601[61:32] <= 30'b000000000000000000000000000000;
end

endmodule //Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_66_8
