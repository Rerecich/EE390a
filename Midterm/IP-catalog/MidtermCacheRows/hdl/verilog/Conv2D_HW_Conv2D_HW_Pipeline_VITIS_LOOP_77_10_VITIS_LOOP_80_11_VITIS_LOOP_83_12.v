// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_77_10_VITIS_LOOP_80_11_VITIS_LOOP_83_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_ln17_1,
        mul_ln17,
        convWidth,
        icmp_ln1027_1,
        coeff_cache_address0,
        coeff_cache_ce0,
        coeff_cache_q0,
        trunc_ln2,
        row_buffer_address0,
        row_buffer_ce0,
        row_buffer_q0,
        acc_2_out,
        acc_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [95:0] mul_ln17_1;
input  [63:0] mul_ln17;
input  [31:0] convWidth;
input  [0:0] icmp_ln1027_1;
output  [11:0] coeff_cache_address0;
output   coeff_cache_ce0;
input  [31:0] coeff_cache_q0;
input  [16:0] trunc_ln2;
output  [16:0] row_buffer_address0;
output   row_buffer_ce0;
input  [31:0] row_buffer_q0;
output  [31:0] acc_2_out;
output   acc_2_out_ap_vld;

reg ap_idle;
reg coeff_cache_ce0;
reg row_buffer_ce0;
reg acc_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_194_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1027_reg_547;
reg   [0:0] icmp_ln1027_reg_547_pp0_iter2_reg;
reg   [0:0] icmp_ln1027_reg_547_pp0_iter3_reg;
reg   [0:0] icmp_ln1027_reg_547_pp0_iter4_reg;
reg   [0:0] icmp_ln1027_reg_547_pp0_iter5_reg;
wire   [0:0] icmp_ln1027_2_fu_217_p2;
reg   [0:0] icmp_ln1027_2_reg_551;
wire   [31:0] select_ln1027_1_fu_222_p3;
reg   [31:0] select_ln1027_1_reg_558;
wire   [9:0] trunc_ln88_fu_230_p1;
reg   [9:0] trunc_ln88_reg_564;
wire   [11:0] trunc_ln85_fu_348_p1;
reg   [11:0] trunc_ln85_reg_569;
wire   [9:0] trunc_ln85_1_fu_352_p1;
reg   [9:0] trunc_ln85_1_reg_574;
wire   [9:0] add_ln88_fu_368_p2;
reg   [9:0] add_ln88_reg_579;
wire   [11:0] trunc_ln85_2_fu_373_p1;
reg   [11:0] trunc_ln85_2_reg_584;
wire   [16:0] rhs_V_fu_377_p1;
reg   [16:0] rhs_V_reg_589;
wire   [31:0] add_ln840_2_fu_381_p2;
reg   [31:0] add_ln840_2_reg_594;
reg  signed [31:0] filterValue_reg_609;
reg  signed [31:0] pixelValue_reg_614;
reg   [31:0] trunc_ln3_reg_629;
wire   [63:0] zext_ln85_3_fu_416_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_fu_431_p1;
reg   [31:0] acc_fu_74;
wire   [31:0] acc_1_fu_465_p2;
wire    ap_loop_init;
reg   [31:0] cx_V_fu_78;
reg   [31:0] ap_sig_allocacmp_cx_V_load;
reg   [31:0] cy_V_fu_82;
wire   [31:0] select_ln1027_4_fu_330_p3;
reg   [63:0] indvar_flatten97_fu_86;
wire   [63:0] select_ln1027_5_fu_240_p3;
reg   [31:0] iChannel_V_fu_90;
reg   [95:0] indvar_flatten113_fu_94;
wire   [95:0] add_ln1027_fu_199_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] add_ln840_fu_211_p2;
wire   [63:0] add_ln1027_1_fu_234_p2;
wire   [33:0] tmp_7_fu_279_p3;
wire   [34:0] zext_ln85_1_fu_286_p1;
wire   [34:0] zext_ln85_fu_276_p1;
wire   [34:0] sub_ln85_fu_290_p2;
wire   [0:0] icmp_ln1027_3_fu_300_p2;
wire   [31:0] select_ln1027_fu_269_p3;
wire   [0:0] select_ln1027_2_fu_305_p3;
wire   [0:0] or_ln1027_fu_317_p2;
wire   [31:0] add_ln840_1_fu_311_p2;
wire  signed [35:0] sext_ln1027_fu_296_p1;
wire   [35:0] zext_ln85_2_fu_338_p1;
wire   [35:0] add_ln85_fu_342_p2;
wire   [1:0] trunc_ln88_1_fu_356_p1;
wire   [9:0] tmp_s_fu_360_p3;
wire   [31:0] select_ln1027_3_fu_322_p3;
wire   [11:0] p_shl1_fu_392_p3;
wire   [11:0] newFirst_fu_406_p2;
wire   [11:0] newSecond_fu_410_p2;
wire   [16:0] ret_V_fu_421_p2;
wire   [16:0] tmp_1_fu_399_p3;
wire   [16:0] add_ln88_1_fu_425_p2;
wire   [51:0] grp_fu_446_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Conv2D_HW_mul_32s_32s_52_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 52 ))
mul_32s_32s_52_2_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(pixelValue_reg_614),
    .din1(filterValue_reg_609),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

Conv2D_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            acc_fu_74 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            acc_fu_74 <= acc_1_fu_465_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cx_V_fu_78 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            cx_V_fu_78 <= add_ln840_2_reg_594;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cy_V_fu_82 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cy_V_fu_82 <= select_ln1027_4_fu_330_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            iChannel_V_fu_90 <= 32'd0;
        end else if (((icmp_ln1027_fu_194_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            iChannel_V_fu_90 <= select_ln1027_1_fu_222_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten113_fu_94 <= 96'd0;
        end else if (((icmp_ln1027_fu_194_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten113_fu_94 <= add_ln1027_fu_199_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten97_fu_86 <= 64'd0;
        end else if (((icmp_ln1027_fu_194_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten97_fu_86 <= select_ln1027_5_fu_240_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln840_2_reg_594 <= add_ln840_2_fu_381_p2;
        add_ln88_reg_579 <= add_ln88_fu_368_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        filterValue_reg_609 <= coeff_cache_q0;
        icmp_ln1027_reg_547_pp0_iter2_reg <= icmp_ln1027_reg_547;
        icmp_ln1027_reg_547_pp0_iter3_reg <= icmp_ln1027_reg_547_pp0_iter2_reg;
        icmp_ln1027_reg_547_pp0_iter4_reg <= icmp_ln1027_reg_547_pp0_iter3_reg;
        icmp_ln1027_reg_547_pp0_iter5_reg <= icmp_ln1027_reg_547_pp0_iter4_reg;
        pixelValue_reg_614 <= row_buffer_q0;
        rhs_V_reg_589 <= rhs_V_fu_377_p1;
        trunc_ln3_reg_629 <= {{grp_fu_446_p2[51:20]}};
        trunc_ln85_1_reg_574 <= trunc_ln85_1_fu_352_p1;
        trunc_ln85_2_reg_584 <= trunc_ln85_2_fu_373_p1;
        trunc_ln85_reg_569 <= trunc_ln85_fu_348_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1027_reg_547 <= icmp_ln1027_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_194_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_2_reg_551 <= icmp_ln1027_2_fu_217_p2;
        select_ln1027_1_reg_558 <= select_ln1027_1_fu_222_p3;
        trunc_ln88_reg_564 <= trunc_ln88_fu_230_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_547_pp0_iter5_reg == 1'd1))) begin
        acc_2_out_ap_vld = 1'b1;
    end else begin
        acc_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_194_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_cx_V_load = add_ln840_2_reg_594;
    end else begin
        ap_sig_allocacmp_cx_V_load = cx_V_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_cache_ce0 = 1'b1;
    end else begin
        coeff_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        row_buffer_ce0 = 1'b1;
    end else begin
        row_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_465_p2 = (trunc_ln3_reg_629 + acc_fu_74);

assign acc_2_out = acc_fu_74;

assign add_ln1027_1_fu_234_p2 = (indvar_flatten97_fu_86 + 64'd1);

assign add_ln1027_fu_199_p2 = (indvar_flatten113_fu_94 + 96'd1);

assign add_ln840_1_fu_311_p2 = (select_ln1027_fu_269_p3 + 32'd1);

assign add_ln840_2_fu_381_p2 = (select_ln1027_3_fu_322_p3 + 32'd1);

assign add_ln840_fu_211_p2 = (iChannel_V_fu_90 + 32'd1);

assign add_ln85_fu_342_p2 = ($signed(sext_ln1027_fu_296_p1) + $signed(zext_ln85_2_fu_338_p1));

assign add_ln88_1_fu_425_p2 = (ret_V_fu_421_p2 + tmp_1_fu_399_p3);

assign add_ln88_fu_368_p2 = (tmp_s_fu_360_p3 + trunc_ln88_reg_564);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign coeff_cache_address0 = zext_ln85_3_fu_416_p1;

assign icmp_ln1027_2_fu_217_p2 = ((indvar_flatten97_fu_86 == mul_ln17) ? 1'b1 : 1'b0);

assign icmp_ln1027_3_fu_300_p2 = ((ap_sig_allocacmp_cx_V_load == convWidth) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_194_p2 = ((indvar_flatten113_fu_94 == mul_ln17_1) ? 1'b1 : 1'b0);

assign newFirst_fu_406_p2 = (trunc_ln85_2_reg_584 - trunc_ln85_reg_569);

assign newSecond_fu_410_p2 = (p_shl1_fu_392_p3 + newFirst_fu_406_p2);

assign or_ln1027_fu_317_p2 = (select_ln1027_2_fu_305_p3 | icmp_ln1027_2_reg_551);

assign p_shl1_fu_392_p3 = {{trunc_ln85_1_reg_574}, {2'd0}};

assign ret_V_fu_421_p2 = (rhs_V_reg_589 + trunc_ln2);

assign rhs_V_fu_377_p1 = select_ln1027_3_fu_322_p3[16:0];

assign row_buffer_address0 = zext_ln88_fu_431_p1;

assign select_ln1027_1_fu_222_p3 = ((icmp_ln1027_2_fu_217_p2[0:0] == 1'b1) ? add_ln840_fu_211_p2 : iChannel_V_fu_90);

assign select_ln1027_2_fu_305_p3 = ((icmp_ln1027_2_reg_551[0:0] == 1'b1) ? icmp_ln1027_1 : icmp_ln1027_3_fu_300_p2);

assign select_ln1027_3_fu_322_p3 = ((or_ln1027_fu_317_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_cx_V_load);

assign select_ln1027_4_fu_330_p3 = ((select_ln1027_2_fu_305_p3[0:0] == 1'b1) ? add_ln840_1_fu_311_p2 : select_ln1027_fu_269_p3);

assign select_ln1027_5_fu_240_p3 = ((icmp_ln1027_2_fu_217_p2[0:0] == 1'b1) ? 64'd1 : add_ln1027_1_fu_234_p2);

assign select_ln1027_fu_269_p3 = ((icmp_ln1027_2_reg_551[0:0] == 1'b1) ? 32'd0 : cy_V_fu_82);

assign sext_ln1027_fu_296_p1 = $signed(sub_ln85_fu_290_p2);

assign sub_ln85_fu_290_p2 = (zext_ln85_1_fu_286_p1 - zext_ln85_fu_276_p1);

assign tmp_1_fu_399_p3 = {{add_ln88_reg_579}, {7'd0}};

assign tmp_7_fu_279_p3 = {{select_ln1027_1_reg_558}, {2'd0}};

assign tmp_s_fu_360_p3 = {{trunc_ln88_1_fu_356_p1}, {8'd0}};

assign trunc_ln85_1_fu_352_p1 = add_ln85_fu_342_p2[9:0];

assign trunc_ln85_2_fu_373_p1 = select_ln1027_3_fu_322_p3[11:0];

assign trunc_ln85_fu_348_p1 = add_ln85_fu_342_p2[11:0];

assign trunc_ln88_1_fu_356_p1 = select_ln1027_4_fu_330_p3[1:0];

assign trunc_ln88_fu_230_p1 = select_ln1027_1_fu_222_p3[9:0];

assign zext_ln85_1_fu_286_p1 = tmp_7_fu_279_p3;

assign zext_ln85_2_fu_338_p1 = select_ln1027_4_fu_330_p3;

assign zext_ln85_3_fu_416_p1 = newSecond_fu_410_p2;

assign zext_ln85_fu_276_p1 = select_ln1027_1_reg_558;

assign zext_ln88_fu_431_p1 = add_ln88_1_fu_425_p2;

endmodule //Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_77_10_VITIS_LOOP_80_11_VITIS_LOOP_83_12
