-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_45_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_ln38 : IN STD_LOGIC_VECTOR (31 downto 0);
    convWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln43 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln17_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    mul_ln17 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp2_cast_mid135 : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln45_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    coeff_cache_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    coeff_cache_ce0 : OUT STD_LOGIC;
    coeff_cache_we0 : OUT STD_LOGIC;
    coeff_cache_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    coeff_cache_1_ce0 : OUT STD_LOGIC;
    coeff_cache_1_we0 : OUT STD_LOGIC;
    coeff_cache_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    coeff_cache_2_ce0 : OUT STD_LOGIC;
    coeff_cache_2_we0 : OUT STD_LOGIC;
    coeff_cache_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    coeffs : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_418_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_418_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_418_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_418_p_ce : OUT STD_LOGIC;
    grp_fu_472_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_472_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_472_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_472_p_ce : OUT STD_LOGIC;
    grp_fu_919_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_919_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_919_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_919_p_ce : OUT STD_LOGIC;
    grp_fu_923_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_923_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_923_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_923_p_ce : OUT STD_LOGIC );
end;


architecture behav of Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_45_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal or_ln44_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_reg_707_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln43_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal first_iter_0_reg_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln43_cast_fu_229_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln43_cast_reg_665 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp2_cast_mid135_cast_fu_233_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp2_cast_mid135_cast_reg_671 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln43_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_676_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_676_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_676_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_676_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_680_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_680_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_680_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_680_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cy_2_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_4_fu_342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln43_4_reg_697 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln43_4_reg_697_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln43_4_reg_697_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln43_4_reg_697_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln44_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_reg_707_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_reg_707_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_reg_707_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln44_fu_365_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_reg_711_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_reg_711_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_reg_711_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_1_fu_377_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln44_1_reg_717 : STD_LOGIC_VECTOR (9 downto 0);
    signal iChannel_2_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_64_fu_440_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_64_reg_732_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_59_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid1_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_475_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp2_reg_753 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_mid125_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid1_fu_483_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp2_mid1_reg_764 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln45_mid2_v_reg_769 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln47_fu_571_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_reg_774 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_reg_774_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_reg_774_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_reg_774_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_reg_774_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_reg_774_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_reg_774_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_reg_774_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_reg_774_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_addr_read_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter6_stage0 : STD_LOGIC;
    signal ap_phi_mux_first_iter_0_phi_fu_221_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_cast_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln44_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cx_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln45_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_cx_load : STD_LOGIC_VECTOR (31 downto 0);
    signal cy_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_3_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_106 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln44_4_fu_290_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal iChannel_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_1_fu_411_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten55_fu_114 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln43_1_fu_273_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln44_2_fu_284_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln44_fu_311_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_fu_311_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln45_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln43_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln43_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_1_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_1_fu_373_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln43_3_fu_330_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln43_fu_405_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_1_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln43_fu_418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_426_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_62_fu_422_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_63_fu_434_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast5_fu_472_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast5_mid1_fu_480_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp2_cast_fu_491_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln44_fu_488_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln43_2_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_1_fu_500_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_mid137_fu_512_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp2_cast_mid1_fu_521_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln43_2_fu_508_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_mid137_cast_fu_517_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal empty_60_fu_494_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_mid110_fu_524_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln43_5_fu_530_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln44_2_fu_537_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln45_mid2_v_v_v_v_v_fu_544_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln44_1_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln44_1_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_401_ce : STD_LOGIC;
    signal grp_fu_445_ce : STD_LOGIC;
    signal grp_fu_464_ce : STD_LOGIC;
    signal grp_fu_468_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Conv2D_HW_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2D_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Conv2D_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter6_stage0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    cx_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cx_fu_98 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln43_reg_676_pp0_iter2_reg = ap_const_lv1_0))) then 
                    cx_fu_98 <= add_ln45_fu_449_p2;
                end if;
            end if; 
        end if;
    end process;

    cy_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cy_fu_102 <= ap_const_lv32_0;
                elsif (((icmp_ln43_reg_676 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    cy_fu_102 <= select_ln44_3_fu_385_p3;
                end if;
            end if; 
        end if;
    end process;

    first_iter_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln43_reg_676_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_0_reg_216 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_0_reg_216 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    iChannel_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iChannel_fu_110 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln43_reg_676_pp0_iter2_reg = ap_const_lv1_0))) then 
                    iChannel_fu_110 <= select_ln43_1_fu_411_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten55_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten55_fu_114 <= ap_const_lv96_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_fu_268_p2 = ap_const_lv1_0))) then 
                    indvar_flatten55_fu_114 <= add_ln43_1_fu_273_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_106 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_fu_268_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_106 <= select_ln44_4_fu_290_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_676_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln43_reg_727 <= add_ln43_fu_405_p2;
                empty_64_reg_732 <= empty_64_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_676 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln44_reg_702 <= add_ln44_fu_348_p2;
                or_ln44_reg_707 <= or_ln44_fu_354_p2;
                select_ln43_4_reg_697 <= select_ln43_4_fu_342_p3;
                select_ln44_1_reg_717 <= select_ln44_1_fu_377_p3;
                select_ln44_reg_711 <= select_ln44_fu_365_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                cy_2_reg_692 <= cy_fu_102;
                empty_64_reg_732_pp0_iter10_reg <= empty_64_reg_732_pp0_iter9_reg;
                empty_64_reg_732_pp0_iter11_reg <= empty_64_reg_732_pp0_iter10_reg;
                empty_64_reg_732_pp0_iter12_reg <= empty_64_reg_732_pp0_iter11_reg;
                empty_64_reg_732_pp0_iter13_reg <= empty_64_reg_732_pp0_iter12_reg;
                empty_64_reg_732_pp0_iter14_reg <= empty_64_reg_732_pp0_iter13_reg;
                empty_64_reg_732_pp0_iter4_reg <= empty_64_reg_732;
                empty_64_reg_732_pp0_iter5_reg <= empty_64_reg_732_pp0_iter4_reg;
                empty_64_reg_732_pp0_iter6_reg <= empty_64_reg_732_pp0_iter5_reg;
                empty_64_reg_732_pp0_iter7_reg <= empty_64_reg_732_pp0_iter6_reg;
                empty_64_reg_732_pp0_iter8_reg <= empty_64_reg_732_pp0_iter7_reg;
                empty_64_reg_732_pp0_iter9_reg <= empty_64_reg_732_pp0_iter8_reg;
                empty_reg_747 <= grp_fu_919_p_dout0;
                gmem_addr_read_reg_788 <= m_axi_gmem_RDATA;
                iChannel_2_reg_722 <= iChannel_fu_110;
                icmp_ln43_reg_676_pp0_iter2_reg <= icmp_ln43_reg_676;
                icmp_ln43_reg_676_pp0_iter3_reg <= icmp_ln43_reg_676_pp0_iter2_reg;
                icmp_ln43_reg_676_pp0_iter4_reg <= icmp_ln43_reg_676_pp0_iter3_reg;
                icmp_ln43_reg_676_pp0_iter5_reg <= icmp_ln43_reg_676_pp0_iter4_reg;
                icmp_ln44_reg_680_pp0_iter2_reg <= icmp_ln44_reg_680;
                icmp_ln44_reg_680_pp0_iter3_reg <= icmp_ln44_reg_680_pp0_iter2_reg;
                icmp_ln44_reg_680_pp0_iter4_reg <= icmp_ln44_reg_680_pp0_iter3_reg;
                icmp_ln44_reg_680_pp0_iter5_reg <= icmp_ln44_reg_680_pp0_iter4_reg;
                or_ln44_reg_707_pp0_iter3_reg <= or_ln44_reg_707;
                or_ln44_reg_707_pp0_iter4_reg <= or_ln44_reg_707_pp0_iter3_reg;
                or_ln44_reg_707_pp0_iter5_reg <= or_ln44_reg_707_pp0_iter4_reg;
                or_ln44_reg_707_pp0_iter6_reg <= or_ln44_reg_707_pp0_iter5_reg;
                select_ln43_4_reg_697_pp0_iter3_reg <= select_ln43_4_reg_697;
                select_ln43_4_reg_697_pp0_iter4_reg <= select_ln43_4_reg_697_pp0_iter3_reg;
                select_ln43_4_reg_697_pp0_iter5_reg <= select_ln43_4_reg_697_pp0_iter4_reg;
                select_ln44_reg_711_pp0_iter3_reg <= select_ln44_reg_711;
                select_ln44_reg_711_pp0_iter4_reg <= select_ln44_reg_711_pp0_iter3_reg;
                select_ln44_reg_711_pp0_iter5_reg <= select_ln44_reg_711_pp0_iter4_reg;
                trunc_ln47_reg_774_pp0_iter10_reg <= trunc_ln47_reg_774_pp0_iter9_reg;
                trunc_ln47_reg_774_pp0_iter11_reg <= trunc_ln47_reg_774_pp0_iter10_reg;
                trunc_ln47_reg_774_pp0_iter12_reg <= trunc_ln47_reg_774_pp0_iter11_reg;
                trunc_ln47_reg_774_pp0_iter13_reg <= trunc_ln47_reg_774_pp0_iter12_reg;
                trunc_ln47_reg_774_pp0_iter14_reg <= trunc_ln47_reg_774_pp0_iter13_reg;
                trunc_ln47_reg_774_pp0_iter7_reg <= trunc_ln47_reg_774;
                trunc_ln47_reg_774_pp0_iter8_reg <= trunc_ln47_reg_774_pp0_iter7_reg;
                trunc_ln47_reg_774_pp0_iter9_reg <= trunc_ln47_reg_774_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln43_reg_676 <= icmp_ln43_fu_268_p2;
                    tmp2_cast_mid135_cast_reg_671(31 downto 0) <= tmp2_cast_mid135_cast_fu_233_p1(31 downto 0);
                    zext_ln43_cast_reg_665(31 downto 0) <= zext_ln43_cast_fu_229_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln43_4_reg_697_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln44_reg_680_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_59_reg_737 <= grp_fu_418_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln43_fu_268_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln44_reg_680 <= icmp_ln44_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_676_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_mid125_reg_758 <= grp_fu_923_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln43_4_reg_697_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln43_reg_676_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_mid1_reg_742 <= grp_fu_472_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_676_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln45_mid2_v_reg_769 <= add_ln44_1_fu_556_p2(63 downto 2);
                trunc_ln47_reg_774 <= trunc_ln47_fu_571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln43_4_reg_697_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln43_reg_676_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp2_mid1_reg_764 <= tmp2_mid1_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln43_4_reg_697_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln44_reg_680_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp2_reg_753 <= tmp2_fu_475_p2;
            end if;
        end if;
    end process;
    zext_ln43_cast_reg_665(32) <= '0';
    tmp2_cast_mid135_cast_reg_671(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln43_1_fu_273_p2 <= std_logic_vector(unsigned(indvar_flatten55_fu_114) + unsigned(ap_const_lv96_1));
    add_ln43_fu_405_p0 <= iChannel_fu_110;
    add_ln43_fu_405_p2 <= std_logic_vector(signed(add_ln43_fu_405_p0) + signed(ap_const_lv32_1));
    add_ln44_1_fu_556_p2 <= std_logic_vector(unsigned(zext_ln44_1_fu_552_p1) + unsigned(coeffs));
    add_ln44_2_fu_284_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_106) + unsigned(ap_const_lv64_1));
    add_ln44_fu_348_p2 <= std_logic_vector(unsigned(select_ln43_fu_318_p3) + unsigned(ap_const_lv32_1));
    add_ln45_fu_449_p2 <= std_logic_vector(unsigned(select_ln44_reg_711) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter14, m_axi_gmem_RVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter14, m_axi_gmem_RVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage0_iter14_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state15_pp0_stage0_iter14 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(m_axi_gmem_ARREADY, or_ln44_reg_707_pp0_iter6_reg)
    begin
                ap_block_state8_io <= ((or_ln44_reg_707_pp0_iter6_reg = ap_const_lv1_1) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln43_fu_268_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln43_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter6_stage0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone, icmp_ln43_reg_676_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln43_reg_676_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter6_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter6_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter14_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_0_phi_fu_221_p4_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, first_iter_0_reg_216, icmp_ln43_reg_676_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln43_reg_676_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_0_phi_fu_221_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_0_phi_fu_221_p4 <= first_iter_0_reg_216;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_cx_load_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln43_reg_676_pp0_iter2_reg, cx_fu_98, add_ln45_fu_449_p2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln43_reg_676_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_cx_load <= add_ln45_fu_449_p2;
        else 
            ap_sig_allocacmp_cx_load <= cx_fu_98;
        end if; 
    end process;

    coeff_cache_1_address0 <= p_cast_fu_590_p1(10 - 1 downto 0);

    coeff_cache_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_1_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_1_d0 <= gmem_addr_read_reg_788;

    coeff_cache_1_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln47_reg_774_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln47_reg_774_pp0_iter14_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_1_we0 <= ap_const_logic_1;
        else 
            coeff_cache_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_2_address0 <= p_cast_fu_590_p1(10 - 1 downto 0);

    coeff_cache_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_2_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_2_d0 <= gmem_addr_read_reg_788;

    coeff_cache_2_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln47_reg_774_pp0_iter14_reg)
    begin
        if ((not((trunc_ln47_reg_774_pp0_iter14_reg = ap_const_lv2_0)) and not((trunc_ln47_reg_774_pp0_iter14_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_2_we0 <= ap_const_logic_1;
        else 
            coeff_cache_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_address0 <= p_cast_fu_590_p1(10 - 1 downto 0);

    coeff_cache_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_d0 <= gmem_addr_read_reg_788;

    coeff_cache_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln47_reg_774_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln47_reg_774_pp0_iter14_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_we0 <= ap_const_logic_1;
        else 
            coeff_cache_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_60_fu_494_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_491_p1) + unsigned(zext_ln44_fu_488_p1));
    empty_62_fu_422_p1 <= select_ln43_1_fu_411_p3(10 - 1 downto 0);
    empty_63_fu_434_p2 <= std_logic_vector(unsigned(tmp_1_fu_426_p3) - unsigned(empty_62_fu_422_p1));
    empty_64_fu_440_p2 <= std_logic_vector(unsigned(empty_63_fu_434_p2) + unsigned(select_ln44_1_reg_717));

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_gmem_ARREADY, or_ln44_reg_707_pp0_iter6_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln44_reg_707_pp0_iter6_reg = ap_const_lv1_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter14, m_axi_gmem_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_401_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_401_ce <= ap_const_logic_1;
        else 
            grp_fu_401_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_418_p_ce <= grp_fu_401_ce;
    grp_fu_418_p_din0 <= cy_2_reg_692;
    grp_fu_418_p_din1 <= convWidth;

    grp_fu_445_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_445_ce <= ap_const_logic_1;
        else 
            grp_fu_445_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_464_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_464_ce <= ap_const_logic_1;
        else 
            grp_fu_464_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_468_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_468_ce <= ap_const_logic_1;
        else 
            grp_fu_468_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_472_p_ce <= grp_fu_445_ce;
    grp_fu_472_p_din0 <= add_ln44_reg_702;
    grp_fu_472_p_din1 <= convWidth;
    grp_fu_919_p_ce <= grp_fu_464_ce;
    grp_fu_919_p_din0 <= iChannel_2_reg_722;
    grp_fu_919_p_din1 <= mul_ln38;
    grp_fu_923_p_ce <= grp_fu_468_ce;
    grp_fu_923_p_din0 <= add_ln43_reg_727;
    grp_fu_923_p_din1 <= mul_ln38;
    icmp_ln43_fu_268_p2 <= "1" when (indvar_flatten55_fu_114 = mul_ln17_1) else "0";
    icmp_ln44_fu_279_p2 <= "1" when (indvar_flatten_fu_106 = mul_ln17) else "0";
    icmp_ln45_fu_337_p1 <= convWidth;
    icmp_ln45_fu_337_p2 <= "1" when (ap_sig_allocacmp_cx_load = icmp_ln45_fu_337_p1) else "0";
    m_axi_gmem_ARADDR <= sext_ln44_fu_574_p1;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= convWidth;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter7, or_ln44_reg_707_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln44_reg_707_pp0_iter6_reg = ap_const_lv1_1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    or_ln43_fu_325_p2 <= (icmp_ln44_reg_680 or ap_phi_mux_first_iter_0_phi_fu_221_p4);
    or_ln44_1_fu_360_p2 <= (select_ln43_4_fu_342_p3 or icmp_ln44_reg_680);
    or_ln44_fu_354_p2 <= (select_ln43_4_fu_342_p3 or or_ln43_fu_325_p2);
    p_cast5_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_59_reg_737),33));
    p_cast5_mid1_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid1_reg_742),33));
    p_cast_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_64_reg_732_pp0_iter14_reg),64));
    p_mid110_fu_524_p2 <= std_logic_vector(unsigned(tmp2_cast_mid1_fu_521_p1) + unsigned(zext_ln43_2_fu_508_p1));
    p_mid137_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid137_fu_512_p2),34));
    p_mid137_fu_512_p2 <= std_logic_vector(unsigned(tmp2_cast_mid135_cast_reg_671) + unsigned(zext_ln43_1_fu_500_p1));
    select_ln43_1_fu_411_p2 <= iChannel_fu_110;
    select_ln43_1_fu_411_p3 <= 
        add_ln43_fu_405_p2 when (icmp_ln44_reg_680_pp0_iter2_reg(0) = '1') else 
        select_ln43_1_fu_411_p2;
    select_ln43_2_fu_503_p3 <= 
        p_mid125_reg_758 when (icmp_ln44_reg_680_pp0_iter5_reg(0) = '1') else 
        empty_reg_747;
    select_ln43_3_fu_330_p3 <= 
        ap_const_lv10_0 when (icmp_ln44_reg_680(0) = '1') else 
        trunc_ln44_fu_311_p1;
    select_ln43_4_fu_342_p3 <= 
        icmp_ln45_1 when (icmp_ln44_reg_680(0) = '1') else 
        icmp_ln45_fu_337_p2;
    select_ln43_5_fu_530_p3 <= 
        p_mid137_cast_fu_517_p1 when (icmp_ln44_reg_680_pp0_iter5_reg(0) = '1') else 
        empty_60_fu_494_p2;
    select_ln43_fu_318_p2 <= cy_fu_102;
    select_ln43_fu_318_p3 <= 
        ap_const_lv32_0 when (icmp_ln44_reg_680(0) = '1') else 
        select_ln43_fu_318_p2;
    select_ln44_1_fu_377_p3 <= 
        trunc_ln44_1_fu_373_p1 when (select_ln43_4_fu_342_p3(0) = '1') else 
        select_ln43_3_fu_330_p3;
    select_ln44_2_fu_537_p3 <= 
        p_mid110_fu_524_p2 when (select_ln43_4_reg_697_pp0_iter5_reg(0) = '1') else 
        select_ln43_5_fu_530_p3;
    select_ln44_3_fu_385_p3 <= 
        add_ln44_fu_348_p2 when (select_ln43_4_fu_342_p3(0) = '1') else 
        select_ln43_fu_318_p3;
    select_ln44_4_fu_290_p3 <= 
        ap_const_lv64_1 when (icmp_ln44_fu_279_p2(0) = '1') else 
        add_ln44_2_fu_284_p2;
    select_ln44_fu_365_p3 <= 
        ap_const_lv32_0 when (or_ln44_1_fu_360_p2(0) = '1') else 
        ap_sig_allocacmp_cx_load;
        sext_ln44_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln45_mid2_v_reg_769),64));

    sext_ln45_mid2_v_v_v_v_v_fu_544_p3 <= (select_ln44_2_fu_537_p3 & ap_const_lv2_0);
    tmp2_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_753),34));
    tmp2_cast_mid135_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_cast_mid135),33));
    tmp2_cast_mid1_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_mid1_reg_764),34));
    tmp2_fu_475_p2 <= std_logic_vector(unsigned(zext_ln43_cast_reg_665) + unsigned(p_cast5_fu_472_p1));
    tmp2_mid1_fu_483_p2 <= std_logic_vector(unsigned(zext_ln43_cast_reg_665) + unsigned(p_cast5_mid1_fu_480_p1));
    tmp_1_fu_426_p3 <= (trunc_ln43_fu_418_p1 & ap_const_lv2_0);
    trunc_ln43_fu_418_p1 <= select_ln43_1_fu_411_p3(8 - 1 downto 0);
    trunc_ln44_1_fu_373_p1 <= add_ln44_fu_348_p2(10 - 1 downto 0);
    trunc_ln44_fu_311_p0 <= cy_fu_102;
    trunc_ln44_fu_311_p1 <= trunc_ln44_fu_311_p0(10 - 1 downto 0);
    trunc_ln47_fu_571_p1 <= select_ln44_reg_711_pp0_iter5_reg(2 - 1 downto 0);
    zext_ln43_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid125_reg_758),33));
    zext_ln43_2_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_2_fu_503_p3),34));
    zext_ln43_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln43),33));
    zext_ln44_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln45_mid2_v_v_v_v_v_fu_544_p3),64));
    zext_ln44_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_747),34));
end behav;
