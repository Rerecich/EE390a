-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_45_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    convWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln17_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln17 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul_ln38 : IN STD_LOGIC_VECTOR (61 downto 0);
    mul_ln39_3 : IN STD_LOGIC_VECTOR (61 downto 0);
    coeffs : IN STD_LOGIC_VECTOR (63 downto 0);
    icmp_ln1027_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    coeff_cache_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_ce0 : OUT STD_LOGIC;
    coeff_cache_we0 : OUT STD_LOGIC;
    coeff_cache_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_45_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal or_ln1027_2_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1027_2_reg_627_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1027_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1027_reg_646_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op109_readreq_state9 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal icmp_ln1027_4_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_4_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal first_iter_0_reg_189 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_01_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cx_V_1_reg_592 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1027_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_602_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_5_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_5_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1027_1_fu_281_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_1_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1027_2_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1027_2_reg_627_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1027_2_reg_627_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1027_2_reg_627_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1027_2_reg_627_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1027_4_fu_392_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1027_4_reg_631 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln47_fu_417_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln47_reg_636 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln47_1_fu_421_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln47_1_reg_641 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln1027_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1027_reg_646_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1027_reg_646_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1027_reg_646_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1027_reg_646_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_1_fu_465_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln47_1_reg_651 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln47_1_reg_651_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln47_1_reg_651_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln47_1_reg_651_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln47_1_reg_651_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln1027_reg_656 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln44_mid2_v_reg_661 : STD_LOGIC_VECTOR (61 downto 0);
    signal coeff_cache_addr_reg_666 : STD_LOGIC_VECTOR (11 downto 0);
    signal coeff_cache_addr_reg_666_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal coeff_cache_addr_reg_666_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal coeff_cache_addr_reg_666_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal coeff_cache_addr_reg_666_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal coeff_cache_addr_reg_666_pp0_iter13_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal coeff_cache_addr_reg_666_pp0_iter14_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal coeff_cache_addr_reg_666_pp0_iter15_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal gmem_addr_2_read_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_mux_first_iter_0_phi_fu_193_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_first_iter_01_phi_fu_205_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln47_3_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1027_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cx_V_fu_98 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln840_fu_437_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_cx_V_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal cy_V_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_5_fu_399_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_106 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1027_7_fu_295_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal iChannel_V_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten29_fu_114 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln1027_3_fu_261_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal cx_V_cast_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln840_1_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1027_2_fu_289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_341_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln47_1_fu_348_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln47_fu_338_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal sub_ln47_fu_352_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_3_fu_370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1027_1_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1027_3_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln840_2_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1027_1_fu_358_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln47_2_fu_407_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln47_fu_411_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln1027_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1027_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_fu_453_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln47_1_fu_460_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1027_fu_470_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln44_mid2_v_v_v_v_fu_474_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1027_1_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_365_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_365_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Conv2D_HW_mul_32ns_62s_62_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (61 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component Conv2D_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_62s_62_5_1_U1 : component Conv2D_HW_mul_32ns_62s_62_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 62,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_365_p0,
        din1 => mul_ln38,
        ce => grp_fu_365_ce,
        dout => grp_fu_365_p2);

    flow_control_loop_pipe_sequential_init_U : component Conv2D_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    cx_V_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cx_V_fu_98 <= ap_const_lv12_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_4_reg_602 = ap_const_lv1_0))) then 
                    cx_V_fu_98 <= add_ln840_fu_437_p2;
                end if;
            end if; 
        end if;
    end process;

    cy_V_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cy_V_fu_102 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_4_reg_602 = ap_const_lv1_0))) then 
                    cy_V_fu_102 <= select_ln1027_5_fu_399_p3;
                end if;
            end if; 
        end if;
    end process;

    first_iter_01_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_4_reg_602_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_01_reg_200 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_01_reg_200 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    first_iter_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_4_reg_602_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_0_reg_189 <= and_ln1027_reg_646;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_0_reg_189 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    iChannel_V_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    iChannel_V_fu_110 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_4_fu_256_p2 = ap_const_lv1_0))) then 
                    iChannel_V_fu_110 <= select_ln1027_1_fu_281_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten29_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten29_fu_114 <= ap_const_lv96_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_4_fu_256_p2 = ap_const_lv1_0))) then 
                    indvar_flatten29_fu_114 <= add_ln1027_3_fu_261_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_106 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_4_fu_256_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_106 <= select_ln1027_7_fu_295_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_4_reg_602_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln47_1_reg_651 <= add_ln47_1_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln47_1_reg_651_pp0_iter4_reg <= add_ln47_1_reg_651;
                add_ln47_1_reg_651_pp0_iter5_reg <= add_ln47_1_reg_651_pp0_iter4_reg;
                add_ln47_1_reg_651_pp0_iter6_reg <= add_ln47_1_reg_651_pp0_iter5_reg;
                add_ln47_1_reg_651_pp0_iter7_reg <= add_ln47_1_reg_651_pp0_iter6_reg;
                and_ln1027_reg_646_pp0_iter3_reg <= and_ln1027_reg_646;
                and_ln1027_reg_646_pp0_iter4_reg <= and_ln1027_reg_646_pp0_iter3_reg;
                and_ln1027_reg_646_pp0_iter5_reg <= and_ln1027_reg_646_pp0_iter4_reg;
                and_ln1027_reg_646_pp0_iter6_reg <= and_ln1027_reg_646_pp0_iter5_reg;
                and_ln1027_reg_646_pp0_iter7_reg <= and_ln1027_reg_646_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                coeff_cache_addr_reg_666_pp0_iter10_reg <= coeff_cache_addr_reg_666_pp0_iter9_reg;
                coeff_cache_addr_reg_666_pp0_iter11_reg <= coeff_cache_addr_reg_666_pp0_iter10_reg;
                coeff_cache_addr_reg_666_pp0_iter12_reg <= coeff_cache_addr_reg_666_pp0_iter11_reg;
                coeff_cache_addr_reg_666_pp0_iter13_reg <= coeff_cache_addr_reg_666_pp0_iter12_reg;
                coeff_cache_addr_reg_666_pp0_iter14_reg <= coeff_cache_addr_reg_666_pp0_iter13_reg;
                coeff_cache_addr_reg_666_pp0_iter15_reg <= coeff_cache_addr_reg_666_pp0_iter14_reg;
                coeff_cache_addr_reg_666_pp0_iter9_reg <= coeff_cache_addr_reg_666;
                icmp_ln1027_4_reg_602_pp0_iter10_reg <= icmp_ln1027_4_reg_602_pp0_iter9_reg;
                icmp_ln1027_4_reg_602_pp0_iter11_reg <= icmp_ln1027_4_reg_602_pp0_iter10_reg;
                icmp_ln1027_4_reg_602_pp0_iter12_reg <= icmp_ln1027_4_reg_602_pp0_iter11_reg;
                icmp_ln1027_4_reg_602_pp0_iter13_reg <= icmp_ln1027_4_reg_602_pp0_iter12_reg;
                icmp_ln1027_4_reg_602_pp0_iter14_reg <= icmp_ln1027_4_reg_602_pp0_iter13_reg;
                icmp_ln1027_4_reg_602_pp0_iter15_reg <= icmp_ln1027_4_reg_602_pp0_iter14_reg;
                icmp_ln1027_4_reg_602_pp0_iter2_reg <= icmp_ln1027_4_reg_602;
                icmp_ln1027_4_reg_602_pp0_iter3_reg <= icmp_ln1027_4_reg_602_pp0_iter2_reg;
                icmp_ln1027_4_reg_602_pp0_iter4_reg <= icmp_ln1027_4_reg_602_pp0_iter3_reg;
                icmp_ln1027_4_reg_602_pp0_iter5_reg <= icmp_ln1027_4_reg_602_pp0_iter4_reg;
                icmp_ln1027_4_reg_602_pp0_iter6_reg <= icmp_ln1027_4_reg_602_pp0_iter5_reg;
                icmp_ln1027_4_reg_602_pp0_iter7_reg <= icmp_ln1027_4_reg_602_pp0_iter6_reg;
                icmp_ln1027_4_reg_602_pp0_iter8_reg <= icmp_ln1027_4_reg_602_pp0_iter7_reg;
                icmp_ln1027_4_reg_602_pp0_iter9_reg <= icmp_ln1027_4_reg_602_pp0_iter8_reg;
                or_ln1027_2_reg_627_pp0_iter3_reg <= or_ln1027_2_reg_627;
                or_ln1027_2_reg_627_pp0_iter4_reg <= or_ln1027_2_reg_627_pp0_iter3_reg;
                or_ln1027_2_reg_627_pp0_iter5_reg <= or_ln1027_2_reg_627_pp0_iter4_reg;
                or_ln1027_2_reg_627_pp0_iter6_reg <= or_ln1027_2_reg_627_pp0_iter5_reg;
                or_ln1027_2_reg_627_pp0_iter7_reg <= or_ln1027_2_reg_627_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_4_reg_602 = ap_const_lv1_0))) then
                and_ln1027_reg_646 <= and_ln1027_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                cx_V_1_reg_592 <= ap_sig_allocacmp_cx_V_1;
                icmp_ln1027_4_reg_602 <= icmp_ln1027_4_fu_256_p2;
                icmp_ln1027_reg_597 <= icmp_ln1027_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_4_reg_602_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coeff_cache_addr_reg_666 <= zext_ln47_3_fu_500_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_4_reg_602_pp0_iter14_reg = ap_const_lv1_0))) then
                gmem_addr_2_read_reg_681 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_4_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1027_5_reg_606 <= icmp_ln1027_5_fu_276_p2;
                select_ln1027_1_reg_615 <= select_ln1027_1_fu_281_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_4_reg_602_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln1027_reg_656 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_4_reg_602 = ap_const_lv1_0))) then
                or_ln1027_2_reg_627 <= or_ln1027_2_fu_381_p2;
                select_ln1027_4_reg_631 <= select_ln1027_4_fu_392_p3;
                trunc_ln47_1_reg_641 <= trunc_ln47_1_fu_421_p1;
                trunc_ln47_reg_636 <= trunc_ln47_fu_417_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_4_reg_602_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln44_mid2_v_reg_661 <= add_ln1027_1_fu_482_p2(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1027_1_fu_482_p2 <= std_logic_vector(unsigned(sext_ln44_mid2_v_v_v_v_fu_474_p3) + unsigned(coeffs));
    add_ln1027_2_fu_289_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_106) + unsigned(ap_const_lv64_1));
    add_ln1027_3_fu_261_p2 <= std_logic_vector(unsigned(indvar_flatten29_fu_114) + unsigned(ap_const_lv96_1));
    add_ln1027_fu_470_p2 <= std_logic_vector(unsigned(mul_ln1027_reg_656) + unsigned(mul_ln39_3));
    add_ln47_1_fu_465_p2 <= std_logic_vector(unsigned(sub_ln47_1_fu_460_p2) + unsigned(select_ln1027_4_reg_631));
    add_ln47_fu_411_p2 <= std_logic_vector(signed(sext_ln1027_1_fu_358_p1) + signed(zext_ln47_2_fu_407_p1));
    add_ln840_1_fu_270_p2 <= std_logic_vector(unsigned(iChannel_V_fu_110) + unsigned(ap_const_lv32_1));
    add_ln840_2_fu_375_p2 <= std_logic_vector(unsigned(select_ln1027_fu_326_p3) + unsigned(ap_const_lv32_1));
    add_ln840_fu_437_p2 <= std_logic_vector(unsigned(select_ln1027_4_fu_392_p3) + unsigned(ap_const_lv12_1));
    and_ln1027_fu_431_p2 <= (xor_ln1027_fu_425_p2 and or_ln1027_fu_321_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, m_axi_gmem_RVALID, ap_block_state9_io, icmp_ln1027_4_reg_602_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln1027_4_reg_602_pp0_iter14_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, m_axi_gmem_RVALID, ap_block_state9_io, icmp_ln1027_4_reg_602_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln1027_4_reg_602_pp0_iter14_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage0_iter15_assign_proc : process(m_axi_gmem_RVALID, icmp_ln1027_4_reg_602_pp0_iter14_reg)
    begin
                ap_block_state16_pp0_stage0_iter15 <= ((icmp_ln1027_4_reg_602_pp0_iter14_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(m_axi_gmem_ARREADY, ap_predicate_op109_readreq_state9)
    begin
                ap_block_state9_io <= ((ap_predicate_op109_readreq_state9 = ap_const_boolean_1) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1027_4_fu_256_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_4_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1027_4_reg_602, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1027_4_reg_602 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_01_phi_fu_205_p4_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, first_iter_01_reg_200, icmp_ln1027_4_reg_602_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_4_reg_602_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_01_phi_fu_205_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_01_phi_fu_205_p4 <= first_iter_01_reg_200;
        end if; 
    end process;


    ap_phi_mux_first_iter_0_phi_fu_193_p4_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln1027_reg_646, ap_block_pp0_stage0, first_iter_0_reg_189, icmp_ln1027_4_reg_602_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_4_reg_602_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_0_phi_fu_193_p4 <= and_ln1027_reg_646;
        else 
            ap_phi_mux_first_iter_0_phi_fu_193_p4 <= first_iter_0_reg_189;
        end if; 
    end process;


    ap_predicate_op109_readreq_state9_assign_proc : process(or_ln1027_2_reg_627_pp0_iter7_reg, and_ln1027_reg_646_pp0_iter7_reg)
    begin
                ap_predicate_op109_readreq_state9 <= ((ap_const_lv1_1 = and_ln1027_reg_646_pp0_iter7_reg) and (or_ln1027_2_reg_627_pp0_iter7_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_cx_V_1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1027_4_reg_602, ap_block_pp0_stage0, cx_V_fu_98, add_ln840_fu_437_p2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1027_4_reg_602 = ap_const_lv1_0))) then 
            ap_sig_allocacmp_cx_V_1 <= add_ln840_fu_437_p2;
        else 
            ap_sig_allocacmp_cx_V_1 <= cx_V_fu_98;
        end if; 
    end process;

    coeff_cache_address0 <= coeff_cache_addr_reg_666_pp0_iter15_reg;

    coeff_cache_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_d0 <= gmem_addr_2_read_reg_681;

    coeff_cache_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln1027_4_reg_602_pp0_iter15_reg)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln1027_4_reg_602_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            coeff_cache_we0 <= ap_const_logic_1;
        else 
            coeff_cache_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cx_V_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_cx_V_1),32));

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_gmem_ARREADY, ap_predicate_op109_readreq_state9, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op109_readreq_state9 = ap_const_boolean_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter15, m_axi_gmem_RVALID, icmp_ln1027_4_reg_602_pp0_iter14_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1027_4_reg_602_pp0_iter14_reg = ap_const_lv1_0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_365_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_365_ce <= ap_const_logic_1;
        else 
            grp_fu_365_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_365_p0 <= grp_fu_365_p00(32 - 1 downto 0);
    grp_fu_365_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_1_reg_615),62));
    icmp_ln1027_4_fu_256_p2 <= "1" when (indvar_flatten29_fu_114 = mul_ln17_1) else "0";
    icmp_ln1027_5_fu_276_p2 <= "1" when (indvar_flatten_fu_106 = mul_ln17) else "0";
    icmp_ln1027_fu_251_p2 <= "1" when (cx_V_cast_fu_247_p1 = convWidth) else "0";
    m_axi_gmem_ARADDR <= sext_ln1027_fu_497_p1;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= empty;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter8, ap_predicate_op109_readreq_state9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op109_readreq_state9 = ap_const_boolean_1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter15, icmp_ln1027_4_reg_602_pp0_iter14_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_4_reg_602_pp0_iter14_reg = ap_const_lv1_0))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    or_ln1027_1_fu_333_p2 <= (icmp_ln1027_5_reg_606 or ap_phi_mux_first_iter_01_phi_fu_205_p4);
    or_ln1027_2_fu_381_p2 <= (select_ln1027_3_fu_370_p3 or or_ln1027_1_fu_333_p2);
    or_ln1027_3_fu_387_p2 <= (select_ln1027_3_fu_370_p3 or icmp_ln1027_5_reg_606);
    or_ln1027_fu_321_p2 <= (icmp_ln1027_5_reg_606 or ap_phi_mux_first_iter_0_phi_fu_193_p4);
    p_shl_fu_453_p3 <= (trunc_ln47_1_reg_641 & ap_const_lv2_0);
    select_ln1027_1_fu_281_p3 <= 
        add_ln840_1_fu_270_p2 when (icmp_ln1027_5_fu_276_p2(0) = '1') else 
        iChannel_V_fu_110;
    select_ln1027_3_fu_370_p3 <= 
        icmp_ln1027_1 when (icmp_ln1027_5_reg_606(0) = '1') else 
        icmp_ln1027_reg_597;
    select_ln1027_4_fu_392_p3 <= 
        ap_const_lv12_0 when (or_ln1027_3_fu_387_p2(0) = '1') else 
        cx_V_1_reg_592;
    select_ln1027_5_fu_399_p3 <= 
        add_ln840_2_fu_375_p2 when (select_ln1027_3_fu_370_p3(0) = '1') else 
        select_ln1027_fu_326_p3;
    select_ln1027_7_fu_295_p3 <= 
        ap_const_lv64_1 when (icmp_ln1027_5_fu_276_p2(0) = '1') else 
        add_ln1027_2_fu_289_p2;
    select_ln1027_fu_326_p3 <= 
        ap_const_lv32_0 when (icmp_ln1027_5_reg_606(0) = '1') else 
        cy_V_fu_102;
        sext_ln1027_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln47_fu_352_p2),36));

        sext_ln1027_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln44_mid2_v_reg_661),64));

    sext_ln44_mid2_v_v_v_v_fu_474_p3 <= (add_ln1027_fu_470_p2 & ap_const_lv2_0);
    sub_ln47_1_fu_460_p2 <= std_logic_vector(unsigned(p_shl_fu_453_p3) - unsigned(trunc_ln47_reg_636));
    sub_ln47_fu_352_p2 <= std_logic_vector(unsigned(zext_ln47_1_fu_348_p1) - unsigned(zext_ln47_fu_338_p1));
    tmp_3_fu_341_p3 <= (select_ln1027_1_reg_615 & ap_const_lv2_0);
    trunc_ln47_1_fu_421_p1 <= add_ln47_fu_411_p2(10 - 1 downto 0);
    trunc_ln47_fu_417_p1 <= add_ln47_fu_411_p2(12 - 1 downto 0);
    xor_ln1027_fu_425_p2 <= (select_ln1027_3_fu_370_p3 xor ap_const_lv1_1);
    zext_ln47_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_341_p3),35));
    zext_ln47_2_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_5_fu_399_p3),36));
    zext_ln47_3_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_1_reg_651_pp0_iter7_reg),64));
    zext_ln47_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_1_reg_615),35));
end behav;
