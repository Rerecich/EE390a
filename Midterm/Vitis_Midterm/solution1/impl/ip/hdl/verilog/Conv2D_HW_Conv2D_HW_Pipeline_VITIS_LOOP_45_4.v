// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_45_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        mul_ln38,
        convWidth,
        zext_ln43,
        mul_ln17_1,
        mul_ln17,
        tmp2_cast_mid135,
        icmp_ln45_1,
        coeff_cache_address0,
        coeff_cache_ce0,
        coeff_cache_we0,
        coeff_cache_d0,
        coeff_cache_1_address0,
        coeff_cache_1_ce0,
        coeff_cache_1_we0,
        coeff_cache_1_d0,
        coeff_cache_2_address0,
        coeff_cache_2_ce0,
        coeff_cache_2_we0,
        coeff_cache_2_d0,
        coeffs,
        grp_fu_418_p_din0,
        grp_fu_418_p_din1,
        grp_fu_418_p_dout0,
        grp_fu_418_p_ce,
        grp_fu_472_p_din0,
        grp_fu_472_p_din1,
        grp_fu_472_p_dout0,
        grp_fu_472_p_ce,
        grp_fu_919_p_din0,
        grp_fu_919_p_din1,
        grp_fu_919_p_dout0,
        grp_fu_919_p_ce,
        grp_fu_923_p_din0,
        grp_fu_923_p_din1,
        grp_fu_923_p_dout0,
        grp_fu_923_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] mul_ln38;
input  [31:0] convWidth;
input  [31:0] zext_ln43;
input  [95:0] mul_ln17_1;
input  [63:0] mul_ln17;
input  [31:0] tmp2_cast_mid135;
input  [0:0] icmp_ln45_1;
output  [9:0] coeff_cache_address0;
output   coeff_cache_ce0;
output   coeff_cache_we0;
output  [31:0] coeff_cache_d0;
output  [9:0] coeff_cache_1_address0;
output   coeff_cache_1_ce0;
output   coeff_cache_1_we0;
output  [31:0] coeff_cache_1_d0;
output  [9:0] coeff_cache_2_address0;
output   coeff_cache_2_ce0;
output   coeff_cache_2_we0;
output  [31:0] coeff_cache_2_d0;
input  [63:0] coeffs;
output  [31:0] grp_fu_418_p_din0;
output  [31:0] grp_fu_418_p_din1;
input  [31:0] grp_fu_418_p_dout0;
output   grp_fu_418_p_ce;
output  [31:0] grp_fu_472_p_din0;
output  [31:0] grp_fu_472_p_din1;
input  [31:0] grp_fu_472_p_dout0;
output   grp_fu_472_p_ce;
output  [31:0] grp_fu_919_p_din0;
output  [31:0] grp_fu_919_p_din1;
input  [31:0] grp_fu_919_p_dout0;
output   grp_fu_919_p_ce;
output  [31:0] grp_fu_923_p_din0;
output  [31:0] grp_fu_923_p_din1;
input  [31:0] grp_fu_923_p_dout0;
output   grp_fu_923_p_ce;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg coeff_cache_ce0;
reg coeff_cache_we0;
reg coeff_cache_1_ce0;
reg coeff_cache_1_we0;
reg coeff_cache_2_ce0;
reg coeff_cache_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg   [0:0] or_ln44_reg_707;
reg   [0:0] or_ln44_reg_707_pp0_iter6_reg;
reg    ap_block_state8_io;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_268_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AR;
reg   [0:0] first_iter_0_reg_216;
reg    ap_block_pp0_stage0_11001;
wire   [32:0] zext_ln43_cast_fu_229_p1;
reg   [32:0] zext_ln43_cast_reg_665;
wire   [32:0] tmp2_cast_mid135_cast_fu_233_p1;
reg   [32:0] tmp2_cast_mid135_cast_reg_671;
reg   [0:0] icmp_ln43_reg_676;
reg   [0:0] icmp_ln43_reg_676_pp0_iter2_reg;
reg   [0:0] icmp_ln43_reg_676_pp0_iter3_reg;
reg   [0:0] icmp_ln43_reg_676_pp0_iter4_reg;
reg   [0:0] icmp_ln43_reg_676_pp0_iter5_reg;
wire   [0:0] icmp_ln44_fu_279_p2;
reg   [0:0] icmp_ln44_reg_680;
reg   [0:0] icmp_ln44_reg_680_pp0_iter2_reg;
reg   [0:0] icmp_ln44_reg_680_pp0_iter3_reg;
reg   [0:0] icmp_ln44_reg_680_pp0_iter4_reg;
reg   [0:0] icmp_ln44_reg_680_pp0_iter5_reg;
reg  signed [31:0] cy_2_reg_692;
wire   [0:0] select_ln43_4_fu_342_p3;
reg   [0:0] select_ln43_4_reg_697;
reg   [0:0] select_ln43_4_reg_697_pp0_iter3_reg;
reg   [0:0] select_ln43_4_reg_697_pp0_iter4_reg;
reg   [0:0] select_ln43_4_reg_697_pp0_iter5_reg;
wire  signed [31:0] add_ln44_fu_348_p2;
reg  signed [31:0] add_ln44_reg_702;
wire   [0:0] or_ln44_fu_354_p2;
reg   [0:0] or_ln44_reg_707_pp0_iter3_reg;
reg   [0:0] or_ln44_reg_707_pp0_iter4_reg;
reg   [0:0] or_ln44_reg_707_pp0_iter5_reg;
wire   [31:0] select_ln44_fu_365_p3;
reg   [31:0] select_ln44_reg_711;
reg   [31:0] select_ln44_reg_711_pp0_iter3_reg;
reg   [31:0] select_ln44_reg_711_pp0_iter4_reg;
reg   [31:0] select_ln44_reg_711_pp0_iter5_reg;
wire   [9:0] select_ln44_1_fu_377_p3;
reg   [9:0] select_ln44_1_reg_717;
reg  signed [31:0] iChannel_2_reg_722;
wire  signed [31:0] add_ln43_fu_405_p2;
reg  signed [31:0] add_ln43_reg_727;
wire   [9:0] empty_64_fu_440_p2;
reg   [9:0] empty_64_reg_732;
reg   [9:0] empty_64_reg_732_pp0_iter4_reg;
reg   [9:0] empty_64_reg_732_pp0_iter5_reg;
reg   [9:0] empty_64_reg_732_pp0_iter6_reg;
reg   [9:0] empty_64_reg_732_pp0_iter7_reg;
reg   [9:0] empty_64_reg_732_pp0_iter8_reg;
reg   [9:0] empty_64_reg_732_pp0_iter9_reg;
reg   [9:0] empty_64_reg_732_pp0_iter10_reg;
reg   [9:0] empty_64_reg_732_pp0_iter11_reg;
reg   [9:0] empty_64_reg_732_pp0_iter12_reg;
reg   [9:0] empty_64_reg_732_pp0_iter13_reg;
reg   [9:0] empty_64_reg_732_pp0_iter14_reg;
reg   [31:0] empty_59_reg_737;
reg   [31:0] p_mid1_reg_742;
reg   [31:0] empty_reg_747;
wire   [32:0] tmp2_fu_475_p2;
reg   [32:0] tmp2_reg_753;
reg   [31:0] p_mid125_reg_758;
wire   [32:0] tmp2_mid1_fu_483_p2;
reg   [32:0] tmp2_mid1_reg_764;
reg   [61:0] sext_ln45_mid2_v_reg_769;
wire   [1:0] trunc_ln47_fu_571_p1;
reg   [1:0] trunc_ln47_reg_774;
reg   [1:0] trunc_ln47_reg_774_pp0_iter7_reg;
reg   [1:0] trunc_ln47_reg_774_pp0_iter8_reg;
reg   [1:0] trunc_ln47_reg_774_pp0_iter9_reg;
reg   [1:0] trunc_ln47_reg_774_pp0_iter10_reg;
reg   [1:0] trunc_ln47_reg_774_pp0_iter11_reg;
reg   [1:0] trunc_ln47_reg_774_pp0_iter12_reg;
reg   [1:0] trunc_ln47_reg_774_pp0_iter13_reg;
reg   [1:0] trunc_ln47_reg_774_pp0_iter14_reg;
reg   [31:0] gmem_addr_read_reg_788;
reg    ap_condition_exit_pp0_iter6_stage0;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_221_p4;
wire    ap_loop_init;
wire   [63:0] p_cast_fu_590_p1;
wire  signed [63:0] sext_ln44_fu_574_p1;
reg   [31:0] cx_fu_98;
wire   [31:0] add_ln45_fu_449_p2;
reg   [31:0] ap_sig_allocacmp_cx_load;
reg   [31:0] cy_fu_102;
wire   [31:0] select_ln44_3_fu_385_p3;
reg   [63:0] indvar_flatten_fu_106;
wire   [63:0] select_ln44_4_fu_290_p3;
reg   [31:0] iChannel_fu_110;
wire   [31:0] select_ln43_1_fu_411_p3;
reg   [95:0] indvar_flatten55_fu_114;
wire   [95:0] add_ln43_1_fu_273_p2;
wire   [63:0] add_ln44_2_fu_284_p2;
wire  signed [31:0] trunc_ln44_fu_311_p0;
wire  signed [31:0] select_ln43_fu_318_p2;
wire   [9:0] trunc_ln44_fu_311_p1;
wire  signed [31:0] icmp_ln45_fu_337_p1;
wire   [0:0] icmp_ln45_fu_337_p2;
wire   [31:0] select_ln43_fu_318_p3;
wire   [0:0] or_ln43_fu_325_p2;
wire   [0:0] or_ln44_1_fu_360_p2;
wire   [9:0] trunc_ln44_1_fu_373_p1;
wire   [9:0] select_ln43_3_fu_330_p3;
wire  signed [31:0] add_ln43_fu_405_p0;
wire  signed [31:0] select_ln43_1_fu_411_p2;
wire   [7:0] trunc_ln43_fu_418_p1;
wire   [9:0] tmp_1_fu_426_p3;
wire   [9:0] empty_62_fu_422_p1;
wire   [9:0] empty_63_fu_434_p2;
wire   [32:0] p_cast5_fu_472_p1;
wire   [32:0] p_cast5_mid1_fu_480_p1;
wire   [33:0] tmp2_cast_fu_491_p1;
wire   [33:0] zext_ln44_fu_488_p1;
wire   [31:0] select_ln43_2_fu_503_p3;
wire   [32:0] zext_ln43_1_fu_500_p1;
wire   [32:0] p_mid137_fu_512_p2;
wire   [33:0] tmp2_cast_mid1_fu_521_p1;
wire   [33:0] zext_ln43_2_fu_508_p1;
wire   [33:0] p_mid137_cast_fu_517_p1;
wire   [33:0] empty_60_fu_494_p2;
wire   [33:0] p_mid110_fu_524_p2;
wire   [33:0] select_ln43_5_fu_530_p3;
wire   [33:0] select_ln44_2_fu_537_p3;
wire   [35:0] sext_ln45_mid2_v_v_v_v_v_fu_544_p3;
wire   [63:0] zext_ln44_1_fu_552_p1;
wire   [63:0] add_ln44_1_fu_556_p2;
reg    grp_fu_401_ce;
reg    grp_fu_445_ce;
reg    grp_fu_464_ce;
reg    grp_fu_468_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Conv2D_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter14_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter6_stage0)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cx_fu_98 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln43_reg_676_pp0_iter2_reg == 1'd0))) begin
            cx_fu_98 <= add_ln45_fu_449_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cy_fu_102 <= 32'd0;
        end else if (((icmp_ln43_reg_676 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            cy_fu_102 <= select_ln44_3_fu_385_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln43_reg_676_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_216 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_216 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iChannel_fu_110 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln43_reg_676_pp0_iter2_reg == 1'd0))) begin
            iChannel_fu_110 <= select_ln43_1_fu_411_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten55_fu_114 <= 96'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_fu_268_p2 == 1'd0))) begin
            indvar_flatten55_fu_114 <= add_ln43_1_fu_273_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_106 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_fu_268_p2 == 1'd0))) begin
            indvar_flatten_fu_106 <= select_ln44_4_fu_290_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_676_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln43_reg_727 <= add_ln43_fu_405_p2;
        empty_64_reg_732 <= empty_64_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_676 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln44_reg_702 <= add_ln44_fu_348_p2;
        or_ln44_reg_707 <= or_ln44_fu_354_p2;
        select_ln43_4_reg_697 <= select_ln43_4_fu_342_p3;
        select_ln44_1_reg_717 <= select_ln44_1_fu_377_p3;
        select_ln44_reg_711 <= select_ln44_fu_365_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        cy_2_reg_692 <= cy_fu_102;
        empty_64_reg_732_pp0_iter10_reg <= empty_64_reg_732_pp0_iter9_reg;
        empty_64_reg_732_pp0_iter11_reg <= empty_64_reg_732_pp0_iter10_reg;
        empty_64_reg_732_pp0_iter12_reg <= empty_64_reg_732_pp0_iter11_reg;
        empty_64_reg_732_pp0_iter13_reg <= empty_64_reg_732_pp0_iter12_reg;
        empty_64_reg_732_pp0_iter14_reg <= empty_64_reg_732_pp0_iter13_reg;
        empty_64_reg_732_pp0_iter4_reg <= empty_64_reg_732;
        empty_64_reg_732_pp0_iter5_reg <= empty_64_reg_732_pp0_iter4_reg;
        empty_64_reg_732_pp0_iter6_reg <= empty_64_reg_732_pp0_iter5_reg;
        empty_64_reg_732_pp0_iter7_reg <= empty_64_reg_732_pp0_iter6_reg;
        empty_64_reg_732_pp0_iter8_reg <= empty_64_reg_732_pp0_iter7_reg;
        empty_64_reg_732_pp0_iter9_reg <= empty_64_reg_732_pp0_iter8_reg;
        empty_reg_747 <= grp_fu_919_p_dout0;
        gmem_addr_read_reg_788 <= m_axi_gmem_RDATA;
        iChannel_2_reg_722 <= iChannel_fu_110;
        icmp_ln43_reg_676_pp0_iter2_reg <= icmp_ln43_reg_676;
        icmp_ln43_reg_676_pp0_iter3_reg <= icmp_ln43_reg_676_pp0_iter2_reg;
        icmp_ln43_reg_676_pp0_iter4_reg <= icmp_ln43_reg_676_pp0_iter3_reg;
        icmp_ln43_reg_676_pp0_iter5_reg <= icmp_ln43_reg_676_pp0_iter4_reg;
        icmp_ln44_reg_680_pp0_iter2_reg <= icmp_ln44_reg_680;
        icmp_ln44_reg_680_pp0_iter3_reg <= icmp_ln44_reg_680_pp0_iter2_reg;
        icmp_ln44_reg_680_pp0_iter4_reg <= icmp_ln44_reg_680_pp0_iter3_reg;
        icmp_ln44_reg_680_pp0_iter5_reg <= icmp_ln44_reg_680_pp0_iter4_reg;
        or_ln44_reg_707_pp0_iter3_reg <= or_ln44_reg_707;
        or_ln44_reg_707_pp0_iter4_reg <= or_ln44_reg_707_pp0_iter3_reg;
        or_ln44_reg_707_pp0_iter5_reg <= or_ln44_reg_707_pp0_iter4_reg;
        or_ln44_reg_707_pp0_iter6_reg <= or_ln44_reg_707_pp0_iter5_reg;
        select_ln43_4_reg_697_pp0_iter3_reg <= select_ln43_4_reg_697;
        select_ln43_4_reg_697_pp0_iter4_reg <= select_ln43_4_reg_697_pp0_iter3_reg;
        select_ln43_4_reg_697_pp0_iter5_reg <= select_ln43_4_reg_697_pp0_iter4_reg;
        select_ln44_reg_711_pp0_iter3_reg <= select_ln44_reg_711;
        select_ln44_reg_711_pp0_iter4_reg <= select_ln44_reg_711_pp0_iter3_reg;
        select_ln44_reg_711_pp0_iter5_reg <= select_ln44_reg_711_pp0_iter4_reg;
        trunc_ln47_reg_774_pp0_iter10_reg <= trunc_ln47_reg_774_pp0_iter9_reg;
        trunc_ln47_reg_774_pp0_iter11_reg <= trunc_ln47_reg_774_pp0_iter10_reg;
        trunc_ln47_reg_774_pp0_iter12_reg <= trunc_ln47_reg_774_pp0_iter11_reg;
        trunc_ln47_reg_774_pp0_iter13_reg <= trunc_ln47_reg_774_pp0_iter12_reg;
        trunc_ln47_reg_774_pp0_iter14_reg <= trunc_ln47_reg_774_pp0_iter13_reg;
        trunc_ln47_reg_774_pp0_iter7_reg <= trunc_ln47_reg_774;
        trunc_ln47_reg_774_pp0_iter8_reg <= trunc_ln47_reg_774_pp0_iter7_reg;
        trunc_ln47_reg_774_pp0_iter9_reg <= trunc_ln47_reg_774_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln43_reg_676 <= icmp_ln43_fu_268_p2;
        tmp2_cast_mid135_cast_reg_671[31 : 0] <= tmp2_cast_mid135_cast_fu_233_p1[31 : 0];
        zext_ln43_cast_reg_665[31 : 0] <= zext_ln43_cast_fu_229_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln43_4_reg_697_pp0_iter3_reg == 1'd0) & (icmp_ln44_reg_680_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_59_reg_737 <= grp_fu_418_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln44_reg_680 <= icmp_ln44_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_676_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_mid125_reg_758 <= grp_fu_923_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln43_4_reg_697_pp0_iter3_reg == 1'd1) & (icmp_ln43_reg_676_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_mid1_reg_742 <= grp_fu_472_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_676_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sext_ln45_mid2_v_reg_769 <= {{add_ln44_1_fu_556_p2[63:2]}};
        trunc_ln47_reg_774 <= trunc_ln47_fu_571_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln43_4_reg_697_pp0_iter4_reg == 1'd1) & (icmp_ln43_reg_676_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp2_mid1_reg_764 <= tmp2_mid1_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln43_4_reg_697_pp0_iter4_reg == 1'd0) & (icmp_ln44_reg_680_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp2_reg_753 <= tmp2_fu_475_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln43_reg_676_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter6_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter6_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter14_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln43_reg_676_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_0_phi_fu_221_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_221_p4 = first_iter_0_reg_216;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln43_reg_676_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_cx_load = add_ln45_fu_449_p2;
    end else begin
        ap_sig_allocacmp_cx_load = cx_fu_98;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_1_ce0 = 1'b1;
    end else begin
        coeff_cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (trunc_ln47_reg_774_pp0_iter14_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_1_we0 = 1'b1;
    end else begin
        coeff_cache_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_2_ce0 = 1'b1;
    end else begin
        coeff_cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln47_reg_774_pp0_iter14_reg == 2'd0) & ~(trunc_ln47_reg_774_pp0_iter14_reg == 2'd1) & (ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_2_we0 = 1'b1;
    end else begin
        coeff_cache_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_ce0 = 1'b1;
    end else begin
        coeff_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (trunc_ln47_reg_774_pp0_iter14_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_cache_we0 = 1'b1;
    end else begin
        coeff_cache_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln44_reg_707_pp0_iter6_reg == 1'd1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_401_ce = 1'b1;
    end else begin
        grp_fu_401_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_445_ce = 1'b1;
    end else begin
        grp_fu_445_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_464_ce = 1'b1;
    end else begin
        grp_fu_464_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_468_ce = 1'b1;
    end else begin
        grp_fu_468_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln44_reg_707_pp0_iter6_reg == 1'd1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_1_fu_273_p2 = (indvar_flatten55_fu_114 + 96'd1);

assign add_ln43_fu_405_p0 = iChannel_fu_110;

assign add_ln43_fu_405_p2 = ($signed(add_ln43_fu_405_p0) + $signed(32'd1));

assign add_ln44_1_fu_556_p2 = (zext_ln44_1_fu_552_p1 + coeffs);

assign add_ln44_2_fu_284_p2 = (indvar_flatten_fu_106 + 64'd1);

assign add_ln44_fu_348_p2 = (select_ln43_fu_318_p3 + 32'd1);

assign add_ln45_fu_449_p2 = (select_ln44_reg_711 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter14 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter14 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage0_iter14 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((or_ln44_reg_707_pp0_iter6_reg == 1'd1) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign coeff_cache_1_address0 = p_cast_fu_590_p1;

assign coeff_cache_1_d0 = gmem_addr_read_reg_788;

assign coeff_cache_2_address0 = p_cast_fu_590_p1;

assign coeff_cache_2_d0 = gmem_addr_read_reg_788;

assign coeff_cache_address0 = p_cast_fu_590_p1;

assign coeff_cache_d0 = gmem_addr_read_reg_788;

assign empty_60_fu_494_p2 = (tmp2_cast_fu_491_p1 + zext_ln44_fu_488_p1);

assign empty_62_fu_422_p1 = select_ln43_1_fu_411_p3[9:0];

assign empty_63_fu_434_p2 = (tmp_1_fu_426_p3 - empty_62_fu_422_p1);

assign empty_64_fu_440_p2 = (empty_63_fu_434_p2 + select_ln44_1_reg_717);

assign grp_fu_418_p_ce = grp_fu_401_ce;

assign grp_fu_418_p_din0 = cy_2_reg_692;

assign grp_fu_418_p_din1 = convWidth;

assign grp_fu_472_p_ce = grp_fu_445_ce;

assign grp_fu_472_p_din0 = add_ln44_reg_702;

assign grp_fu_472_p_din1 = convWidth;

assign grp_fu_919_p_ce = grp_fu_464_ce;

assign grp_fu_919_p_din0 = iChannel_2_reg_722;

assign grp_fu_919_p_din1 = mul_ln38;

assign grp_fu_923_p_ce = grp_fu_468_ce;

assign grp_fu_923_p_din0 = add_ln43_reg_727;

assign grp_fu_923_p_din1 = mul_ln38;

assign icmp_ln43_fu_268_p2 = ((indvar_flatten55_fu_114 == mul_ln17_1) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_279_p2 = ((indvar_flatten_fu_106 == mul_ln17) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_337_p1 = convWidth;

assign icmp_ln45_fu_337_p2 = ((ap_sig_allocacmp_cx_load == icmp_ln45_fu_337_p1) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = sext_ln44_fu_574_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = convWidth;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln43_fu_325_p2 = (icmp_ln44_reg_680 | ap_phi_mux_first_iter_0_phi_fu_221_p4);

assign or_ln44_1_fu_360_p2 = (select_ln43_4_fu_342_p3 | icmp_ln44_reg_680);

assign or_ln44_fu_354_p2 = (select_ln43_4_fu_342_p3 | or_ln43_fu_325_p2);

assign p_cast5_fu_472_p1 = empty_59_reg_737;

assign p_cast5_mid1_fu_480_p1 = p_mid1_reg_742;

assign p_cast_fu_590_p1 = empty_64_reg_732_pp0_iter14_reg;

assign p_mid110_fu_524_p2 = (tmp2_cast_mid1_fu_521_p1 + zext_ln43_2_fu_508_p1);

assign p_mid137_cast_fu_517_p1 = p_mid137_fu_512_p2;

assign p_mid137_fu_512_p2 = (tmp2_cast_mid135_cast_reg_671 + zext_ln43_1_fu_500_p1);

assign select_ln43_1_fu_411_p2 = iChannel_fu_110;

assign select_ln43_1_fu_411_p3 = ((icmp_ln44_reg_680_pp0_iter2_reg[0:0] == 1'b1) ? add_ln43_fu_405_p2 : select_ln43_1_fu_411_p2);

assign select_ln43_2_fu_503_p3 = ((icmp_ln44_reg_680_pp0_iter5_reg[0:0] == 1'b1) ? p_mid125_reg_758 : empty_reg_747);

assign select_ln43_3_fu_330_p3 = ((icmp_ln44_reg_680[0:0] == 1'b1) ? 10'd0 : trunc_ln44_fu_311_p1);

assign select_ln43_4_fu_342_p3 = ((icmp_ln44_reg_680[0:0] == 1'b1) ? icmp_ln45_1 : icmp_ln45_fu_337_p2);

assign select_ln43_5_fu_530_p3 = ((icmp_ln44_reg_680_pp0_iter5_reg[0:0] == 1'b1) ? p_mid137_cast_fu_517_p1 : empty_60_fu_494_p2);

assign select_ln43_fu_318_p2 = cy_fu_102;

assign select_ln43_fu_318_p3 = ((icmp_ln44_reg_680[0:0] == 1'b1) ? 32'd0 : select_ln43_fu_318_p2);

assign select_ln44_1_fu_377_p3 = ((select_ln43_4_fu_342_p3[0:0] == 1'b1) ? trunc_ln44_1_fu_373_p1 : select_ln43_3_fu_330_p3);

assign select_ln44_2_fu_537_p3 = ((select_ln43_4_reg_697_pp0_iter5_reg[0:0] == 1'b1) ? p_mid110_fu_524_p2 : select_ln43_5_fu_530_p3);

assign select_ln44_3_fu_385_p3 = ((select_ln43_4_fu_342_p3[0:0] == 1'b1) ? add_ln44_fu_348_p2 : select_ln43_fu_318_p3);

assign select_ln44_4_fu_290_p3 = ((icmp_ln44_fu_279_p2[0:0] == 1'b1) ? 64'd1 : add_ln44_2_fu_284_p2);

assign select_ln44_fu_365_p3 = ((or_ln44_1_fu_360_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_cx_load);

assign sext_ln44_fu_574_p1 = $signed(sext_ln45_mid2_v_reg_769);

assign sext_ln45_mid2_v_v_v_v_v_fu_544_p3 = {{select_ln44_2_fu_537_p3}, {2'd0}};

assign tmp2_cast_fu_491_p1 = tmp2_reg_753;

assign tmp2_cast_mid135_cast_fu_233_p1 = tmp2_cast_mid135;

assign tmp2_cast_mid1_fu_521_p1 = tmp2_mid1_reg_764;

assign tmp2_fu_475_p2 = (zext_ln43_cast_reg_665 + p_cast5_fu_472_p1);

assign tmp2_mid1_fu_483_p2 = (zext_ln43_cast_reg_665 + p_cast5_mid1_fu_480_p1);

assign tmp_1_fu_426_p3 = {{trunc_ln43_fu_418_p1}, {2'd0}};

assign trunc_ln43_fu_418_p1 = select_ln43_1_fu_411_p3[7:0];

assign trunc_ln44_1_fu_373_p1 = add_ln44_fu_348_p2[9:0];

assign trunc_ln44_fu_311_p0 = cy_fu_102;

assign trunc_ln44_fu_311_p1 = trunc_ln44_fu_311_p0[9:0];

assign trunc_ln47_fu_571_p1 = select_ln44_reg_711_pp0_iter5_reg[1:0];

assign zext_ln43_1_fu_500_p1 = p_mid125_reg_758;

assign zext_ln43_2_fu_508_p1 = select_ln43_2_fu_503_p3;

assign zext_ln43_cast_fu_229_p1 = zext_ln43;

assign zext_ln44_1_fu_552_p1 = sext_ln45_mid2_v_v_v_v_v_fu_544_p3;

assign zext_ln44_fu_488_p1 = empty_reg_747;

always @ (posedge ap_clk) begin
    zext_ln43_cast_reg_665[32] <= 1'b0;
    tmp2_cast_mid135_cast_reg_671[32] <= 1'b0;
end

endmodule //Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_45_4
