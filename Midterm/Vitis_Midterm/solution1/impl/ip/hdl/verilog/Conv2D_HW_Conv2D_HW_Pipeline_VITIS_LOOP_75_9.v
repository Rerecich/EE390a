// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_75_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        y,
        inputWidth,
        inputHeight,
        trunc_ln,
        mul_ln19_3,
        row_buffer_2_address0,
        row_buffer_2_ce0,
        row_buffer_2_we0,
        row_buffer_2_d0,
        row_buffer_1_address0,
        row_buffer_1_ce0,
        row_buffer_1_we0,
        row_buffer_1_d0,
        row_buffer_address0,
        row_buffer_ce0,
        row_buffer_we0,
        row_buffer_d0,
        mul_ln19_2,
        icmp_ln75_1,
        input_r,
        grp_fu_484_p_din0,
        grp_fu_484_p_din1,
        grp_fu_484_p_dout0,
        grp_fu_484_p_ce,
        grp_fu_512_p_din0,
        grp_fu_512_p_din1,
        grp_fu_512_p_dout0,
        grp_fu_512_p_ce,
        grp_fu_1158_p_din0,
        grp_fu_1158_p_din1,
        grp_fu_1158_p_dout0,
        grp_fu_1158_p_ce,
        grp_fu_1162_p_din0,
        grp_fu_1162_p_din1,
        grp_fu_1162_p_dout0,
        grp_fu_1162_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] y;
input  [31:0] inputWidth;
input  [31:0] inputHeight;
input  [11:0] trunc_ln;
input  [95:0] mul_ln19_3;
output  [11:0] row_buffer_2_address0;
output   row_buffer_2_ce0;
output   row_buffer_2_we0;
output  [31:0] row_buffer_2_d0;
output  [11:0] row_buffer_1_address0;
output   row_buffer_1_ce0;
output   row_buffer_1_we0;
output  [31:0] row_buffer_1_d0;
output  [11:0] row_buffer_address0;
output   row_buffer_ce0;
output   row_buffer_we0;
output  [31:0] row_buffer_d0;
input  [63:0] mul_ln19_2;
input  [0:0] icmp_ln75_1;
input  [63:0] input_r;
output  [31:0] grp_fu_484_p_din0;
output  [31:0] grp_fu_484_p_din1;
input  [31:0] grp_fu_484_p_dout0;
output   grp_fu_484_p_ce;
output  [31:0] grp_fu_512_p_din0;
output  [31:0] grp_fu_512_p_din1;
input  [31:0] grp_fu_512_p_dout0;
output   grp_fu_512_p_ce;
output  [31:0] grp_fu_1158_p_din0;
output  [31:0] grp_fu_1158_p_din1;
input  [31:0] grp_fu_1158_p_dout0;
output   grp_fu_1158_p_ce;
output  [31:0] grp_fu_1162_p_din0;
output  [31:0] grp_fu_1162_p_din1;
input  [31:0] grp_fu_1162_p_dout0;
output   grp_fu_1162_p_ce;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg row_buffer_2_ce0;
reg row_buffer_2_we0;
reg row_buffer_1_ce0;
reg row_buffer_1_we0;
reg row_buffer_ce0;
reg row_buffer_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg   [0:0] or_ln73_reg_690;
reg   [0:0] or_ln73_reg_690_pp0_iter7_reg;
reg    ap_block_state9_io;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
reg    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln70_fu_258_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AR;
reg   [0:0] first_iter_1_reg_214;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln70_reg_653;
reg   [0:0] icmp_ln70_reg_653_pp0_iter2_reg;
reg   [0:0] icmp_ln70_reg_653_pp0_iter3_reg;
reg   [0:0] icmp_ln70_reg_653_pp0_iter4_reg;
reg   [0:0] icmp_ln70_reg_653_pp0_iter5_reg;
reg   [0:0] icmp_ln70_reg_653_pp0_iter6_reg;
wire   [0:0] icmp_ln73_fu_269_p2;
reg   [0:0] icmp_ln73_reg_657;
reg   [0:0] icmp_ln73_reg_657_pp0_iter2_reg;
reg   [0:0] icmp_ln73_reg_657_pp0_iter3_reg;
reg   [0:0] icmp_ln73_reg_657_pp0_iter4_reg;
reg   [0:0] icmp_ln73_reg_657_pp0_iter5_reg;
reg   [0:0] icmp_ln73_reg_657_pp0_iter6_reg;
reg  signed [31:0] iChannel_reg_669;
wire  signed [11:0] trunc_ln73_fu_301_p1;
reg  signed [11:0] trunc_ln73_reg_674;
wire   [0:0] select_ln70_4_fu_325_p3;
reg   [0:0] select_ln70_4_reg_679;
reg   [0:0] select_ln70_4_reg_679_pp0_iter3_reg;
reg   [0:0] select_ln70_4_reg_679_pp0_iter4_reg;
reg   [0:0] select_ln70_4_reg_679_pp0_iter5_reg;
reg   [0:0] select_ln70_4_reg_679_pp0_iter6_reg;
wire  signed [31:0] add_ln73_1_fu_331_p2;
reg  signed [31:0] add_ln73_1_reg_685;
wire   [0:0] or_ln73_fu_337_p2;
reg   [0:0] or_ln73_reg_690_pp0_iter3_reg;
reg   [0:0] or_ln73_reg_690_pp0_iter4_reg;
reg   [0:0] or_ln73_reg_690_pp0_iter5_reg;
reg   [0:0] or_ln73_reg_690_pp0_iter6_reg;
wire  signed [11:0] trunc_ln73_1_fu_356_p1;
reg  signed [11:0] trunc_ln73_1_reg_694;
wire   [11:0] trunc_ln77_fu_368_p1;
reg   [11:0] trunc_ln77_reg_699;
reg   [11:0] trunc_ln77_reg_699_pp0_iter3_reg;
reg   [11:0] trunc_ln77_reg_699_pp0_iter4_reg;
reg   [11:0] trunc_ln77_reg_699_pp0_iter5_reg;
wire  signed [31:0] add_ln70_fu_399_p2;
reg  signed [31:0] add_ln70_reg_704;
reg  signed [31:0] mul_ln73_1_reg_709;
wire  signed [31:0] add_ln70_2_fu_410_p2;
reg  signed [31:0] add_ln70_2_reg_714;
wire   [1:0] trunc_ln70_fu_422_p1;
reg   [1:0] trunc_ln70_reg_719;
reg   [1:0] trunc_ln70_reg_719_pp0_iter5_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter6_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter7_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter8_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter9_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter10_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter11_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter12_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter13_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter14_reg;
reg   [1:0] trunc_ln70_reg_719_pp0_iter15_reg;
reg  signed [31:0] mul_ln73_2_reg_723;
reg   [31:0] mul_ln70_reg_728;
reg   [31:0] mul_ln73_reg_734;
wire   [31:0] grp_fu_439_p2;
reg   [31:0] mul_ln70_1_reg_739;
wire   [31:0] grp_fu_443_p2;
reg   [31:0] mul_ln73_3_reg_745;
wire   [11:0] add_ln77_fu_459_p2;
reg   [11:0] add_ln77_reg_750;
reg   [11:0] add_ln77_reg_750_pp0_iter7_reg;
reg   [11:0] add_ln77_reg_750_pp0_iter8_reg;
reg   [11:0] add_ln77_reg_750_pp0_iter9_reg;
reg   [11:0] add_ln77_reg_750_pp0_iter10_reg;
reg   [11:0] add_ln77_reg_750_pp0_iter11_reg;
reg   [11:0] add_ln77_reg_750_pp0_iter12_reg;
reg   [11:0] add_ln77_reg_750_pp0_iter13_reg;
reg   [11:0] add_ln77_reg_750_pp0_iter14_reg;
reg   [11:0] add_ln77_reg_750_pp0_iter15_reg;
reg   [61:0] sext_ln75_mid2_v_reg_755;
reg   [31:0] gmem_addr_1_read_reg_770;
reg    ap_condition_exit_pp0_iter7_stage0;
reg   [0:0] ap_phi_mux_first_iter_1_phi_fu_219_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln77_fu_554_p1;
wire  signed [63:0] sext_ln73_fu_538_p1;
reg   [31:0] x_fu_96;
wire   [31:0] add_ln75_fu_372_p2;
reg   [31:0] iChannel_1_fu_100;
wire   [31:0] select_ln73_3_fu_360_p3;
reg   [63:0] indvar_flatten65_fu_104;
wire   [63:0] select_ln73_4_fu_280_p3;
reg   [31:0] cy_fu_108;
wire   [31:0] select_ln70_1_fu_415_p3;
reg   [95:0] indvar_flatten104_fu_112;
wire   [95:0] add_ln70_3_fu_263_p2;
wire   [63:0] add_ln73_4_fu_274_p2;
wire  signed [31:0] trunc_ln73_fu_301_p0;
wire  signed [31:0] select_ln70_fu_308_p2;
wire  signed [31:0] icmp_ln75_fu_320_p1;
wire   [0:0] icmp_ln75_fu_320_p2;
wire   [31:0] select_ln70_fu_308_p3;
wire   [0:0] or_ln70_fu_315_p2;
wire   [0:0] or_ln73_1_fu_343_p2;
wire   [31:0] select_ln73_fu_348_p3;
wire   [31:0] add_ln70_1_fu_404_p2;
wire  signed [11:0] grp_fu_560_p2;
wire  signed [11:0] grp_fu_565_p2;
wire   [11:0] select_ln70_3_fu_447_p3;
wire   [11:0] select_ln73_1_fu_453_p3;
wire   [32:0] zext_ln73_1_fu_467_p1;
wire   [32:0] zext_ln73_fu_464_p1;
wire   [31:0] select_ln70_2_fu_476_p3;
wire   [32:0] zext_ln73_2_fu_485_p1;
wire   [32:0] zext_ln70_fu_481_p1;
wire   [32:0] zext_ln73_3_fu_494_p1;
wire   [32:0] add_ln73_fu_470_p2;
wire   [32:0] add_ln73_2_fu_488_p2;
wire   [32:0] select_ln70_5_fu_497_p3;
wire   [32:0] select_ln73_2_fu_504_p3;
wire   [34:0] sext_ln75_mid2_v_v_v_v_v_fu_511_p3;
wire   [63:0] zext_ln73_4_fu_519_p1;
wire   [63:0] add_ln73_3_fu_523_p2;
reg    grp_fu_388_ce;
reg    grp_fu_392_ce;
reg    grp_fu_431_ce;
reg    grp_fu_435_ce;
reg    grp_fu_439_ce;
reg    grp_fu_443_ce;
reg    grp_fu_560_ce;
reg    grp_fu_565_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Conv2D_HW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln70_2_reg_714),
    .din1(inputWidth),
    .ce(grp_fu_439_ce),
    .dout(grp_fu_439_p2)
);

Conv2D_HW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln73_2_reg_723),
    .din1(inputHeight),
    .ce(grp_fu_443_ce),
    .dout(grp_fu_443_p2)
);

Conv2D_HW_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln73_reg_674),
    .din1(trunc_ln),
    .ce(grp_fu_560_ce),
    .dout(grp_fu_560_p2)
);

Conv2D_HW_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln73_1_reg_694),
    .din1(trunc_ln),
    .ce(grp_fu_565_ce),
    .dout(grp_fu_565_p2)
);

Conv2D_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter7_stage0)) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cy_fu_108 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln70_reg_653_pp0_iter3_reg == 1'd0))) begin
            cy_fu_108 <= select_ln70_1_fu_415_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln70_reg_653_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_1_reg_214 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_1_reg_214 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iChannel_1_fu_100 <= 32'd0;
        end else if (((icmp_ln70_reg_653 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            iChannel_1_fu_100 <= select_ln73_3_fu_360_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten104_fu_112 <= 96'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln70_fu_258_p2 == 1'd0))) begin
            indvar_flatten104_fu_112 <= add_ln70_3_fu_263_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten65_fu_104 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln70_fu_258_p2 == 1'd0))) begin
            indvar_flatten65_fu_104 <= select_ln73_4_fu_280_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_fu_96 <= 32'd0;
        end else if (((icmp_ln70_reg_653 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            x_fu_96 <= add_ln75_fu_372_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_653_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln70_2_reg_714 <= add_ln70_2_fu_410_p2;
        trunc_ln70_reg_719 <= trunc_ln70_fu_422_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln70_reg_704 <= add_ln70_fu_399_p2;
        add_ln77_reg_750_pp0_iter10_reg <= add_ln77_reg_750_pp0_iter9_reg;
        add_ln77_reg_750_pp0_iter11_reg <= add_ln77_reg_750_pp0_iter10_reg;
        add_ln77_reg_750_pp0_iter12_reg <= add_ln77_reg_750_pp0_iter11_reg;
        add_ln77_reg_750_pp0_iter13_reg <= add_ln77_reg_750_pp0_iter12_reg;
        add_ln77_reg_750_pp0_iter14_reg <= add_ln77_reg_750_pp0_iter13_reg;
        add_ln77_reg_750_pp0_iter15_reg <= add_ln77_reg_750_pp0_iter14_reg;
        add_ln77_reg_750_pp0_iter7_reg <= add_ln77_reg_750;
        add_ln77_reg_750_pp0_iter8_reg <= add_ln77_reg_750_pp0_iter7_reg;
        add_ln77_reg_750_pp0_iter9_reg <= add_ln77_reg_750_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        gmem_addr_1_read_reg_770 <= m_axi_gmem_RDATA;
        iChannel_reg_669 <= iChannel_1_fu_100;
        icmp_ln70_reg_653_pp0_iter2_reg <= icmp_ln70_reg_653;
        icmp_ln70_reg_653_pp0_iter3_reg <= icmp_ln70_reg_653_pp0_iter2_reg;
        icmp_ln70_reg_653_pp0_iter4_reg <= icmp_ln70_reg_653_pp0_iter3_reg;
        icmp_ln70_reg_653_pp0_iter5_reg <= icmp_ln70_reg_653_pp0_iter4_reg;
        icmp_ln70_reg_653_pp0_iter6_reg <= icmp_ln70_reg_653_pp0_iter5_reg;
        icmp_ln73_reg_657_pp0_iter2_reg <= icmp_ln73_reg_657;
        icmp_ln73_reg_657_pp0_iter3_reg <= icmp_ln73_reg_657_pp0_iter2_reg;
        icmp_ln73_reg_657_pp0_iter4_reg <= icmp_ln73_reg_657_pp0_iter3_reg;
        icmp_ln73_reg_657_pp0_iter5_reg <= icmp_ln73_reg_657_pp0_iter4_reg;
        icmp_ln73_reg_657_pp0_iter6_reg <= icmp_ln73_reg_657_pp0_iter5_reg;
        mul_ln70_reg_728 <= grp_fu_1158_p_dout0;
        or_ln73_reg_690_pp0_iter3_reg <= or_ln73_reg_690;
        or_ln73_reg_690_pp0_iter4_reg <= or_ln73_reg_690_pp0_iter3_reg;
        or_ln73_reg_690_pp0_iter5_reg <= or_ln73_reg_690_pp0_iter4_reg;
        or_ln73_reg_690_pp0_iter6_reg <= or_ln73_reg_690_pp0_iter5_reg;
        or_ln73_reg_690_pp0_iter7_reg <= or_ln73_reg_690_pp0_iter6_reg;
        select_ln70_4_reg_679_pp0_iter3_reg <= select_ln70_4_reg_679;
        select_ln70_4_reg_679_pp0_iter4_reg <= select_ln70_4_reg_679_pp0_iter3_reg;
        select_ln70_4_reg_679_pp0_iter5_reg <= select_ln70_4_reg_679_pp0_iter4_reg;
        select_ln70_4_reg_679_pp0_iter6_reg <= select_ln70_4_reg_679_pp0_iter5_reg;
        trunc_ln70_reg_719_pp0_iter10_reg <= trunc_ln70_reg_719_pp0_iter9_reg;
        trunc_ln70_reg_719_pp0_iter11_reg <= trunc_ln70_reg_719_pp0_iter10_reg;
        trunc_ln70_reg_719_pp0_iter12_reg <= trunc_ln70_reg_719_pp0_iter11_reg;
        trunc_ln70_reg_719_pp0_iter13_reg <= trunc_ln70_reg_719_pp0_iter12_reg;
        trunc_ln70_reg_719_pp0_iter14_reg <= trunc_ln70_reg_719_pp0_iter13_reg;
        trunc_ln70_reg_719_pp0_iter15_reg <= trunc_ln70_reg_719_pp0_iter14_reg;
        trunc_ln70_reg_719_pp0_iter5_reg <= trunc_ln70_reg_719;
        trunc_ln70_reg_719_pp0_iter6_reg <= trunc_ln70_reg_719_pp0_iter5_reg;
        trunc_ln70_reg_719_pp0_iter7_reg <= trunc_ln70_reg_719_pp0_iter6_reg;
        trunc_ln70_reg_719_pp0_iter8_reg <= trunc_ln70_reg_719_pp0_iter7_reg;
        trunc_ln70_reg_719_pp0_iter9_reg <= trunc_ln70_reg_719_pp0_iter8_reg;
        trunc_ln77_reg_699_pp0_iter3_reg <= trunc_ln77_reg_699;
        trunc_ln77_reg_699_pp0_iter4_reg <= trunc_ln77_reg_699_pp0_iter3_reg;
        trunc_ln77_reg_699_pp0_iter5_reg <= trunc_ln77_reg_699_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_653 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln73_1_reg_685 <= add_ln73_1_fu_331_p2;
        or_ln73_reg_690 <= or_ln73_fu_337_p2;
        select_ln70_4_reg_679 <= select_ln70_4_fu_325_p3;
        trunc_ln73_1_reg_694 <= trunc_ln73_1_fu_356_p1;
        trunc_ln77_reg_699 <= trunc_ln77_fu_368_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_653_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln77_reg_750 <= add_ln77_fu_459_p2;
        mul_ln70_1_reg_739 <= grp_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln70_reg_653 <= icmp_ln70_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_fu_258_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln73_reg_657 <= icmp_ln73_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln70_4_reg_679_pp0_iter3_reg == 1'd0) & (icmp_ln73_reg_657_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln73_1_reg_709 <= grp_fu_484_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln70_4_reg_679_pp0_iter3_reg == 1'd1) & (icmp_ln70_reg_653_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln73_2_reg_723 <= grp_fu_512_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln70_4_reg_679_pp0_iter5_reg == 1'd1) & (icmp_ln70_reg_653_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln73_3_reg_745 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln70_4_reg_679_pp0_iter5_reg == 1'd0) & (icmp_ln73_reg_657_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln73_reg_734 <= grp_fu_1162_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_653_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sext_ln75_mid2_v_reg_755 <= {{add_ln73_3_fu_523_p2[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_657 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln73_reg_674 <= trunc_ln73_fu_301_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_fu_258_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln70_reg_653_pp0_iter6_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter7_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter7_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln70_reg_653_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_1_phi_fu_219_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_1_phi_fu_219_p4 = first_iter_1_reg_214;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln73_reg_690_pp0_iter7_reg == 1'd1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_388_ce = 1'b1;
    end else begin
        grp_fu_388_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_392_ce = 1'b1;
    end else begin
        grp_fu_392_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_431_ce = 1'b1;
    end else begin
        grp_fu_431_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_435_ce = 1'b1;
    end else begin
        grp_fu_435_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_439_ce = 1'b1;
    end else begin
        grp_fu_439_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_443_ce = 1'b1;
    end else begin
        grp_fu_443_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_560_ce = 1'b1;
    end else begin
        grp_fu_560_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_565_ce = 1'b1;
    end else begin
        grp_fu_565_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln73_reg_690_pp0_iter7_reg == 1'd1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buffer_1_ce0 = 1'b1;
    end else begin
        row_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (trunc_ln70_reg_719_pp0_iter15_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buffer_1_we0 = 1'b1;
    end else begin
        row_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buffer_2_ce0 = 1'b1;
    end else begin
        row_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln70_reg_719_pp0_iter15_reg == 2'd0) & ~(trunc_ln70_reg_719_pp0_iter15_reg == 2'd1) & (ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buffer_2_we0 = 1'b1;
    end else begin
        row_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buffer_ce0 = 1'b1;
    end else begin
        row_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (trunc_ln70_reg_719_pp0_iter15_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buffer_we0 = 1'b1;
    end else begin
        row_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln70_1_fu_404_p2 = (cy_fu_108 + 32'd1);

assign add_ln70_2_fu_410_p2 = (add_ln70_1_fu_404_p2 + y);

assign add_ln70_3_fu_263_p2 = (indvar_flatten104_fu_112 + 96'd1);

assign add_ln70_fu_399_p2 = (cy_fu_108 + y);

assign add_ln73_1_fu_331_p2 = (select_ln70_fu_308_p3 + 32'd1);

assign add_ln73_2_fu_488_p2 = (zext_ln73_2_fu_485_p1 + zext_ln70_fu_481_p1);

assign add_ln73_3_fu_523_p2 = (zext_ln73_4_fu_519_p1 + input_r);

assign add_ln73_4_fu_274_p2 = (indvar_flatten65_fu_104 + 64'd1);

assign add_ln73_fu_470_p2 = (zext_ln73_1_fu_467_p1 + zext_ln73_fu_464_p1);

assign add_ln75_fu_372_p2 = (select_ln73_fu_348_p3 + 32'd1);

assign add_ln77_fu_459_p2 = (trunc_ln77_reg_699_pp0_iter5_reg + select_ln73_1_fu_453_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter15 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter15 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage0_iter15 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((or_ln73_reg_690_pp0_iter7_reg == 1'd1) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_1158_p_ce = grp_fu_431_ce;

assign grp_fu_1158_p_din0 = add_ln70_reg_704;

assign grp_fu_1158_p_din1 = inputWidth;

assign grp_fu_1162_p_ce = grp_fu_435_ce;

assign grp_fu_1162_p_din0 = mul_ln73_1_reg_709;

assign grp_fu_1162_p_din1 = inputHeight;

assign grp_fu_484_p_ce = grp_fu_388_ce;

assign grp_fu_484_p_din0 = iChannel_reg_669;

assign grp_fu_484_p_din1 = inputWidth;

assign grp_fu_512_p_ce = grp_fu_392_ce;

assign grp_fu_512_p_din0 = add_ln73_1_reg_685;

assign grp_fu_512_p_din1 = inputWidth;

assign icmp_ln70_fu_258_p2 = ((indvar_flatten104_fu_112 == mul_ln19_3) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_269_p2 = ((indvar_flatten65_fu_104 == mul_ln19_2) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_320_p1 = inputWidth;

assign icmp_ln75_fu_320_p2 = ((x_fu_96 == icmp_ln75_fu_320_p1) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = sext_ln73_fu_538_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = inputWidth;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln70_fu_315_p2 = (icmp_ln73_reg_657 | ap_phi_mux_first_iter_1_phi_fu_219_p4);

assign or_ln73_1_fu_343_p2 = (select_ln70_4_fu_325_p3 | icmp_ln73_reg_657);

assign or_ln73_fu_337_p2 = (select_ln70_4_fu_325_p3 | or_ln70_fu_315_p2);

assign row_buffer_1_address0 = zext_ln77_fu_554_p1;

assign row_buffer_1_d0 = gmem_addr_1_read_reg_770;

assign row_buffer_2_address0 = zext_ln77_fu_554_p1;

assign row_buffer_2_d0 = gmem_addr_1_read_reg_770;

assign row_buffer_address0 = zext_ln77_fu_554_p1;

assign row_buffer_d0 = gmem_addr_1_read_reg_770;

assign select_ln70_1_fu_415_p3 = ((icmp_ln73_reg_657_pp0_iter3_reg[0:0] == 1'b1) ? add_ln70_1_fu_404_p2 : cy_fu_108);

assign select_ln70_2_fu_476_p3 = ((icmp_ln73_reg_657_pp0_iter6_reg[0:0] == 1'b1) ? mul_ln70_1_reg_739 : mul_ln70_reg_728);

assign select_ln70_3_fu_447_p3 = ((icmp_ln73_reg_657_pp0_iter5_reg[0:0] == 1'b1) ? 12'd0 : grp_fu_560_p2);

assign select_ln70_4_fu_325_p3 = ((icmp_ln73_reg_657[0:0] == 1'b1) ? icmp_ln75_1 : icmp_ln75_fu_320_p2);

assign select_ln70_5_fu_497_p3 = ((icmp_ln73_reg_657_pp0_iter6_reg[0:0] == 1'b1) ? zext_ln73_3_fu_494_p1 : add_ln73_fu_470_p2);

assign select_ln70_fu_308_p2 = iChannel_1_fu_100;

assign select_ln70_fu_308_p3 = ((icmp_ln73_reg_657[0:0] == 1'b1) ? 32'd0 : select_ln70_fu_308_p2);

assign select_ln73_1_fu_453_p3 = ((select_ln70_4_reg_679_pp0_iter5_reg[0:0] == 1'b1) ? grp_fu_565_p2 : select_ln70_3_fu_447_p3);

assign select_ln73_2_fu_504_p3 = ((select_ln70_4_reg_679_pp0_iter6_reg[0:0] == 1'b1) ? add_ln73_2_fu_488_p2 : select_ln70_5_fu_497_p3);

assign select_ln73_3_fu_360_p3 = ((select_ln70_4_fu_325_p3[0:0] == 1'b1) ? add_ln73_1_fu_331_p2 : select_ln70_fu_308_p3);

assign select_ln73_4_fu_280_p3 = ((icmp_ln73_fu_269_p2[0:0] == 1'b1) ? 64'd1 : add_ln73_4_fu_274_p2);

assign select_ln73_fu_348_p3 = ((or_ln73_1_fu_343_p2[0:0] == 1'b1) ? 32'd0 : x_fu_96);

assign sext_ln73_fu_538_p1 = $signed(sext_ln75_mid2_v_reg_755);

assign sext_ln75_mid2_v_v_v_v_v_fu_511_p3 = {{select_ln73_2_fu_504_p3}, {2'd0}};

assign trunc_ln70_fu_422_p1 = select_ln70_1_fu_415_p3[1:0];

assign trunc_ln73_1_fu_356_p1 = add_ln73_1_fu_331_p2[11:0];

assign trunc_ln73_fu_301_p0 = iChannel_1_fu_100;

assign trunc_ln73_fu_301_p1 = trunc_ln73_fu_301_p0[11:0];

assign trunc_ln77_fu_368_p1 = select_ln73_fu_348_p3[11:0];

assign zext_ln70_fu_481_p1 = select_ln70_2_fu_476_p3;

assign zext_ln73_1_fu_467_p1 = mul_ln73_reg_734;

assign zext_ln73_2_fu_485_p1 = mul_ln73_3_reg_745;

assign zext_ln73_3_fu_494_p1 = mul_ln70_1_reg_739;

assign zext_ln73_4_fu_519_p1 = sext_ln75_mid2_v_v_v_v_v_fu_511_p3;

assign zext_ln73_fu_464_p1 = mul_ln70_reg_728;

assign zext_ln77_fu_554_p1 = add_ln77_reg_750_pp0_iter15_reg;

endmodule //Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_75_9
