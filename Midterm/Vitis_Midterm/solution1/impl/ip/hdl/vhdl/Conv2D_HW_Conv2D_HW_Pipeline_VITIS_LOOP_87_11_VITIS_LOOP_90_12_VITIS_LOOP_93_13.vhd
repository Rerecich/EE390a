-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_87_11_VITIS_LOOP_90_12_VITIS_LOOP_93_13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    acc_3_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_0_32_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln19_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    mul_ln19 : IN STD_LOGIC_VECTOR (63 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (11 downto 0);
    convWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln51_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    coeff_cache_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_ce0 : OUT STD_LOGIC;
    coeff_cache_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_ce1 : OUT STD_LOGIC;
    coeff_cache_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_address2 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_ce2 : OUT STD_LOGIC;
    coeff_cache_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_address3 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_ce3 : OUT STD_LOGIC;
    coeff_cache_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_1_ce0 : OUT STD_LOGIC;
    coeff_cache_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_1_ce1 : OUT STD_LOGIC;
    coeff_cache_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_1_address2 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_1_ce2 : OUT STD_LOGIC;
    coeff_cache_1_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_1_address3 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_1_ce3 : OUT STD_LOGIC;
    coeff_cache_1_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_2_ce0 : OUT STD_LOGIC;
    coeff_cache_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_2_ce1 : OUT STD_LOGIC;
    coeff_cache_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_2_address2 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_2_ce2 : OUT STD_LOGIC;
    coeff_cache_2_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_2_address3 : OUT STD_LOGIC_VECTOR (11 downto 0);
    coeff_cache_2_ce3 : OUT STD_LOGIC;
    coeff_cache_2_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_cast : IN STD_LOGIC_VECTOR (11 downto 0);
    row_buffer_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    row_buffer_ce0 : OUT STD_LOGIC;
    row_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    row_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    row_buffer_1_ce0 : OUT STD_LOGIC;
    row_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    row_buffer_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    row_buffer_2_ce0 : OUT STD_LOGIC;
    row_buffer_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln99 : IN STD_LOGIC_VECTOR (0 downto 0);
    icmp_ln99_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    icmp_ln99_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    acc_3_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_3_7_out_ap_vld : OUT STD_LOGIC;
    acc_2_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_2_7_out_ap_vld : OUT STD_LOGIC;
    acc_1_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_1_7_out_ap_vld : OUT STD_LOGIC;
    acc_0_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_0_7_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_87_11_VITIS_LOOP_90_12_VITIS_LOOP_93_13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv12_300 : STD_LOGIC_VECTOR (11 downto 0) := "001100000000";
    constant ap_const_lv12_600 : STD_LOGIC_VECTOR (11 downto 0) := "011000000000";
    constant ap_const_lv12_900 : STD_LOGIC_VECTOR (11 downto 0) := "100100000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln87_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln99_2_read_reg_1190 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_1_read_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_read_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_fu_497_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln101_reg_1235 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln87_reg_1243 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1243_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1243_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1243_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1243_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1243_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1247 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1247_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_1_fu_544_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln101_1_reg_1259 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln101_1_reg_1259_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln101_3_fu_562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln101_2_fu_574_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln101_2_reg_1272 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_4_fu_636_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_4_reg_1280 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_5_fu_642_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_5_reg_1285 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_6_fu_648_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_6_reg_1290 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln87_7_fu_686_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_7_reg_1295 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln101_14_fu_725_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_14_reg_1302 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_15_fu_736_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_15_reg_1307 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_16_fu_747_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_16_reg_1312 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_1_fu_757_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln90_1_reg_1317 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln90_1_reg_1317_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln90_1_reg_1317_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln90_2_fu_765_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_2_reg_1322 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln94_1_fu_785_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln94_1_fu_785_p2 : signal is "no";
    signal add_ln94_1_reg_1327 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_67_fu_790_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_67_reg_1332 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_67_reg_1332_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln93_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln93_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_fu_893_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_reg_1420_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_1_fu_904_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_1_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_1_reg_1425_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_2_fu_915_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_2_reg_1430 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_2_reg_1430_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_3_fu_926_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_3_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_3_reg_1435_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelValue_fu_937_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelValue_reg_1440 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelValue_cast_fu_948_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln6_reg_1473 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln15_1_reg_1478 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln15_2_reg_1483 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln15_3_reg_1488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln101_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln101_1_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_2_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_3_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cx_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_cx_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal acc_0_1_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_0_fu_1039_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_1_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_2_fu_1049_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_2_fu_1061_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_2_fu_1073_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cy_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln90_6_fu_773_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten123_fu_126 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln90_7_fu_586_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal iChannel_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln87_1_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten195_fu_134 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln87_1_fu_508_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln87_fu_481_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_489_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln101_fu_485_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln87_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln87_1_fu_523_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_536_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln101_2_fu_532_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln87_2_fu_558_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_566_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln90_1_fu_580_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln101_1_fu_627_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_fu_612_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_1_fu_617_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_2_fu_622_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_664_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln101_3_fu_631_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln93_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_fu_657_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln90_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln90_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln101_4_fu_711_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_10_fu_720_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_11_fu_731_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_12_fu_742_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_66_fu_753_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln87_2_fu_668_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln101_13_fu_715_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln87_3_fu_675_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_fu_703_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln94_fu_781_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_7_fu_805_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_8_fu_810_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln101_9_fu_815_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln87_4_fu_820_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_3_fu_844_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln87_5_fu_826_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_4_fu_857_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln87_6_fu_832_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_5_fu_870_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln94_fu_887_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1116_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_954_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_963_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_972_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_981_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_954_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_963_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_972_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_981_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal acc_1_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_1_fu_1068_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Conv2D_HW_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2D_HW_mul_32s_32s_52_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component Conv2D_HW_mac_muladd_12s_12s_12ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Conv2D_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_32_1_1_U47 : component Conv2D_HW_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => coeff_cache_q3,
        din1 => coeff_cache_1_q3,
        din2 => coeff_cache_2_q3,
        din3 => empty_67_reg_1332_pp0_iter3_reg,
        dout => filterValue_fu_893_p5);

    mux_32_32_1_1_U48 : component Conv2D_HW_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => coeff_cache_q2,
        din1 => coeff_cache_1_q2,
        din2 => coeff_cache_2_q2,
        din3 => empty_67_reg_1332_pp0_iter3_reg,
        dout => filterValue_1_fu_904_p5);

    mux_32_32_1_1_U49 : component Conv2D_HW_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => coeff_cache_q1,
        din1 => coeff_cache_1_q1,
        din2 => coeff_cache_2_q1,
        din3 => empty_67_reg_1332_pp0_iter3_reg,
        dout => filterValue_2_fu_915_p5);

    mux_32_32_1_1_U50 : component Conv2D_HW_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => coeff_cache_q0,
        din1 => coeff_cache_1_q0,
        din2 => coeff_cache_2_q0,
        din3 => empty_67_reg_1332_pp0_iter3_reg,
        dout => filterValue_3_fu_926_p5);

    mux_32_32_1_1_U51 : component Conv2D_HW_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => row_buffer_q0,
        din1 => row_buffer_1_q0,
        din2 => row_buffer_2_q0,
        din3 => select_ln90_1_reg_1317_pp0_iter4_reg,
        dout => pixelValue_fu_937_p5);

    mul_32s_32s_52_2_1_U52 : component Conv2D_HW_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filterValue_reg_1420_pp0_iter5_reg,
        din1 => grp_fu_954_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_954_p2);

    mul_32s_32s_52_2_1_U53 : component Conv2D_HW_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filterValue_1_reg_1425_pp0_iter5_reg,
        din1 => grp_fu_963_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_963_p2);

    mul_32s_32s_52_2_1_U54 : component Conv2D_HW_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filterValue_2_reg_1430_pp0_iter5_reg,
        din1 => grp_fu_972_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_972_p2);

    mul_32s_32s_52_2_1_U55 : component Conv2D_HW_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filterValue_3_reg_1435_pp0_iter5_reg,
        din1 => grp_fu_981_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_981_p2);

    mac_muladd_12s_12s_12ns_12_4_1_U56 : component Conv2D_HW_mac_muladd_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln101_3_fu_562_p1,
        din1 => trunc_ln,
        din2 => add_ln94_1_reg_1327,
        ce => ap_const_logic_1,
        dout => grp_fu_1116_p3);

    flow_control_loop_pipe_sequential_init_U : component Conv2D_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    acc_0_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    acc_0_1_fu_106 <= acc_0_32_reload;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    acc_0_1_fu_106 <= acc_0_fu_1039_p2;
                end if;
            end if; 
        end if;
    end process;

    acc_1_1_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    acc_1_1_fu_110 <= acc_1_3_reload;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    acc_1_1_fu_110 <= acc_1_2_fu_1049_p3;
                end if;
            end if; 
        end if;
    end process;

    acc_2_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    acc_2_1_fu_114 <= acc_2_3_reload;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    acc_2_1_fu_114 <= acc_2_2_fu_1061_p3;
                end if;
            end if; 
        end if;
    end process;

    acc_3_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    acc_3_fu_118 <= acc_3_3_reload;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    acc_3_fu_118 <= acc_3_2_fu_1073_p3;
                end if;
            end if; 
        end if;
    end process;

    cx_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cx_fu_102 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    cx_fu_102 <= add_ln93_reg_1340;
                end if;
            end if; 
        end if;
    end process;

    cy_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cy_fu_122 <= ap_const_lv32_0;
                elsif (((icmp_ln87_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    cy_fu_122 <= select_ln90_6_fu_773_p3;
                end if;
            end if; 
        end if;
    end process;

    iChannel_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    iChannel_fu_130 <= ap_const_lv32_0;
                elsif (((icmp_ln87_fu_503_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    iChannel_fu_130 <= select_ln87_1_fu_550_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten123_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten123_fu_126 <= ap_const_lv64_0;
                elsif (((icmp_ln87_fu_503_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten123_fu_126 <= select_ln90_7_fu_586_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten195_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten195_fu_134 <= ap_const_lv96_0;
                elsif (((icmp_ln87_fu_503_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten195_fu_134 <= add_ln87_1_fu_508_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_1243 = ap_const_lv1_0) and (icmp_ln99_read_reg_1200 = ap_const_lv1_1))) then
                add_ln101_14_reg_1302 <= add_ln101_14_fu_725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_1243 = ap_const_lv1_0) and (icmp_ln99_1_read_reg_1195 = ap_const_lv1_1))) then
                add_ln101_15_reg_1307 <= add_ln101_15_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_1243 = ap_const_lv1_0) and (icmp_ln99_2_read_reg_1190 = ap_const_lv1_1))) then
                add_ln101_16_reg_1312 <= add_ln101_16_fu_747_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln90_reg_1247 = ap_const_lv1_0) and (icmp_ln99_read_reg_1200 = ap_const_lv1_1))) then
                add_ln101_4_reg_1280 <= add_ln101_4_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln90_reg_1247 = ap_const_lv1_0) and (icmp_ln99_1_read_reg_1195 = ap_const_lv1_1))) then
                add_ln101_5_reg_1285 <= add_ln101_5_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln90_reg_1247 = ap_const_lv1_0) and (icmp_ln99_2_read_reg_1190 = ap_const_lv1_1))) then
                add_ln101_6_reg_1290 <= add_ln101_6_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_1243 = ap_const_lv1_0))) then
                add_ln93_reg_1340 <= add_ln93_fu_794_p2;
                add_ln94_1_reg_1327 <= add_ln94_1_fu_785_p2;
                empty_67_reg_1332 <= empty_67_fu_790_p1;
                select_ln87_7_reg_1295 <= select_ln87_7_fu_686_p3;
                select_ln90_1_reg_1317 <= select_ln90_1_fu_757_p3;
                select_ln90_2_reg_1322 <= select_ln90_2_fu_765_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln87_reg_1243 <= icmp_ln87_fu_503_p2;
                sub_ln101_reg_1235 <= sub_ln101_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                empty_67_reg_1332_pp0_iter3_reg <= empty_67_reg_1332;
                filterValue_1_reg_1425_pp0_iter5_reg <= filterValue_1_reg_1425;
                filterValue_2_reg_1430_pp0_iter5_reg <= filterValue_2_reg_1430;
                filterValue_3_reg_1435_pp0_iter5_reg <= filterValue_3_reg_1435;
                filterValue_reg_1420 <= filterValue_fu_893_p5;
                filterValue_reg_1420_pp0_iter5_reg <= filterValue_reg_1420;
                icmp_ln87_reg_1243_pp0_iter2_reg <= icmp_ln87_reg_1243;
                icmp_ln87_reg_1243_pp0_iter3_reg <= icmp_ln87_reg_1243_pp0_iter2_reg;
                icmp_ln87_reg_1243_pp0_iter4_reg <= icmp_ln87_reg_1243_pp0_iter3_reg;
                icmp_ln87_reg_1243_pp0_iter5_reg <= icmp_ln87_reg_1243_pp0_iter4_reg;
                icmp_ln87_reg_1243_pp0_iter6_reg <= icmp_ln87_reg_1243_pp0_iter5_reg;
                icmp_ln90_reg_1247_pp0_iter2_reg <= icmp_ln90_reg_1247;
                pixelValue_reg_1440 <= pixelValue_fu_937_p5;
                select_ln90_1_reg_1317_pp0_iter3_reg <= select_ln90_1_reg_1317;
                select_ln90_1_reg_1317_pp0_iter4_reg <= select_ln90_1_reg_1317_pp0_iter3_reg;
                sub_ln101_1_reg_1259_pp0_iter2_reg <= sub_ln101_1_reg_1259;
                trunc_ln6_reg_1473 <= grp_fu_954_p2(51 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln99_read_reg_1200 = ap_const_lv1_1))) then
                filterValue_1_reg_1425 <= filterValue_1_fu_904_p5;
                trunc_ln15_1_reg_1478 <= grp_fu_963_p2(51 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln99_1_read_reg_1195 = ap_const_lv1_1))) then
                filterValue_2_reg_1430 <= filterValue_2_fu_915_p5;
                trunc_ln15_2_reg_1483 <= grp_fu_972_p2(51 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln99_2_read_reg_1190 = ap_const_lv1_1))) then
                filterValue_3_reg_1435 <= filterValue_3_fu_926_p5;
                trunc_ln15_3_reg_1488 <= grp_fu_981_p2(51 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_503_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln90_reg_1247 <= icmp_ln90_fu_527_p2;
                sub_ln101_1_reg_1259 <= sub_ln101_1_fu_544_p2;
                sub_ln101_2_reg_1272 <= sub_ln101_2_fu_574_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_0_7_out <= acc_0_1_fu_106;

    acc_0_7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1243_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_1243_pp0_iter6_reg = ap_const_lv1_1))) then 
            acc_0_7_out_ap_vld <= ap_const_logic_1;
        else 
            acc_0_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    acc_0_fu_1039_p2 <= std_logic_vector(unsigned(trunc_ln6_reg_1473) + unsigned(acc_0_1_fu_106));
    acc_1_2_fu_1049_p3 <= 
        acc_1_fu_1044_p2 when (icmp_ln99(0) = '1') else 
        acc_1_1_fu_110;
    acc_1_7_out <= acc_1_1_fu_110;

    acc_1_7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1243_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_1243_pp0_iter6_reg = ap_const_lv1_1))) then 
            acc_1_7_out_ap_vld <= ap_const_logic_1;
        else 
            acc_1_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    acc_1_fu_1044_p2 <= std_logic_vector(unsigned(trunc_ln15_1_reg_1478) + unsigned(acc_1_1_fu_110));
    acc_2_2_fu_1061_p3 <= 
        acc_2_fu_1056_p2 when (icmp_ln99_1(0) = '1') else 
        acc_2_1_fu_114;
    acc_2_7_out <= acc_2_1_fu_114;

    acc_2_7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1243_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_1243_pp0_iter6_reg = ap_const_lv1_1))) then 
            acc_2_7_out_ap_vld <= ap_const_logic_1;
        else 
            acc_2_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    acc_2_fu_1056_p2 <= std_logic_vector(unsigned(trunc_ln15_2_reg_1483) + unsigned(acc_2_1_fu_114));
    acc_3_1_fu_1068_p2 <= std_logic_vector(unsigned(trunc_ln15_3_reg_1488) + unsigned(acc_3_fu_118));
    acc_3_2_fu_1073_p3 <= 
        acc_3_1_fu_1068_p2 when (icmp_ln99_2(0) = '1') else 
        acc_3_fu_118;
    acc_3_7_out <= acc_3_fu_118;

    acc_3_7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1243_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_1243_pp0_iter6_reg = ap_const_lv1_1))) then 
            acc_3_7_out_ap_vld <= ap_const_logic_1;
        else 
            acc_3_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln101_10_fu_720_p2 <= std_logic_vector(unsigned(sub_ln101_2_reg_1272) + unsigned(ap_const_lv12_300));
    add_ln101_11_fu_731_p2 <= std_logic_vector(unsigned(sub_ln101_2_reg_1272) + unsigned(ap_const_lv12_600));
    add_ln101_12_fu_742_p2 <= std_logic_vector(unsigned(sub_ln101_2_reg_1272) + unsigned(ap_const_lv12_900));
    add_ln101_13_fu_715_p2 <= std_logic_vector(unsigned(sub_ln101_2_reg_1272) + unsigned(trunc_ln101_4_fu_711_p1));
    add_ln101_14_fu_725_p2 <= std_logic_vector(unsigned(add_ln101_10_fu_720_p2) + unsigned(trunc_ln101_4_fu_711_p1));
    add_ln101_15_fu_736_p2 <= std_logic_vector(unsigned(add_ln101_11_fu_731_p2) + unsigned(trunc_ln101_4_fu_711_p1));
    add_ln101_16_fu_747_p2 <= std_logic_vector(unsigned(add_ln101_12_fu_742_p2) + unsigned(trunc_ln101_4_fu_711_p1));
    add_ln101_1_fu_617_p2 <= std_logic_vector(unsigned(sub_ln101_reg_1235) + unsigned(ap_const_lv12_600));
    add_ln101_2_fu_622_p2 <= std_logic_vector(unsigned(sub_ln101_reg_1235) + unsigned(ap_const_lv12_900));
    add_ln101_3_fu_631_p2 <= std_logic_vector(unsigned(sub_ln101_reg_1235) + unsigned(trunc_ln101_1_fu_627_p1));
    add_ln101_4_fu_636_p2 <= std_logic_vector(unsigned(add_ln101_fu_612_p2) + unsigned(trunc_ln101_1_fu_627_p1));
    add_ln101_5_fu_642_p2 <= std_logic_vector(unsigned(add_ln101_1_fu_617_p2) + unsigned(trunc_ln101_1_fu_627_p1));
    add_ln101_6_fu_648_p2 <= std_logic_vector(unsigned(add_ln101_2_fu_622_p2) + unsigned(trunc_ln101_1_fu_627_p1));
    add_ln101_7_fu_805_p2 <= std_logic_vector(unsigned(sub_ln101_1_reg_1259_pp0_iter2_reg) + unsigned(ap_const_lv12_300));
    add_ln101_8_fu_810_p2 <= std_logic_vector(unsigned(sub_ln101_1_reg_1259_pp0_iter2_reg) + unsigned(ap_const_lv12_600));
    add_ln101_9_fu_815_p2 <= std_logic_vector(unsigned(sub_ln101_1_reg_1259_pp0_iter2_reg) + unsigned(ap_const_lv12_900));
    add_ln101_fu_612_p2 <= std_logic_vector(unsigned(sub_ln101_reg_1235) + unsigned(ap_const_lv12_300));
    add_ln87_1_fu_508_p2 <= std_logic_vector(unsigned(indvar_flatten195_fu_134) + unsigned(ap_const_lv96_1));
    add_ln87_fu_517_p2 <= std_logic_vector(unsigned(iChannel_fu_130) + unsigned(ap_const_lv32_1));
    add_ln90_1_fu_580_p2 <= std_logic_vector(unsigned(indvar_flatten123_fu_126) + unsigned(ap_const_lv64_1));
    add_ln90_fu_692_p2 <= std_logic_vector(unsigned(select_ln87_fu_657_p3) + unsigned(ap_const_lv32_1));
    add_ln93_fu_794_p2 <= std_logic_vector(unsigned(select_ln90_fu_703_p3) + unsigned(ap_const_lv32_1));
    add_ln94_1_fu_785_p2 <= std_logic_vector(unsigned(x_cast) + unsigned(trunc_ln94_fu_781_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln87_fu_503_p2)
    begin
        if (((icmp_ln87_fu_503_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln87_reg_1243)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln87_reg_1243 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_cx_load_assign_proc : process(ap_enable_reg_pp0_iter3, add_ln93_reg_1340, ap_block_pp0_stage0, cx_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_cx_load <= add_ln93_reg_1340;
        else 
            ap_sig_allocacmp_cx_load <= cx_fu_102;
        end if; 
    end process;

    coeff_cache_1_address0 <= zext_ln101_3_fu_876_p1(12 - 1 downto 0);
    coeff_cache_1_address1 <= zext_ln101_2_fu_863_p1(12 - 1 downto 0);
    coeff_cache_1_address2 <= zext_ln101_1_fu_850_p1(12 - 1 downto 0);
    coeff_cache_1_address3 <= zext_ln101_fu_838_p1(12 - 1 downto 0);

    coeff_cache_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_1_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_cache_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_1_ce1 <= ap_const_logic_1;
        else 
            coeff_cache_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_cache_1_ce2_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_1_ce2 <= ap_const_logic_1;
        else 
            coeff_cache_1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_cache_1_ce3_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_1_ce3 <= ap_const_logic_1;
        else 
            coeff_cache_1_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_2_address0 <= zext_ln101_3_fu_876_p1(12 - 1 downto 0);
    coeff_cache_2_address1 <= zext_ln101_2_fu_863_p1(12 - 1 downto 0);
    coeff_cache_2_address2 <= zext_ln101_1_fu_850_p1(12 - 1 downto 0);
    coeff_cache_2_address3 <= zext_ln101_fu_838_p1(12 - 1 downto 0);

    coeff_cache_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_2_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_cache_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_2_ce1 <= ap_const_logic_1;
        else 
            coeff_cache_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_cache_2_ce2_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_2_ce2 <= ap_const_logic_1;
        else 
            coeff_cache_2_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_cache_2_ce3_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_2_ce3 <= ap_const_logic_1;
        else 
            coeff_cache_2_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_address0 <= zext_ln101_3_fu_876_p1(12 - 1 downto 0);
    coeff_cache_address1 <= zext_ln101_2_fu_863_p1(12 - 1 downto 0);
    coeff_cache_address2 <= zext_ln101_1_fu_850_p1(12 - 1 downto 0);
    coeff_cache_address3 <= zext_ln101_fu_838_p1(12 - 1 downto 0);

    coeff_cache_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_cache_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_ce1 <= ap_const_logic_1;
        else 
            coeff_cache_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_cache_ce2_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_ce2 <= ap_const_logic_1;
        else 
            coeff_cache_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_cache_ce3_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            coeff_cache_ce3 <= ap_const_logic_1;
        else 
            coeff_cache_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    empty_66_fu_753_p1 <= add_ln90_fu_692_p2(2 - 1 downto 0);
    empty_67_fu_790_p1 <= select_ln90_fu_703_p3(2 - 1 downto 0);
    empty_fu_664_p1 <= cy_fu_122(2 - 1 downto 0);
    grp_fu_954_p1 <= pixelValue_cast_fu_948_p1(32 - 1 downto 0);
    grp_fu_963_p1 <= pixelValue_cast_fu_948_p1(32 - 1 downto 0);
    grp_fu_972_p1 <= pixelValue_cast_fu_948_p1(32 - 1 downto 0);
    grp_fu_981_p1 <= pixelValue_cast_fu_948_p1(32 - 1 downto 0);
    icmp_ln87_fu_503_p2 <= "1" when (indvar_flatten195_fu_134 = mul_ln19_1) else "0";
    icmp_ln90_fu_527_p2 <= "1" when (indvar_flatten123_fu_126 = mul_ln19) else "0";
    icmp_ln93_fu_681_p2 <= "1" when (ap_sig_allocacmp_cx_load = convWidth) else "0";
    icmp_ln99_1_read_reg_1195 <= icmp_ln99_1;
    icmp_ln99_2_read_reg_1190 <= icmp_ln99_2;
    icmp_ln99_read_reg_1200 <= icmp_ln99;
    or_ln90_fu_698_p2 <= (select_ln87_7_fu_686_p3 or icmp_ln90_reg_1247);
        pixelValue_cast_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pixelValue_reg_1440),52));

    row_buffer_1_address0 <= zext_ln94_fu_887_p1(12 - 1 downto 0);

    row_buffer_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            row_buffer_1_ce0 <= ap_const_logic_1;
        else 
            row_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_2_address0 <= zext_ln94_fu_887_p1(12 - 1 downto 0);

    row_buffer_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            row_buffer_2_ce0 <= ap_const_logic_1;
        else 
            row_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_address0 <= zext_ln94_fu_887_p1(12 - 1 downto 0);

    row_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            row_buffer_ce0 <= ap_const_logic_1;
        else 
            row_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln87_1_fu_550_p3 <= 
        add_ln87_fu_517_p2 when (icmp_ln90_fu_527_p2(0) = '1') else 
        iChannel_fu_130;
    select_ln87_2_fu_668_p3 <= 
        ap_const_lv2_0 when (icmp_ln90_reg_1247(0) = '1') else 
        empty_fu_664_p1;
    select_ln87_3_fu_675_p3 <= 
        sub_ln101_1_reg_1259 when (icmp_ln90_reg_1247(0) = '1') else 
        add_ln101_3_fu_631_p2;
    select_ln87_4_fu_820_p3 <= 
        add_ln101_7_fu_805_p2 when (icmp_ln90_reg_1247_pp0_iter2_reg(0) = '1') else 
        add_ln101_4_reg_1280;
    select_ln87_5_fu_826_p3 <= 
        add_ln101_8_fu_810_p2 when (icmp_ln90_reg_1247_pp0_iter2_reg(0) = '1') else 
        add_ln101_5_reg_1285;
    select_ln87_6_fu_832_p3 <= 
        add_ln101_9_fu_815_p2 when (icmp_ln90_reg_1247_pp0_iter2_reg(0) = '1') else 
        add_ln101_6_reg_1290;
    select_ln87_7_fu_686_p3 <= 
        icmp_ln51_1 when (icmp_ln90_reg_1247(0) = '1') else 
        icmp_ln93_fu_681_p2;
    select_ln87_fu_657_p3 <= 
        ap_const_lv32_0 when (icmp_ln90_reg_1247(0) = '1') else 
        cy_fu_122;
    select_ln90_1_fu_757_p3 <= 
        empty_66_fu_753_p1 when (select_ln87_7_fu_686_p3(0) = '1') else 
        select_ln87_2_fu_668_p3;
    select_ln90_2_fu_765_p3 <= 
        add_ln101_13_fu_715_p2 when (select_ln87_7_fu_686_p3(0) = '1') else 
        select_ln87_3_fu_675_p3;
    select_ln90_3_fu_844_p3 <= 
        add_ln101_14_reg_1302 when (select_ln87_7_reg_1295(0) = '1') else 
        select_ln87_4_fu_820_p3;
    select_ln90_4_fu_857_p3 <= 
        add_ln101_15_reg_1307 when (select_ln87_7_reg_1295(0) = '1') else 
        select_ln87_5_fu_826_p3;
    select_ln90_5_fu_870_p3 <= 
        add_ln101_16_reg_1312 when (select_ln87_7_reg_1295(0) = '1') else 
        select_ln87_6_fu_832_p3;
    select_ln90_6_fu_773_p3 <= 
        add_ln90_fu_692_p2 when (select_ln87_7_fu_686_p3(0) = '1') else 
        select_ln87_fu_657_p3;
    select_ln90_7_fu_586_p3 <= 
        ap_const_lv64_1 when (icmp_ln90_fu_527_p2(0) = '1') else 
        add_ln90_1_fu_580_p2;
    select_ln90_fu_703_p3 <= 
        ap_const_lv32_0 when (or_ln90_fu_698_p2(0) = '1') else 
        ap_sig_allocacmp_cx_load;
    sub_ln101_1_fu_544_p2 <= std_logic_vector(unsigned(tmp_6_fu_536_p3) - unsigned(trunc_ln101_2_fu_532_p1));
    sub_ln101_2_fu_574_p2 <= std_logic_vector(unsigned(tmp_7_fu_566_p3) - unsigned(trunc_ln101_3_fu_562_p1));
    sub_ln101_fu_497_p2 <= std_logic_vector(unsigned(tmp_5_fu_489_p3) - unsigned(trunc_ln101_fu_485_p1));
    tmp_5_fu_489_p3 <= (trunc_ln87_fu_481_p1 & ap_const_lv2_0);
    tmp_6_fu_536_p3 <= (trunc_ln87_1_fu_523_p1 & ap_const_lv2_0);
    tmp_7_fu_566_p3 <= (trunc_ln87_2_fu_558_p1 & ap_const_lv2_0);
    trunc_ln101_1_fu_627_p1 <= cy_fu_122(12 - 1 downto 0);
    trunc_ln101_2_fu_532_p1 <= add_ln87_fu_517_p2(12 - 1 downto 0);
    trunc_ln101_3_fu_562_p1 <= select_ln87_1_fu_550_p3(12 - 1 downto 0);
    trunc_ln101_4_fu_711_p1 <= add_ln90_fu_692_p2(12 - 1 downto 0);
    trunc_ln101_fu_485_p1 <= iChannel_fu_130(12 - 1 downto 0);
    trunc_ln87_1_fu_523_p1 <= add_ln87_fu_517_p2(10 - 1 downto 0);
    trunc_ln87_2_fu_558_p1 <= select_ln87_1_fu_550_p3(10 - 1 downto 0);
    trunc_ln87_fu_481_p1 <= iChannel_fu_130(10 - 1 downto 0);
    trunc_ln94_fu_781_p1 <= select_ln90_fu_703_p3(12 - 1 downto 0);
    zext_ln101_1_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_3_fu_844_p3),64));
    zext_ln101_2_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_4_fu_857_p3),64));
    zext_ln101_3_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_5_fu_870_p3),64));
    zext_ln101_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_2_reg_1322),64));
    zext_ln94_fu_887_p0 <= grp_fu_1116_p3;
    zext_ln94_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln94_fu_887_p0),64));
end behav;
