-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_80_10_VITIS_LOOP_83_11_VITIS_LOOP_86_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul_ln17_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    mul_ln17 : IN STD_LOGIC_VECTOR (63 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (11 downto 0);
    convWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln45_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    coeff_cache_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    coeff_cache_ce0 : OUT STD_LOGIC;
    coeff_cache_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    coeff_cache_1_ce0 : OUT STD_LOGIC;
    coeff_cache_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_cache_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    coeff_cache_2_ce0 : OUT STD_LOGIC;
    coeff_cache_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_cast : IN STD_LOGIC_VECTOR (11 downto 0);
    row_buffer_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    row_buffer_ce0 : OUT STD_LOGIC;
    row_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    row_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    row_buffer_1_ce0 : OUT STD_LOGIC;
    row_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    row_buffer_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    row_buffer_2_ce0 : OUT STD_LOGIC;
    row_buffer_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_80_10_VITIS_LOOP_83_11_VITIS_LOOP_86_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln80_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln80_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln80_reg_672 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln80_reg_672_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln80_reg_672_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_261_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_677 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_677_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_677_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln80_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_682_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_682_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_682_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_682_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_682_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_682_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_686_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_686_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_686_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_52_fu_306_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_52_reg_695 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_52_reg_695_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_52_reg_695_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_52_reg_695_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln80_2_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln80_2_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln80_2_reg_700_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln80_2_reg_700_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_53_fu_324_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_53_reg_705 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_53_reg_705_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_53_reg_705_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_50_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_50_reg_715 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln80_4_fu_424_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_4_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_453_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_57_reg_725 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln83_2_fu_463_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln83_2_reg_730 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln83_2_reg_730_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln88_fu_479_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln88_reg_735 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln88_reg_735_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln91_fu_487_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln91_fu_487_p2 : signal is "no";
    signal add_ln91_reg_740 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln86_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln86_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_fu_531_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterValue_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelValue_fu_542_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelValue_reg_785 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_reg_800 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal select_ln83_1_cast_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln91_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal cx_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_cx_load : STD_LOGIC_VECTOR (31 downto 0);
    signal cy_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln83_3_fu_471_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten113_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln83_4_fu_338_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal iChannel_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln80_1_fu_312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten143_fu_96 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln80_1_fu_270_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln80_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln80_1_fu_285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_298_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_51_fu_294_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_1_fu_332_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_364_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_48_fu_371_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_49_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_396_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_55_fu_408_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln86_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln83_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln83_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_54_fu_403_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_56_fu_449_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_58_fu_459_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln80_3_fu_412_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln83_fu_441_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln91_fu_487_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_592_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln91_fu_483_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln80_2_fu_503_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln83_1_fu_508_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_592_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Conv2D_HW_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2D_HW_mul_32s_32s_52_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component Conv2D_HW_mac_muladd_12s_12s_12ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Conv2D_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_32_1_1_U38 : component Conv2D_HW_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => coeff_cache_q0,
        din1 => coeff_cache_1_q0,
        din2 => coeff_cache_2_q0,
        din3 => trunc_ln88_reg_735_pp0_iter5_reg,
        dout => filterValue_fu_531_p5);

    mux_32_32_1_1_U39 : component Conv2D_HW_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => row_buffer_q0,
        din1 => row_buffer_1_q0,
        din2 => row_buffer_2_q0,
        din3 => select_ln83_2_reg_730_pp0_iter5_reg,
        dout => pixelValue_fu_542_p5);

    mul_32s_32s_52_2_1_U40 : component Conv2D_HW_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pixelValue_reg_785,
        din1 => filterValue_reg_780,
        ce => ap_const_logic_1,
        dout => grp_fu_559_p2);

    mac_muladd_12s_12s_12ns_12_4_1_U41 : component Conv2D_HW_mac_muladd_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_592_p0,
        din1 => trunc_ln,
        din2 => x_cast,
        ce => ap_const_logic_1,
        dout => grp_fu_592_p3);

    flow_control_loop_pipe_sequential_init_U : component Conv2D_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    acc_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    acc_fu_76 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    acc_fu_76 <= acc_1_fu_578_p2;
                end if;
            end if; 
        end if;
    end process;

    cx_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cx_fu_80 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    cx_fu_80 <= add_ln86_reg_745;
                end if;
            end if; 
        end if;
    end process;

    cy_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    cy_fu_84 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln80_reg_682_pp0_iter3_reg = ap_const_lv1_0))) then 
                    cy_fu_84 <= select_ln83_3_fu_471_p3;
                end if;
            end if; 
        end if;
    end process;

    iChannel_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    iChannel_fu_92 <= ap_const_lv32_0;
                elsif (((icmp_ln80_fu_265_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    iChannel_fu_92 <= select_ln80_1_fu_312_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten113_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten113_fu_88 <= ap_const_lv64_0;
                elsif (((icmp_ln80_fu_265_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten113_fu_88 <= select_ln83_4_fu_338_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten143_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten143_fu_96 <= ap_const_lv96_0;
                elsif (((icmp_ln80_fu_265_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten143_fu_96 <= add_ln80_1_fu_270_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_682_pp0_iter3_reg = ap_const_lv1_0))) then
                add_ln86_reg_745 <= add_ln86_fu_492_p2;
                add_ln91_reg_740 <= add_ln91_fu_487_p2;
                empty_57_reg_725 <= empty_57_fu_453_p2;
                select_ln80_4_reg_720 <= select_ln80_4_fu_424_p3;
                select_ln83_2_reg_730 <= select_ln83_2_fu_463_p3;
                trunc_ln88_reg_735 <= trunc_ln88_fu_479_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                empty_reg_677 <= empty_fu_261_p1;
                icmp_ln80_reg_682 <= icmp_ln80_fu_265_p2;
                trunc_ln80_reg_672 <= trunc_ln80_fu_257_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                empty_52_reg_695_pp0_iter2_reg <= empty_52_reg_695;
                empty_52_reg_695_pp0_iter3_reg <= empty_52_reg_695_pp0_iter2_reg;
                empty_52_reg_695_pp0_iter4_reg <= empty_52_reg_695_pp0_iter3_reg;
                empty_53_reg_705_pp0_iter2_reg <= empty_53_reg_705;
                empty_53_reg_705_pp0_iter3_reg <= empty_53_reg_705_pp0_iter2_reg;
                empty_reg_677_pp0_iter2_reg <= empty_reg_677;
                empty_reg_677_pp0_iter3_reg <= empty_reg_677_pp0_iter2_reg;
                filterValue_reg_780 <= filterValue_fu_531_p5;
                icmp_ln80_reg_682_pp0_iter2_reg <= icmp_ln80_reg_682;
                icmp_ln80_reg_682_pp0_iter3_reg <= icmp_ln80_reg_682_pp0_iter2_reg;
                icmp_ln80_reg_682_pp0_iter4_reg <= icmp_ln80_reg_682_pp0_iter3_reg;
                icmp_ln80_reg_682_pp0_iter5_reg <= icmp_ln80_reg_682_pp0_iter4_reg;
                icmp_ln80_reg_682_pp0_iter6_reg <= icmp_ln80_reg_682_pp0_iter5_reg;
                icmp_ln80_reg_682_pp0_iter7_reg <= icmp_ln80_reg_682_pp0_iter6_reg;
                icmp_ln83_reg_686_pp0_iter2_reg <= icmp_ln83_reg_686;
                icmp_ln83_reg_686_pp0_iter3_reg <= icmp_ln83_reg_686_pp0_iter2_reg;
                icmp_ln83_reg_686_pp0_iter4_reg <= icmp_ln83_reg_686_pp0_iter3_reg;
                pixelValue_reg_785 <= pixelValue_fu_542_p5;
                select_ln83_2_reg_730_pp0_iter5_reg <= select_ln83_2_reg_730;
                trunc_ln7_reg_800 <= grp_fu_559_p2(51 downto 20);
                trunc_ln80_2_reg_700_pp0_iter2_reg <= trunc_ln80_2_reg_700;
                trunc_ln80_2_reg_700_pp0_iter3_reg <= trunc_ln80_2_reg_700_pp0_iter2_reg;
                trunc_ln80_reg_672_pp0_iter2_reg <= trunc_ln80_reg_672;
                trunc_ln80_reg_672_pp0_iter3_reg <= trunc_ln80_reg_672_pp0_iter2_reg;
                trunc_ln88_reg_735_pp0_iter5_reg <= trunc_ln88_reg_735;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln83_reg_686_pp0_iter3_reg = ap_const_lv1_0))) then
                empty_50_reg_715 <= empty_50_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_265_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_52_reg_695 <= empty_52_fu_306_p2;
                empty_53_reg_705 <= empty_53_fu_324_p1;
                icmp_ln83_reg_686 <= icmp_ln83_fu_289_p2;
                trunc_ln80_2_reg_700 <= trunc_ln80_2_fu_320_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_1_fu_578_p2 <= std_logic_vector(unsigned(trunc_ln7_reg_800) + unsigned(acc_fu_76));
    acc_2_out <= acc_fu_76;

    acc_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln80_reg_682_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_682_pp0_iter7_reg = ap_const_lv1_1))) then 
            acc_2_out_ap_vld <= ap_const_logic_1;
        else 
            acc_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln80_1_fu_270_p2 <= std_logic_vector(unsigned(indvar_flatten143_fu_96) + unsigned(ap_const_lv96_1));
    add_ln80_fu_279_p2 <= std_logic_vector(unsigned(iChannel_fu_92) + unsigned(ap_const_lv32_1));
    add_ln83_1_fu_332_p2 <= std_logic_vector(unsigned(indvar_flatten113_fu_88) + unsigned(ap_const_lv64_1));
    add_ln83_fu_430_p2 <= std_logic_vector(unsigned(select_ln80_fu_389_p3) + unsigned(ap_const_lv32_1));
    add_ln86_fu_492_p2 <= std_logic_vector(unsigned(select_ln83_fu_441_p3) + unsigned(ap_const_lv32_1));
    add_ln91_fu_487_p0 <= grp_fu_592_p3;
    add_ln91_fu_487_p2 <= std_logic_vector(signed(add_ln91_fu_487_p0) + signed(trunc_ln91_fu_483_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln80_fu_265_p2)
    begin
        if (((icmp_ln80_fu_265_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, icmp_ln80_reg_682_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln80_reg_682_pp0_iter3_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_cx_load_assign_proc : process(ap_enable_reg_pp0_iter5, add_ln86_reg_745, ap_block_pp0_stage0, cx_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_sig_allocacmp_cx_load <= add_ln86_reg_745;
        else 
            ap_sig_allocacmp_cx_load <= cx_fu_80;
        end if; 
    end process;

    coeff_cache_1_address0 <= select_ln83_1_cast_fu_514_p1(10 - 1 downto 0);

    coeff_cache_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            coeff_cache_1_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_2_address0 <= select_ln83_1_cast_fu_514_p1(10 - 1 downto 0);

    coeff_cache_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            coeff_cache_2_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_cache_address0 <= select_ln83_1_cast_fu_514_p1(10 - 1 downto 0);

    coeff_cache_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            coeff_cache_ce0 <= ap_const_logic_1;
        else 
            coeff_cache_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_48_fu_371_p2 <= std_logic_vector(unsigned(tmp_2_fu_364_p3) - unsigned(empty_reg_677_pp0_iter3_reg));
    empty_49_fu_376_p1 <= cy_fu_84(10 - 1 downto 0);
    empty_50_fu_380_p2 <= std_logic_vector(unsigned(empty_48_fu_371_p2) + unsigned(empty_49_fu_376_p1));
    empty_51_fu_294_p1 <= add_ln80_fu_279_p2(10 - 1 downto 0);
    empty_52_fu_306_p2 <= std_logic_vector(unsigned(tmp_3_fu_298_p3) - unsigned(empty_51_fu_294_p1));
    empty_53_fu_324_p1 <= select_ln80_1_fu_312_p3(10 - 1 downto 0);
    empty_54_fu_403_p2 <= std_logic_vector(unsigned(tmp_4_fu_396_p3) - unsigned(empty_53_reg_705_pp0_iter3_reg));
    empty_55_fu_408_p1 <= cy_fu_84(2 - 1 downto 0);
    empty_56_fu_449_p1 <= add_ln83_fu_430_p2(10 - 1 downto 0);
    empty_57_fu_453_p2 <= std_logic_vector(unsigned(empty_54_fu_403_p2) + unsigned(empty_56_fu_449_p1));
    empty_58_fu_459_p1 <= add_ln83_fu_430_p2(2 - 1 downto 0);
    empty_fu_261_p1 <= iChannel_fu_92(10 - 1 downto 0);
    grp_fu_592_p0 <= select_ln80_1_fu_312_p3(12 - 1 downto 0);
    icmp_ln80_fu_265_p2 <= "1" when (indvar_flatten143_fu_96 = mul_ln17_1) else "0";
    icmp_ln83_fu_289_p2 <= "1" when (indvar_flatten113_fu_88 = mul_ln17) else "0";
    icmp_ln86_fu_419_p2 <= "1" when (ap_sig_allocacmp_cx_load = convWidth) else "0";
    or_ln83_fu_436_p2 <= (select_ln80_4_fu_424_p3 or icmp_ln83_reg_686_pp0_iter3_reg);
    row_buffer_1_address0 <= zext_ln91_fu_521_p1(12 - 1 downto 0);

    row_buffer_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            row_buffer_1_ce0 <= ap_const_logic_1;
        else 
            row_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_2_address0 <= zext_ln91_fu_521_p1(12 - 1 downto 0);

    row_buffer_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            row_buffer_2_ce0 <= ap_const_logic_1;
        else 
            row_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_address0 <= zext_ln91_fu_521_p1(12 - 1 downto 0);

    row_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            row_buffer_ce0 <= ap_const_logic_1;
        else 
            row_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln80_1_fu_312_p3 <= 
        add_ln80_fu_279_p2 when (icmp_ln83_fu_289_p2(0) = '1') else 
        iChannel_fu_92;
    select_ln80_2_fu_503_p3 <= 
        empty_52_reg_695_pp0_iter4_reg when (icmp_ln83_reg_686_pp0_iter4_reg(0) = '1') else 
        empty_50_reg_715;
    select_ln80_3_fu_412_p3 <= 
        ap_const_lv2_0 when (icmp_ln83_reg_686_pp0_iter3_reg(0) = '1') else 
        empty_55_fu_408_p1;
    select_ln80_4_fu_424_p3 <= 
        icmp_ln45_1 when (icmp_ln83_reg_686_pp0_iter3_reg(0) = '1') else 
        icmp_ln86_fu_419_p2;
    select_ln80_fu_389_p3 <= 
        ap_const_lv32_0 when (icmp_ln83_reg_686_pp0_iter3_reg(0) = '1') else 
        cy_fu_84;
    select_ln83_1_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_1_fu_508_p3),64));
    select_ln83_1_fu_508_p3 <= 
        empty_57_reg_725 when (select_ln80_4_reg_720(0) = '1') else 
        select_ln80_2_fu_503_p3;
    select_ln83_2_fu_463_p3 <= 
        empty_58_fu_459_p1 when (select_ln80_4_fu_424_p3(0) = '1') else 
        select_ln80_3_fu_412_p3;
    select_ln83_3_fu_471_p3 <= 
        add_ln83_fu_430_p2 when (select_ln80_4_fu_424_p3(0) = '1') else 
        select_ln80_fu_389_p3;
    select_ln83_4_fu_338_p3 <= 
        ap_const_lv64_1 when (icmp_ln83_fu_289_p2(0) = '1') else 
        add_ln83_1_fu_332_p2;
    select_ln83_fu_441_p3 <= 
        ap_const_lv32_0 when (or_ln83_fu_436_p2(0) = '1') else 
        ap_sig_allocacmp_cx_load;
    tmp_2_fu_364_p3 <= (trunc_ln80_reg_672_pp0_iter3_reg & ap_const_lv2_0);
    tmp_3_fu_298_p3 <= (trunc_ln80_1_fu_285_p1 & ap_const_lv2_0);
    tmp_4_fu_396_p3 <= (trunc_ln80_2_reg_700_pp0_iter3_reg & ap_const_lv2_0);
    trunc_ln80_1_fu_285_p1 <= add_ln80_fu_279_p2(8 - 1 downto 0);
    trunc_ln80_2_fu_320_p1 <= select_ln80_1_fu_312_p3(8 - 1 downto 0);
    trunc_ln80_fu_257_p1 <= iChannel_fu_92(8 - 1 downto 0);
    trunc_ln88_fu_479_p1 <= select_ln83_fu_441_p3(2 - 1 downto 0);
    trunc_ln91_fu_483_p1 <= select_ln83_fu_441_p3(12 - 1 downto 0);
    zext_ln91_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_reg_740),64));
end behav;
