// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_80_10_VITIS_LOOP_83_11_VITIS_LOOP_86_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_ln17_1,
        mul_ln17,
        trunc_ln,
        convWidth,
        icmp_ln45_1,
        coeff_cache_address0,
        coeff_cache_ce0,
        coeff_cache_q0,
        coeff_cache_1_address0,
        coeff_cache_1_ce0,
        coeff_cache_1_q0,
        coeff_cache_2_address0,
        coeff_cache_2_ce0,
        coeff_cache_2_q0,
        x_cast,
        row_buffer_address0,
        row_buffer_ce0,
        row_buffer_q0,
        row_buffer_1_address0,
        row_buffer_1_ce0,
        row_buffer_1_q0,
        row_buffer_2_address0,
        row_buffer_2_ce0,
        row_buffer_2_q0,
        acc_2_out,
        acc_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [95:0] mul_ln17_1;
input  [63:0] mul_ln17;
input  [11:0] trunc_ln;
input  [31:0] convWidth;
input  [0:0] icmp_ln45_1;
output  [9:0] coeff_cache_address0;
output   coeff_cache_ce0;
input  [31:0] coeff_cache_q0;
output  [9:0] coeff_cache_1_address0;
output   coeff_cache_1_ce0;
input  [31:0] coeff_cache_1_q0;
output  [9:0] coeff_cache_2_address0;
output   coeff_cache_2_ce0;
input  [31:0] coeff_cache_2_q0;
input  [11:0] x_cast;
output  [11:0] row_buffer_address0;
output   row_buffer_ce0;
input  [31:0] row_buffer_q0;
output  [11:0] row_buffer_1_address0;
output   row_buffer_1_ce0;
input  [31:0] row_buffer_1_q0;
output  [11:0] row_buffer_2_address0;
output   row_buffer_2_ce0;
input  [31:0] row_buffer_2_q0;
output  [31:0] acc_2_out;
output   acc_2_out_ap_vld;

reg ap_idle;
reg coeff_cache_ce0;
reg coeff_cache_1_ce0;
reg coeff_cache_2_ce0;
reg row_buffer_ce0;
reg row_buffer_1_ce0;
reg row_buffer_2_ce0;
reg acc_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln80_fu_265_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] trunc_ln80_fu_257_p1;
reg   [7:0] trunc_ln80_reg_672;
reg   [7:0] trunc_ln80_reg_672_pp0_iter2_reg;
reg   [7:0] trunc_ln80_reg_672_pp0_iter3_reg;
wire   [9:0] empty_fu_261_p1;
reg   [9:0] empty_reg_677;
reg   [9:0] empty_reg_677_pp0_iter2_reg;
reg   [9:0] empty_reg_677_pp0_iter3_reg;
reg   [0:0] icmp_ln80_reg_682;
reg   [0:0] icmp_ln80_reg_682_pp0_iter2_reg;
reg   [0:0] icmp_ln80_reg_682_pp0_iter3_reg;
reg   [0:0] icmp_ln80_reg_682_pp0_iter4_reg;
reg   [0:0] icmp_ln80_reg_682_pp0_iter5_reg;
reg   [0:0] icmp_ln80_reg_682_pp0_iter6_reg;
reg   [0:0] icmp_ln80_reg_682_pp0_iter7_reg;
wire   [0:0] icmp_ln83_fu_289_p2;
reg   [0:0] icmp_ln83_reg_686;
reg   [0:0] icmp_ln83_reg_686_pp0_iter2_reg;
reg   [0:0] icmp_ln83_reg_686_pp0_iter3_reg;
reg   [0:0] icmp_ln83_reg_686_pp0_iter4_reg;
wire   [9:0] empty_52_fu_306_p2;
reg   [9:0] empty_52_reg_695;
reg   [9:0] empty_52_reg_695_pp0_iter2_reg;
reg   [9:0] empty_52_reg_695_pp0_iter3_reg;
reg   [9:0] empty_52_reg_695_pp0_iter4_reg;
wire   [7:0] trunc_ln80_2_fu_320_p1;
reg   [7:0] trunc_ln80_2_reg_700;
reg   [7:0] trunc_ln80_2_reg_700_pp0_iter2_reg;
reg   [7:0] trunc_ln80_2_reg_700_pp0_iter3_reg;
wire   [9:0] empty_53_fu_324_p1;
reg   [9:0] empty_53_reg_705;
reg   [9:0] empty_53_reg_705_pp0_iter2_reg;
reg   [9:0] empty_53_reg_705_pp0_iter3_reg;
wire   [9:0] empty_50_fu_380_p2;
reg   [9:0] empty_50_reg_715;
wire   [0:0] select_ln80_4_fu_424_p3;
reg   [0:0] select_ln80_4_reg_720;
wire   [9:0] empty_57_fu_453_p2;
reg   [9:0] empty_57_reg_725;
wire   [1:0] select_ln83_2_fu_463_p3;
reg   [1:0] select_ln83_2_reg_730;
reg   [1:0] select_ln83_2_reg_730_pp0_iter5_reg;
wire   [1:0] trunc_ln88_fu_479_p1;
reg   [1:0] trunc_ln88_reg_735;
reg   [1:0] trunc_ln88_reg_735_pp0_iter5_reg;
(* use_dsp48 = "no" *) wire   [11:0] add_ln91_fu_487_p2;
reg   [11:0] add_ln91_reg_740;
wire   [31:0] add_ln86_fu_492_p2;
reg   [31:0] add_ln86_reg_745;
wire   [31:0] filterValue_fu_531_p5;
reg  signed [31:0] filterValue_reg_780;
wire   [31:0] pixelValue_fu_542_p5;
reg  signed [31:0] pixelValue_reg_785;
reg   [31:0] trunc_ln7_reg_800;
reg    ap_condition_exit_pp0_iter4_stage0;
wire   [63:0] select_ln83_1_cast_fu_514_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln91_fu_521_p1;
reg   [31:0] acc_fu_76;
wire   [31:0] acc_1_fu_578_p2;
wire    ap_loop_init;
reg   [31:0] cx_fu_80;
reg   [31:0] ap_sig_allocacmp_cx_load;
reg   [31:0] cy_fu_84;
wire   [31:0] select_ln83_3_fu_471_p3;
reg   [63:0] indvar_flatten113_fu_88;
wire   [63:0] select_ln83_4_fu_338_p3;
reg   [31:0] iChannel_fu_92;
wire   [31:0] select_ln80_1_fu_312_p3;
reg   [95:0] indvar_flatten143_fu_96;
wire   [95:0] add_ln80_1_fu_270_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] add_ln80_fu_279_p2;
wire   [7:0] trunc_ln80_1_fu_285_p1;
wire   [9:0] tmp_3_fu_298_p3;
wire   [9:0] empty_51_fu_294_p1;
wire   [63:0] add_ln83_1_fu_332_p2;
wire   [9:0] tmp_2_fu_364_p3;
wire   [9:0] empty_48_fu_371_p2;
wire   [9:0] empty_49_fu_376_p1;
wire   [9:0] tmp_4_fu_396_p3;
wire   [1:0] empty_55_fu_408_p1;
wire   [0:0] icmp_ln86_fu_419_p2;
wire   [31:0] select_ln80_fu_389_p3;
wire   [0:0] or_ln83_fu_436_p2;
wire   [31:0] add_ln83_fu_430_p2;
wire   [9:0] empty_54_fu_403_p2;
wire   [9:0] empty_56_fu_449_p1;
wire   [1:0] empty_58_fu_459_p1;
wire   [1:0] select_ln80_3_fu_412_p3;
wire   [31:0] select_ln83_fu_441_p3;
wire  signed [11:0] add_ln91_fu_487_p0;
wire   [11:0] grp_fu_592_p3;
wire   [11:0] trunc_ln91_fu_483_p1;
wire   [9:0] select_ln80_2_fu_503_p3;
wire   [9:0] select_ln83_1_fu_508_p3;
wire   [51:0] grp_fu_559_p2;
wire  signed [11:0] grp_fu_592_p0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Conv2D_HW_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U38(
    .din0(coeff_cache_q0),
    .din1(coeff_cache_1_q0),
    .din2(coeff_cache_2_q0),
    .din3(trunc_ln88_reg_735_pp0_iter5_reg),
    .dout(filterValue_fu_531_p5)
);

Conv2D_HW_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U39(
    .din0(row_buffer_q0),
    .din1(row_buffer_1_q0),
    .din2(row_buffer_2_q0),
    .din3(select_ln83_2_reg_730_pp0_iter5_reg),
    .dout(pixelValue_fu_542_p5)
);

Conv2D_HW_mul_32s_32s_52_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 52 ))
mul_32s_32s_52_2_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(pixelValue_reg_785),
    .din1(filterValue_reg_780),
    .ce(1'b1),
    .dout(grp_fu_559_p2)
);

Conv2D_HW_mac_muladd_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_12s_12s_12ns_12_4_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_592_p0),
    .din1(trunc_ln),
    .din2(x_cast),
    .ce(1'b1),
    .dout(grp_fu_592_p3)
);

Conv2D_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter4_stage0)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            acc_fu_76 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter9 == 1'b1)) begin
            acc_fu_76 <= acc_1_fu_578_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cx_fu_80 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            cx_fu_80 <= add_ln86_reg_745;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cy_fu_84 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln80_reg_682_pp0_iter3_reg == 1'd0))) begin
            cy_fu_84 <= select_ln83_3_fu_471_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            iChannel_fu_92 <= 32'd0;
        end else if (((icmp_ln80_fu_265_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            iChannel_fu_92 <= select_ln80_1_fu_312_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten113_fu_88 <= 64'd0;
        end else if (((icmp_ln80_fu_265_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten113_fu_88 <= select_ln83_4_fu_338_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten143_fu_96 <= 96'd0;
        end else if (((icmp_ln80_fu_265_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten143_fu_96 <= add_ln80_1_fu_270_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_682_pp0_iter3_reg == 1'd0))) begin
        add_ln86_reg_745 <= add_ln86_fu_492_p2;
        add_ln91_reg_740 <= add_ln91_fu_487_p2;
        empty_57_reg_725 <= empty_57_fu_453_p2;
        select_ln80_4_reg_720 <= select_ln80_4_fu_424_p3;
        select_ln83_2_reg_730 <= select_ln83_2_fu_463_p3;
        trunc_ln88_reg_735 <= trunc_ln88_fu_479_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        empty_reg_677 <= empty_fu_261_p1;
        icmp_ln80_reg_682 <= icmp_ln80_fu_265_p2;
        trunc_ln80_reg_672 <= trunc_ln80_fu_257_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        empty_52_reg_695_pp0_iter2_reg <= empty_52_reg_695;
        empty_52_reg_695_pp0_iter3_reg <= empty_52_reg_695_pp0_iter2_reg;
        empty_52_reg_695_pp0_iter4_reg <= empty_52_reg_695_pp0_iter3_reg;
        empty_53_reg_705_pp0_iter2_reg <= empty_53_reg_705;
        empty_53_reg_705_pp0_iter3_reg <= empty_53_reg_705_pp0_iter2_reg;
        empty_reg_677_pp0_iter2_reg <= empty_reg_677;
        empty_reg_677_pp0_iter3_reg <= empty_reg_677_pp0_iter2_reg;
        filterValue_reg_780 <= filterValue_fu_531_p5;
        icmp_ln80_reg_682_pp0_iter2_reg <= icmp_ln80_reg_682;
        icmp_ln80_reg_682_pp0_iter3_reg <= icmp_ln80_reg_682_pp0_iter2_reg;
        icmp_ln80_reg_682_pp0_iter4_reg <= icmp_ln80_reg_682_pp0_iter3_reg;
        icmp_ln80_reg_682_pp0_iter5_reg <= icmp_ln80_reg_682_pp0_iter4_reg;
        icmp_ln80_reg_682_pp0_iter6_reg <= icmp_ln80_reg_682_pp0_iter5_reg;
        icmp_ln80_reg_682_pp0_iter7_reg <= icmp_ln80_reg_682_pp0_iter6_reg;
        icmp_ln83_reg_686_pp0_iter2_reg <= icmp_ln83_reg_686;
        icmp_ln83_reg_686_pp0_iter3_reg <= icmp_ln83_reg_686_pp0_iter2_reg;
        icmp_ln83_reg_686_pp0_iter4_reg <= icmp_ln83_reg_686_pp0_iter3_reg;
        pixelValue_reg_785 <= pixelValue_fu_542_p5;
        select_ln83_2_reg_730_pp0_iter5_reg <= select_ln83_2_reg_730;
        trunc_ln7_reg_800 <= {{grp_fu_559_p2[51:20]}};
        trunc_ln80_2_reg_700_pp0_iter2_reg <= trunc_ln80_2_reg_700;
        trunc_ln80_2_reg_700_pp0_iter3_reg <= trunc_ln80_2_reg_700_pp0_iter2_reg;
        trunc_ln80_reg_672_pp0_iter2_reg <= trunc_ln80_reg_672;
        trunc_ln80_reg_672_pp0_iter3_reg <= trunc_ln80_reg_672_pp0_iter2_reg;
        trunc_ln88_reg_735_pp0_iter5_reg <= trunc_ln88_reg_735;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_reg_686_pp0_iter3_reg == 1'd0))) begin
        empty_50_reg_715 <= empty_50_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_265_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_52_reg_695 <= empty_52_fu_306_p2;
        empty_53_reg_705 <= empty_53_fu_324_p1;
        icmp_ln83_reg_686 <= icmp_ln83_fu_289_p2;
        trunc_ln80_2_reg_700 <= trunc_ln80_2_fu_320_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_682_pp0_iter7_reg == 1'd1))) begin
        acc_2_out_ap_vld = 1'b1;
    end else begin
        acc_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_fu_265_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln80_reg_682_pp0_iter3_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_sig_allocacmp_cx_load = add_ln86_reg_745;
    end else begin
        ap_sig_allocacmp_cx_load = cx_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        coeff_cache_1_ce0 = 1'b1;
    end else begin
        coeff_cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        coeff_cache_2_ce0 = 1'b1;
    end else begin
        coeff_cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        coeff_cache_ce0 = 1'b1;
    end else begin
        coeff_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        row_buffer_1_ce0 = 1'b1;
    end else begin
        row_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        row_buffer_2_ce0 = 1'b1;
    end else begin
        row_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        row_buffer_ce0 = 1'b1;
    end else begin
        row_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_578_p2 = (trunc_ln7_reg_800 + acc_fu_76);

assign acc_2_out = acc_fu_76;

assign add_ln80_1_fu_270_p2 = (indvar_flatten143_fu_96 + 96'd1);

assign add_ln80_fu_279_p2 = (iChannel_fu_92 + 32'd1);

assign add_ln83_1_fu_332_p2 = (indvar_flatten113_fu_88 + 64'd1);

assign add_ln83_fu_430_p2 = (select_ln80_fu_389_p3 + 32'd1);

assign add_ln86_fu_492_p2 = (select_ln83_fu_441_p3 + 32'd1);

assign add_ln91_fu_487_p0 = grp_fu_592_p3;

assign add_ln91_fu_487_p2 = ($signed(add_ln91_fu_487_p0) + $signed(trunc_ln91_fu_483_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign coeff_cache_1_address0 = select_ln83_1_cast_fu_514_p1;

assign coeff_cache_2_address0 = select_ln83_1_cast_fu_514_p1;

assign coeff_cache_address0 = select_ln83_1_cast_fu_514_p1;

assign empty_48_fu_371_p2 = (tmp_2_fu_364_p3 - empty_reg_677_pp0_iter3_reg);

assign empty_49_fu_376_p1 = cy_fu_84[9:0];

assign empty_50_fu_380_p2 = (empty_48_fu_371_p2 + empty_49_fu_376_p1);

assign empty_51_fu_294_p1 = add_ln80_fu_279_p2[9:0];

assign empty_52_fu_306_p2 = (tmp_3_fu_298_p3 - empty_51_fu_294_p1);

assign empty_53_fu_324_p1 = select_ln80_1_fu_312_p3[9:0];

assign empty_54_fu_403_p2 = (tmp_4_fu_396_p3 - empty_53_reg_705_pp0_iter3_reg);

assign empty_55_fu_408_p1 = cy_fu_84[1:0];

assign empty_56_fu_449_p1 = add_ln83_fu_430_p2[9:0];

assign empty_57_fu_453_p2 = (empty_54_fu_403_p2 + empty_56_fu_449_p1);

assign empty_58_fu_459_p1 = add_ln83_fu_430_p2[1:0];

assign empty_fu_261_p1 = iChannel_fu_92[9:0];

assign grp_fu_592_p0 = select_ln80_1_fu_312_p3[11:0];

assign icmp_ln80_fu_265_p2 = ((indvar_flatten143_fu_96 == mul_ln17_1) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_289_p2 = ((indvar_flatten113_fu_88 == mul_ln17) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_419_p2 = ((ap_sig_allocacmp_cx_load == convWidth) ? 1'b1 : 1'b0);

assign or_ln83_fu_436_p2 = (select_ln80_4_fu_424_p3 | icmp_ln83_reg_686_pp0_iter3_reg);

assign row_buffer_1_address0 = zext_ln91_fu_521_p1;

assign row_buffer_2_address0 = zext_ln91_fu_521_p1;

assign row_buffer_address0 = zext_ln91_fu_521_p1;

assign select_ln80_1_fu_312_p3 = ((icmp_ln83_fu_289_p2[0:0] == 1'b1) ? add_ln80_fu_279_p2 : iChannel_fu_92);

assign select_ln80_2_fu_503_p3 = ((icmp_ln83_reg_686_pp0_iter4_reg[0:0] == 1'b1) ? empty_52_reg_695_pp0_iter4_reg : empty_50_reg_715);

assign select_ln80_3_fu_412_p3 = ((icmp_ln83_reg_686_pp0_iter3_reg[0:0] == 1'b1) ? 2'd0 : empty_55_fu_408_p1);

assign select_ln80_4_fu_424_p3 = ((icmp_ln83_reg_686_pp0_iter3_reg[0:0] == 1'b1) ? icmp_ln45_1 : icmp_ln86_fu_419_p2);

assign select_ln80_fu_389_p3 = ((icmp_ln83_reg_686_pp0_iter3_reg[0:0] == 1'b1) ? 32'd0 : cy_fu_84);

assign select_ln83_1_cast_fu_514_p1 = select_ln83_1_fu_508_p3;

assign select_ln83_1_fu_508_p3 = ((select_ln80_4_reg_720[0:0] == 1'b1) ? empty_57_reg_725 : select_ln80_2_fu_503_p3);

assign select_ln83_2_fu_463_p3 = ((select_ln80_4_fu_424_p3[0:0] == 1'b1) ? empty_58_fu_459_p1 : select_ln80_3_fu_412_p3);

assign select_ln83_3_fu_471_p3 = ((select_ln80_4_fu_424_p3[0:0] == 1'b1) ? add_ln83_fu_430_p2 : select_ln80_fu_389_p3);

assign select_ln83_4_fu_338_p3 = ((icmp_ln83_fu_289_p2[0:0] == 1'b1) ? 64'd1 : add_ln83_1_fu_332_p2);

assign select_ln83_fu_441_p3 = ((or_ln83_fu_436_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_cx_load);

assign tmp_2_fu_364_p3 = {{trunc_ln80_reg_672_pp0_iter3_reg}, {2'd0}};

assign tmp_3_fu_298_p3 = {{trunc_ln80_1_fu_285_p1}, {2'd0}};

assign tmp_4_fu_396_p3 = {{trunc_ln80_2_reg_700_pp0_iter3_reg}, {2'd0}};

assign trunc_ln80_1_fu_285_p1 = add_ln80_fu_279_p2[7:0];

assign trunc_ln80_2_fu_320_p1 = select_ln80_1_fu_312_p3[7:0];

assign trunc_ln80_fu_257_p1 = iChannel_fu_92[7:0];

assign trunc_ln88_fu_479_p1 = select_ln83_fu_441_p3[1:0];

assign trunc_ln91_fu_483_p1 = select_ln83_fu_441_p3[11:0];

assign zext_ln91_fu_521_p1 = add_ln91_reg_740;

endmodule //Conv2D_HW_Conv2D_HW_Pipeline_VITIS_LOOP_80_10_VITIS_LOOP_83_11_VITIS_LOOP_86_12
